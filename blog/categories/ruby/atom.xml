<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Drafts Previewer]]></title>
  <link href="http://vis-kid.github.io/octo-draft/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://vis-kid.github.io/octo-draft/"/>
  <updated>2016-03-14T22:45:33+01:00</updated>
  <id>http://vis-kid.github.io/octo-draft/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Slim Basics 02]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2016/02/25/Slim-Basics-02/"/>
    <updated>2016-02-25T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2016/02/25/Slim-Basics-02</id>
    <content type="html"><![CDATA[<p><img src="/images/Slim/slim-fishbowl-refined.png"></p>

<h2>Topics</h2>

<ul>
<li>Outputting Code</li>
<li>Text interpolation</li>
<li>Control Code</li>
<li>Inline HTML</li>
<li>Verbatim Text</li>
<li>Comments</li>
<li>Custom Shortcuts</li>
<li>Configuring Slim</li>
</ul>


<!---
+ Helpers
+ Safety
+ Logic-less Mode
+ Performance
+ Framework Support
+ Command Line Slim slimrb
+ Temple & Tilt
-->


<h3>Outputting Code</h3>

<p>You have already seen a bit how to use Ruby in your templates. This section gives you all you need to make use of this. In the first article, we have been using Ruby already in our templates. Let me remind you what I mean:</p>

<h4>Sim:</h4>

<pre><code class="slim">
html
  head
    title
    = stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' =&gt; true
    = javascript_include_tag 'application', 'data-turbolinks-track' =&gt; true
    = csrf_meta_tags
</code></pre>

<p>As you can see, inside this head tag, we already used a couple of methods from Rails to deal with styles and JavaScript stuff—nothing major. All you need to do to execute Ruby code is prepend it with an equals <code>=</code> sign. If your code needs to spread over multiple lines, just append a backslash <code>\</code> at the end of each line and keep going onto the next one. Should you end the line in a comma <code>,</code>, then you don’t need the backslash. Nice little touch if you ask me.</p>

<p>Let’s have a look at another, more concrete example. Writing forms is often a pain in the butt—lots of boilerplate code, lots of repetition and all these dreaded <code>&lt;%= %&gt;</code> signs in ERB. This can get messy in no time. Could be nicer huh?</p>

<p>ERB:</p>

<pre><code class="erb">
&lt;%= form_for @agent do |f| %&gt;

  &lt;%= f.label      :name %&gt;
  &lt;%= f.text_field :name %&gt;

  &lt;%= f.label      :number %&gt;
  &lt;%= f.text_field :number %&gt;

  &lt;%= f.label      :licence_to_kill %&gt;
  &lt;%= f.check_box  :licence_to_kill %&gt;

  &lt;%= f.label      :gambler %&gt;
  &lt;%= f.check_box  :gambler %&gt;

  &lt;%= f.label      :womanizer %&gt;
  &lt;%= f.check_box  :womanizer %&gt;

  &lt;%= f.submit %&gt;

&lt;% end %&gt;
</code></pre>

<p>A lot of stuff to write for creating a new <code>@agent</code> object, no? Slim lets you handle this a lot more succinct. We just keep the equals sign and get rid of most other stuff. Tadaa!</p>

<p>Slim:</p>

<pre><code class="slim">
= form_for @agent do |f|

  = f.label      :name
  = f.text_field :name

  = f.label      :number
  = f.text_field :number

  = f.label      :licence_to_kill
  = f.check_box  :licence_to_kill

  = f.label      :gambler
  = f.check_box  :gambler

  = f.label      :womanizer
  = f.check_box  :womanizer

  = f.submit
</code></pre>

<p>You can clearly see why this project is called Slim. So much excess fat is gone. Don’t tell me you don’t like what you see, I know you’re digging it! Just an <code>=</code> sign and you can populate your markup with Ruby code—in this case from Rails of course. And when you compare it to the HTML rendered on the final page, it’s hard to ignore how compact Slim really is.</p>

<p>HTML Output:</p>

<pre><code class="html">&lt;form action="/" accept-charset="UTF-8" method="post"&gt;&lt;input name="utf8" type="hidden" value="&amp;#x2713;" /&gt;
  &lt;input type="hidden" name="authenticity_token" value="+P2I801EkEVBlsMgDo9g9/XgwwQfCBd1eoOBkFmgAHE4bxYi9HGUjEjsNwNMnEadV2tbDtYvQhFb4s/SNMXYtw==" /&gt;

  &lt;label for="agent_name"&gt;Name&lt;/label&gt;
  &lt;input type="text" name="agent[name]" id="agent_name" /&gt;

  &lt;label for="agent_number"&gt;Number&lt;/label&gt;
  &lt;input type="text" name="agent[number]" id="agent_number" /&gt;

  &lt;label for="agent_licence_to_kill"&gt;Licence to kill&lt;/label&gt;
  &lt;input name="agent[licence_to_kill]" type="hidden" value="0" /&gt;
  &lt;input type="checkbox" value="1" name="agent[licence_to_kill]" id="agent_licence_to_kill" /&gt;

  &lt;label for="agent_gambler"&gt;Gambler&lt;/label&gt;
  &lt;input name="agent[gambler]" type="hidden" value="0" /&gt;
  &lt;input type="checkbox" value="1" name="agent[gambler]" id="agent_gambler" /&gt;

  &lt;label for="agent_womanizer"&gt;Womanizer&lt;/label&gt;
  &lt;input name="agent[womanizer]" type="hidden" value="0" /&gt;
  &lt;input type="checkbox" value="1" name="agent[womanizer]" id="agent_womanizer" /&gt;

  &lt;input type="submit" name="commit" value="Save Agent" /&gt;
&lt;/form&gt;
</code></pre>

<p>Remember the initial question that the Slim core team is guided by: “What&rsquo;s the minimum required to make this work?” When you look at the final HTML output, I guess it’s fair to say that Slim has answered that question quite successfully—no complaints on my end. I wanna throw in a couple more small examples to give you more opportunity to get used to how this looks in Slim.</p>

<p>This ERB snippet …</p>

<pre><code class="erb">
&lt;%= render "shared/agents", collection: @agents %&gt;
</code></pre>

<p>… becomes this in Slim:</p>

<pre><code class="slim">
= render "shared/agents", collection: @agents
</code></pre>

<p>ERB:</p>

<p>``` erb</p>

<h2>Agents</h2>


<ul>
  <% @agents.each do |agent| %>
    <li class='agent'>
      <div>Name: <%=            agent.name %></div>
      <div>Number: <%=          agent.number %></div>
      <div>Licence to kill: <%= agent.licence_to_kill %></div>
    </li>
  <% end %>
</ul>


<pre><code>
Slim:
</code></pre>

<p>h2 Agents
ul
  - @agents.each do |agent|
    li.agent
      div
        | Name:
        = agent.name
      div
        | Number:
        = agent.number
      div
        | Licence to kill:
        = agent.licence_to_kill</p>

<pre><code>
You could also write this a bit more streamlined via interpolation. You don’t wanna go too crazy with that one though. This would look like this then:

Slim:
</code></pre>

<p>h2 Agents
ul
  - @agents.each do |agent|
    li.agent
      div Name:            #{agent.name}
      div Number:          #{agent.number}
      div Licence to kill: #{agent.licence_to_kill}</p>

<pre><code>
### Text Interpolation

I mentioned this before briefly but since it is a form of outputting Ruby code it belongs to this section as well. You can use standard text interpolation from Ruby in your Slim templates as well of course. 

Slim:
</code></pre>

<p> h2 Welcome Mr. #{misix_agent.surname}! I expect you to die!</p>

<p> h2 Welcome Mr. #{misix_agent.surname}! I expect you to die!</p>

<pre><code>
HTML:
</code></pre>

<h2>
  Welcome Mr. Bond! I expect you to die!
</h2>




<h2>
  Welcome Mr. \#{misix_agent.surname}! I expect you to die!
</h2>


<pre><code>
As seen above, a simple leading backslash `\` escapes the interpolation.

### Control Code

One more for the road. Let’s say you want to use a couple of conditionals in your view. Similar to Haml, you signify Ruby code that is not supposed to be outputted onto the page by a simple dash ```-```. You have seen this in the example above where we used that to iterate over ```@agents``` without displaying that particular part of the code. Although you should try to stay away from all kinds of conditionals in your views where possible and try to find better OOP solutions for such cases—which is a story for another time—they would look something like this:

Slim:
</code></pre>

<ul>
<li>if current_user.role == &ldquo;admin&rdquo;
p#admintxt | Welcome back my master!
= link_to &ldquo;Edit Profile&rdquo;, edit_user_path(:current)
= link_to &ldquo;Logout&rdquo;,       logout_path</li>
<li>elsif current_user
= link_to &ldquo;Edit Profile&rdquo;, edit_user_path(:current)
= link_to &ldquo;Logout&rdquo;,       logout_path</li>
<li>else
= link_to &ldquo;Register&rdquo;,     new_user_path
= link_to &ldquo;Login&rdquo;,        login_path</li>
</ul>


<pre><code>
ERB:
</code></pre>

<p>&lt;% if current_user.role == &ldquo;admin&rdquo; %>
  <p id="admintxt">Welcome back my master!</p>
  &lt;%= link_to &ldquo;Edit Profile&rdquo;, edit_user_path(:current) %>
  &lt;%= link_to &ldquo;Logout&rdquo;,       logout_path %>
&lt;% elsif current_user %>
  &lt;%= link_to &ldquo;Edit Profile&rdquo;, edit_user_path(:current) %>
  &lt;%= link_to &ldquo;Logout&rdquo;,       logout_path %>
&lt;% else %>
  &lt;%= link_to &ldquo;Register&rdquo;,     new_user_path %>
  &lt;%= link_to &ldquo;Login&rdquo;,        login_path %>
&lt;% end %></p>

<pre><code>
If you want to output code without HTML escaping in place, just use two equals sign ```==```. That’s it!

Before we move on, I definitely should take the time to mention this: As you are hopefully aware of, tons of view code—aka tons of Ruby code in our context—is a serious smell and should be minimized at all times. Just because Slim makes it maybe even more enticing to plaster your templates with tons of logic, does not mean that you should. Practice constraint in that department! Done right on the other hand, Slim makes it really elegant to inject Ruby where needed.

## Inline HTML

If you feel the need to write HTML in your Slim templates you have the option to. I haven’t used that feature nor would I care to use it but maybe during a transitional phase this could be helpful for newcomers. Let’s have a super quick look.

Slim:
</code></pre>

<p>doctype html
<html>
  head
    title = full_title(yield(:title))
    = stylesheet_link_tag &lsquo;application&rsquo;, media: &lsquo;all&rsquo;, &lsquo;data-turbolinks-track&rsquo; => true
    = javascript_include_tag &lsquo;application&rsquo;, &lsquo;data-turbolinks-track&rsquo; => true
    = csrf_meta_tags
  <body>
    header.navbar
      .logo
        = link_to &ldquo;sample app&rdquo;, &lsquo;root_path&rsquo;, id: &ldquo;logo&rdquo;
        <nav>
          ul.navbar-right
            li
              = link_to &ldquo;Home&rdquo;,   &lsquo;root_path&rsquo;
            li
              = link_to &ldquo;Help&rdquo;,   &lsquo;help_path&rsquo;
            li
              = link_to &ldquo;Log in&rdquo;, &lsquo;login_path&rsquo;
        </nav>
    .main
      = yield
  </body>
</html></p>

<pre><code>
When Slim encounters the left angle bracket ```&lt;```, it knows that you want to mix in some HTML. 

## Verbatim Text (Word for Word)

The pipe character ```|``` signals Slim that you want to have plain text—word for word—and just copies the line. In effect, this let’s you avoid any kind of processing. The documentation says that if you want to write verbatim text over multiple lines, you have to indent the text with each line break.

Slim:
</code></pre>

<p>body
  p
    |
      Slim is my new best friend. Slim is my new best friend.</p>

<pre><code>

HTML Output:
</code></pre>

<p><body>
  <p>
    Slim is my new best friend. Slim is my new best friend.
  </p>
</body></p>

<pre><code>
Screenshot:

<img src="/images/Slim/verbatim-text-screenshot.png">

If you put the text on the same line as the pipe character, you can set the left margin after the pipe plus one single space. Out of curiosity, I fooled a bit around with this and found the following results. Only the last example variation has a little obvious hiccup you should be aware of—it swallows the first word of the sentence. 

Slim:
</code></pre>

<p>body
  p
    |
      This line is on the left margin.
       This line will have one space in front of it.
         This line will have two spaces in front of it.
            And so on&hellip;</p>

<p>  p
    | This line is on the left margin.
       This line will have one space in front of it.
         This line will have two spaces in front of it.
            And so on&hellip;</p>

<p>  p This line is on the left margin.
       This line will have one space in front of it.
         This line will have two spaces in front of it.
            And so on&hellip;</p>

<p>  p This line is on the left margin.
    This line will have one space in front of it.
    This line will have two spaces in front of it.
    And so on&hellip;</p>

<p>  p
    This line is on the left margin.
    This line will have one space in front of it.
    This line will have two spaces in front of it.
    And so on&hellip;</p>

<pre><code>
Screenshot:

<img src="/images/Slim/multiple-verbatim-text-screenshot.png">

The output how it’s rendered into your HTML markup differs a bit.
</code></pre>

<p><body>
    <p>
      This line is on the left margin.
       This line will have one space in front of it.
         This line will have two spaces in front of it.
            And so on&hellip;
    </p></p>

<pre><code>&lt;p&gt;
  This line is on the left margin.
   This line will have one space in front of it.
     This line will have two spaces in front of it.
       And so on...
&lt;/p&gt;
&lt;p&gt;
  This line is on the left margin.
     This line will have one space in front of it.
       This line will have two spaces in front of it.
         And so on...
&lt;/p&gt;
&lt;p&gt;
  This line is on the left margin.
  This line will have one space in front of it.
  This line will have two spaces in front of it.
  And so on...
&lt;/p&gt;
&lt;p&gt;
  &lt;This&gt;line is on the left margin.&lt;/This&gt;&lt;This&gt;line will have one space in front of it.&lt;/This&gt;&lt;This&gt;line will have two spaces in front of it.&lt;/This&gt;&lt;And&gt;so on...&lt;/And&gt;
&lt;/p&gt;
</code></pre>

<p>  </body></p>

<pre><code>
## Comments

Of course it’s necessary to comment out your code every once in a while. Don’t forget though that too many comments are a smell as well. Just try to keep it to an absolute minimum!
A forward slash ```/``` is all you need to comment out any code.

Slim:
</code></pre>

<p>body
  /p
    | This line is on the left margin.
       This line will have one space in front of it.
         This line will have two spaces in front of it.
           And so on&hellip;</p>

<pre><code>
Boom! And now this paragraph is gone from the page. This comment leaves no trace in the final HTML markup. You just need to apply it to the parent selector and all its children will be commented out as well. So, even comments are slim and minimal.

If on the other hand you want some HTML comment ```&lt;!--  --&gt;``` that shows up in the final output rendered, you just need to add an exclamation mark ```!``` after the slash.
</code></pre>

<p>body
  /!p
    | This line is on the left margin.
       This line will have one space in front of it.
         This line will have two spaces in front of it.
           And so on&hellip;</p>

<pre><code>
HTML Output:
</code></pre>

<p><body>
  <!--p
      | This line is on the left margin.
        This line will have one space in front of it.
          This line will have two spaces in front of it.
            And so on...--></p>

<pre><code>
Neat!

## Custom Shortcuts

We have been using shortcuts all along. When you type a dot ```.``` or a hash symbol ```#``` you tell Slim that you want to use predefined shortcuts for classes and ids. That’s certainly a very nice default but what can you do to expand on that and create your own little snippety snippets. We can do this for tags and attributes alike. Welcome to the awesomeness of Slim!

In Rails we just need to set up an initializer with the following pattern:

#### config/initializers/slim.rb
</code></pre>

<p>Slim::Engine.set_options shortcut: {&lsquo;c&rsquo; => {tag: &lsquo;container&rsquo;}, &lsquo;#&rsquo; => {attr: &lsquo;id&rsquo;}, &lsquo;.&rsquo; => {attr: &lsquo;class&rsquo;} }</p>

<pre><code>
In Sinatra apps, you simply add the same configuration anywhere below the line where you `require 'slim'`.

##### your_sinatra_app.rb
</code></pre>

<p>require &lsquo;sinatra&rsquo;
require &lsquo;slim&rsquo;</p>

<p>Slim::Engine.set_options shortcut: {&lsquo;c&rsquo; => {tag: &lsquo;container&rsquo;}, &lsquo;#&rsquo; => {attr: &lsquo;id&rsquo;}, &lsquo;.&rsquo; => {attr: &lsquo;class&rsquo;} }</p>

<p>get(&lsquo;/&rsquo;) { slim :index }</p>

<p><strong>END</strong></p>

<p>@@ index
doctype html
html
  head
    title Slim Templates
    body
      h1 Boss Level Templates With Slim</p>

<pre><code>
You can set options on the Slim::Engine by providing a hash with the shortcut you need. In the example above, we instrucuted Slim to use ```c``` as a shortcut for a ```container``` tag. You would use it like this in your Slim files:

Slim:
</code></pre>

<p>c.content Now you have a container tag with a .content class.</p>

<pre><code>
And the rendered HTML would look like this of course:

HTML:
</code></pre>

<p><container class="content">
  Now you have a container tag with a .content class.
</container></p>

<pre><code>
Pretty nice huh? But you didn’t think that’s where the music stops, did you? We can take this further than that. Let me give you an example that is a bit more involved:

#### config/initializers/slim.rb
</code></pre>

<p>Slim::Engine.set_options shortcut: {
            &lsquo;#&rsquo; => {attr: &lsquo;id&rsquo;},
            &lsquo;.&rsquo; => {attr: &lsquo;class&rsquo;},
            &lsquo;c&rsquo; => {tag: &lsquo;container&rsquo;},
            &lsquo;&amp;&rsquo; => {tag: &lsquo;input&rsquo;, attr: &lsquo;type&rsquo;},
            &lsquo;@&rsquo; => {attr: &lsquo;role&rsquo;},
            &lsquo;^&rsquo; => {attr: %w(data-role role)}
           }</p>

<pre><code>
In this example I did not only create a custom tags but also provided handy custom attributes. Let’s dissect this step by step. Btw, I broke the options hash over several lines to keep it readable and to avoid having a long line of code that nobody likes to stumble upon. Reads much nicer, don’t you think?

Via the ampersand symbol ```&amp;```, we can now create an input tag and we just need to feed it a type—which immediately follows the ampersand. Btw, we can use any symbol that makes sense to use. No need to use the same that I did. Be careful though and try to make uncompromising decisions in that department.

Slim:
</code></pre>

<p>&amp;text name=&ldquo;user&rdquo;
&amp;password name=&ldquo;pw&rdquo;
&amp;submit</p>

<pre><code>
HTML Output:
</code></pre>

<p><input name="user" type="text">
<input name="pw" type="password">
<input type="submit"></p>

<pre><code>
When you make changes to this initializer with your custom shortcuts you shouldn’t forget to restart your local server. Without that your changes won’t be reflected during preprocessing.

Next, if I need a ```role``` attribute, I can now just prefix it with an ```@``` symbol. 

Slim:
</code></pre>

<p>.person@admin Daniel Mendler</p>

<pre><code>
HTML Output:
</code></pre>

<div class="person" role="admin">
  Daniel Mendler
</div>


<pre><code>
Refresher: The role attribute is a semantic approach to describe the role of the element in question—if you need to determine the purpose of the element.

See, via the dot we get a ```class="person"``` class and the ```@admin``` gave us a ``` role="admin"```. Pretty handy dandy but we can take this one little step further and use an array to specify multiple attributes that should get created via one single shortcut.

Slim:
</code></pre>

<p>.nifty<sup>hacker</sup> CrackDoctor</p>

<pre><code>
HTML Output:
</code></pre>

<div class="nifty" data-role="hacker" role="hacker">
  CrackDoctor
</div>


<pre><code>
Because we associated an array of attributes for our ```^``` shortcut, Slim creates ```data-role``` and ```role``` attributes simultaneously via a single symbol. That can come in pretty handy. Imagine if you want to output an element similar to the following and can do it concise with shortcut and some Ruby code.

HTML
</code></pre>

<p><source src="track1.mp3" type="audio/mpeg" data-duration="1min5secs" data-tempo="125bpm" data-artist="The Beatles" /></p>

<pre><code>
Writing all of this by hand seems not the best use of your time—we have code to do that job for us. Well, there you have it, that’s all you need to know to create your own set of awesome shortcuts—or to create a big mess when you don’t practice a bit of constraint. I would recommend to not go overboard with this—especially try to stay away from defining shortcuts that use symbols that Slim is already attached to. 

Refresher: The data- attributes are used to have some private data on your page / application. Stuff that helps you filter content for example. They are custom attributes which can be used on all HTML elements. Using them for JavaScript purposes is another common practice. It is also very handy for testing elements on a page if you want to make sure that particular elements show up and you want to avoid that designers mess with your styles.

## Configuring Slim

Before you leave, I wanted to show you a little sneak peek into the vast configuration options and how you apply them. For Rails, you’d create an enviromnent file like `config/environments/development.rb` and specify the options you need. You simply place your configuration some place inside the `Rails.application.configure` block. 
</code></pre>

<p>Rails.application.configure do
  Slim::Engine.set_options default_tag: &lsquo;p&rsquo;,
                           tabsize: 2,
                           attr_list_delims: {&lsquo;(&rsquo; => &lsquo;)&rsquo;,
                                              &lsquo;[&rsquo; => &lsquo;]&rsquo;,
                                              &lsquo;{&rsquo; => &lsquo;}&rsquo;,
                                              &lsquo;«&rsquo; => &lsquo;»&rsquo;,
                                              &lsquo;‹&rsquo; => &lsquo;›&rsquo;
                                              }
end</p>

<pre><code>
In this configuration I made sure the default tag that gets created if a tag name is omitted is a `&lt;p&gt;` tag—not a `div` tag, which is the standard setting. Also, I adjusted the tabsize to use 2 white spaces and finally added two more delimiters for wrapping attributes of tags. Now I can use `‹ ›` and `« »` as well for that. Not terribly useful but good for demonstration purposes. In the example below, you can see that all delimiters for attribute wrappers create the same output—also that `.some-class` or `#some-id` creates `&lt;p&gt;` tags per default.

Slim:
</code></pre>

<p>body
  #zeroth
  a{href=&ldquo;<a href="http://slim-lang.com">http://slim-lang.com</a>&rdquo; title=&lsquo;Home page&rsquo;} Goto the home page</p>

<p>  .first
  a[href=&ldquo;<a href="http://slim-lang.com">http://slim-lang.com</a>&rdquo; title=&lsquo;Home page&rsquo;] Goto the home page</p>

<p>  .second
  a(href=&ldquo;<a href="http://slim-lang.com">http://slim-lang.com</a>&rdquo; title=&lsquo;Home page&rsquo;) Goto the home page</p>

<p>  .third
  a‹href=&ldquo;<a href="http://slim-lang.com">http://slim-lang.com</a>&rdquo; title=&lsquo;Home page'› Goto the home page</p>

<p>  .fourth
  a«href=&ldquo;<a href="http://slim-lang.com">http://slim-lang.com</a>&rdquo; title=&lsquo;Home page'» Goto the home page</p>

<pre><code>
HTML Output:
</code></pre>

<p><body>
    <p id="zeroth"></p>
    <a href="http://slim-lang.com" title="Home page">Goto the home page</a></p>

<pre><code>&lt;p class="first"&gt;&lt;/p&gt;
&lt;a href="http://slim-lang.com" title="Home page"&gt;Goto the home page&lt;/a&gt;

&lt;p class="second"&gt;&lt;/p&gt;
&lt;a href="http://slim-lang.com" title="Home page"&gt;Goto the home page&lt;/a&gt;

&lt;p class="third"&gt;&lt;/p&gt;
&lt;a href="http://slim-lang.com" title="Home page"&gt;Goto the home page&lt;/a&gt;

&lt;p class="fourth"&gt;&lt;/p&gt;
&lt;a href="http://slim-lang.com" title="Home page"&gt;Goto the home page&lt;/a&gt;
</code></pre>

<p></body></p>

<p>```</p>

<p>Alternatively, you can also set this stuff in <code>config/initializers/slim.rb</code> as I showed you in the section about custom shortcuts. For Sinatra it’s the same drill as discussed in the shortcuts section as well. Just set your options somewhere below your <code>require 'slim'</code> statement and you are good to go. Take a look at the <a href="http://www.rubydoc.info/gems/slim/frames#Configuring_Slim">documentation</a> under “Available options” to read more about what is available for configuration. Slim gives you many options to play with.</p>

<h2>Final Thoughts</h2>

<p>That’s basically it. There are a one or two more advanced topics that you should dig into if needed but I thought they are mostly not beginner-friendly nor heavily used on a day-to-day basis. I wanted to keep things simple and show you all you need for quickly switching to this awesome, awesome templating engine. Have fun, hope it’s now also one of your favorite new toys!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AntiPatterns Basics Rails—Tests]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2016/02/10/AntiPattern-Basics-Rails-Tests/"/>
    <updated>2016-02-10T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2016/02/10/AntiPattern-Basics-Rails-Tests</id>
    <content type="html"><![CDATA[<p><img src="/images/AntiPatterns/Tests/electric-wiring.jpg" width="500"></p>

<h2>Heads Up</h2>

<p>Anti- what? It probably sounds a lot more complicated than it is. Over the last couple of decades, programmers were able to identify a useful selection of “design” patterns that frequently occurred throughout their code solutions. While solving similar problems, they were able to classify solutions that prevented them from reinventing the wheel for every project. It is important to note that these patterns should be seen more as discoveries than the inventions of a group of advanced developers.</p>

<p>AntiPatterns—as the name implies—on the other hand represent pretty much the opposite. They are discoveries of solutions to problems that you should definitely avoid. They often represent the work of inexperienced coders who don’t know what they don’t know yet. Worse, it could be the output of a lazy person who just ignores best practices for no good reason—or they think they don’t. What they might hope to gain in time savings in the beginning by hammering out quick, lazy or dirty solutions is gonna haunt them or some sorry successor later in the project’s life cycle. Do not underestimate the implications or these bad decisions, they’re gonna plague you like a curse—no matter what.</p>

<p>This one is exactly written for you if all this sounds rather new to you and you identify yourself as being more on the beginner side of all things Ruby / Rails. I think, it’s best if you approach these articles as quick skinny-dips into a much deeper topic whose mastery will not happen overnight. Nevertheless, I strongly believe that starting to get into this early will benefit beginners and their mentors tremendously.</p>

<h2>Topics</h2>

<ul>
<li>Let</li>
<li>Mystery Guests</li>
<li>Obscure Tests</li>
<li>Slow Tests</li>
<li>Fixtures</li>
<li>Brittle Tests</li>
<li>Data Atributes</li>
</ul>


<h2>Let</h2>

<pre><code class="ruby">
describe Mission do
  let(:james_bond)   { build_stubbed(:agent, name: 'James Bond', number: '007') }
  let(:mission)      { build_stubbed(:mission, title: 'Moonraker') }

...

end
</code></pre>

<p>The <code>let</code> helper method in RSpec is very frequently used for creating instance variables that are available between multiple tests. As an eager student of TDD practices, you have probably written your fair share of these but following this practice can easily lead to having lots of mystery guests showing up—see below—which is definitely not something we need to have crashing our party! This particular side effect of <code>let</code> has gained a bit of a reputation to be possibly causing increased test maintenance and inferior readability throughout your test suite. <code>let</code> sure sounds enticing because it’s lazily evaluated and aids adhering to the usually zero-defect concept of DRY and all. Therefore it seems too good not to use on a regular basis. Its close cousin <code>subject</code> should also be avoided most of the time.</p>

<p>It gets worse when you start nesting these things. An all-time favorite are let statements that are plastered all over nested <code>describe</code> blocks. I think it’s not unfair to call this a recipe for hanging yourself—quickly. More limited scope is generally easier to understand and follow. We don’t want to build a house of cards with semi-global let fixtures that obscure understanding and increase chances of breaking related tests. The odds of crafting quality code are stacked against us with such an approach. Extracting common object setup is also easier to do via plain old ruby methods or even classes if needed.</p>

<p>This <code>let</code> creature is a widely shared fixture which will often need to be deciphered first before you know exactly what business this object has in your tests. Also going back and forth to understand what exactly they are made of and which relationships they have via associations can be a time consuming pain. The clarity of these details in your test setup usually help a lot to tell other developers all they need to work with every particular part of your test suite—don’t forget your future self! In a world where you never have to revisit particular tests and even never refactor parts of your test suite that might not matter as much—but that is a pipe dream for now!</p>

<p>We want to have as few collaborators and as little data as possible for each test. <code>let</code> works not in your favor on that front as well. These let fixtures can amass a lot of attributes and methods that make them way too big as well. If you start going down the let road, you will often end up with pretty fat objects that try to make a lot of tests happy at the same time. Sure you can create lots of variations of these <code>let</code> thingies but that makes the whole idea of them a bit irrelevant I think. Why not go one step further, avoid let and rely on Ruby without RSpec DSL magic?</p>

<p>I’m more in the camp of being rather on the side of repeated setup code for each test than being overly DRY, obscure or cryptic in my test suite. I’d always go for more readability. The test method should make clear the cause and effect of its involved pieces—using object collaborators that are possibly defined far away from your test exercise is not in your best interest. If you need to extract stuff, use expressive methods that encapsulate that knowledge. These are pretty much always a save bet. That way you can also supply the setup that you actually need for each test and not cause slow tests because you have unnecessary data involved. Good old variables, methods and classes are often all you need to provide faster, stable tests that are easier to read.</p>

<h2>Mystery Guests</h2>

<p>Mystery Guests are RSpec DSL Puzzles really. For a while, the various objects defined via RSpec DSL <code>let</code> are not that hard to keep in check but soon when the test suite grows, you invite a lot of mysterious guests into your specs. This gives your future self and others unnecessary context puzzles to solve. The result will be obscure tests that require you to go into full Sherlock Holmes mode. I guess that sounds way more fun than it is. Bottom line, it’s a waste of everybody’s time.</p>

<p>Mystery Guests pose two problematic questions:</p>

<ul>
<li>Where is this object coming from?</li>
<li>What exactly is it composed of?</li>
</ul>


<pre><code class="ruby">
describe Mission do
  let(:agent_01)   { build_stubbed(:agent, name: 'James Bond', number: '007') }
  let(:agent_02)   { build_stubbed(:agent, name: 'Moneypenny', number: '243') }
  let(:title)   { 'Moonraker' }
  let(:mission) { build_stubbed(:mission, title: title) }
  mission.agents &lt;&lt; agent_01 &lt;&lt; agent_02

  #...
  #...
  #...
  #lots of other tests

  describe '#top_agent' do
    it 'returns highest ranking agent associated to a mission' do
      expect(mission.top_agent).to eq('James Bond')
    end
  end
end
</code></pre>

<p>This describe block for <code>#top_agent</code> lacks clarity and context. What agent is involved and what mission are we talking about here? This forces developers to go hunting for objects that are suddenly popping up in your tests. Classic example of a mystery guest. When we have lots of code between the relevant test and the origin of these objects, you increase the chances of obscuring what’s going on in our tests.</p>

<p>The solution is quite easy: You need fresh “fixtures” and build local versions of the objects with exactly the data that you need—and not more than that! Factory Girl is a good choice for handling this. This approach can be considered more verbose and you might be duplicating stuff sometimes—extracting stuff into a method is often a good idea—but it’s a lot more expressive and keeps tests focused while providing context.</p>

<pre><code class="ruby">
describe Mission do

  #...
  #...
  #...
  #lots of other tests

  describe '#top_agent' do
    it 'returns a list of all agents associated to a mission' do
      agent_01 = build_stubbed(:agent, name: 'James Bond', number '007')
      agent_02 = build_stubbed(:agent, name: 'Moneypenny', number '243')
      mission  = build_stubbed(:mission, title: 'Moonraker')
      mission.agents &lt;&lt; agent_01 &lt;&lt; agent_02

      expect(mission.top_agent).to eq('James Bond')
    end
  end
end
</code></pre>

<p>The example above builds all the objects needed for our tests in the actual test case and provides all the context wanted. The developer can stay focused on a particular test case and does not need to “download” another—possibly totally unrelated—test case for dealing with the situation at hand. No more obscurity!</p>

<p>Yes, you are right, this approach means that we are not achieving the lowest level of duplication possible, but clarity in these cases is much more important for the quality of your test suite and therefore for the robustness of your project. The speed in which you can effectively apply changes to your tests plays also a role in that regard. Another important aspect of testing is that your test suite can not only function as documentation but absolutely should! Zero duplication is not a goal that has a positive effect for specs documenting your app. Keeping unnecessary duplication in check is nevertheless an important goal to not loose sight of—balance is king here!</p>

<h2>Obscure Tests</h2>

<p>Below is another example that tries to setup everything you need locally in the test but also fails because it’s not telling us the full story.</p>

<pre><code class="ruby">
context "agent status" do
  it "returns the status of the mission’s agent" do
    double_o_seven = build_stubbed(:agent)
    mission = build_stubbed(:mission, agent: double_o_seven)

    expect(mission.agent_status).to eq(double_o_seven.status)
  end
end
</code></pre>

<p>We are creating a generic agent. How do we know it’s 007? We are also testing for the agent’s status but it’s also nowhere to be found—neither in the setup nor explicitly during the verify phase in our <code>expect</code> statement. The relationship between the <code>double_o_seven.status</code> and the mission status could be confusing since it’s coming out of nowhere really. We can do better:</p>

<pre><code class="ruby">
context "agent status" do
  it "returns the status of the mission’s agent" do
    double_o_seven = build_stubbed(:agent, name: 'James Bond', status: 'Missing in action'))
    mission = build_stubbed(:mission, agent: double_o_seven)

    expect(mission.agent_status).to eq('James Bond: Missing in action')
  end
end
</code></pre>

<p>Again, here we have all we need to tell a story. All the data we need is right in front of us.</p>

<h2>Slow Tests</h2>

<p>So, you have started to get into Test-Driven-Development and you started to appreciate what if offers. Kudos, this is great! I’m sure, neither the decision to do it nor the learning curve to get there were exactly a piece of cake. But what often happens after this initial  step is that you try hard at having full test coverage and you start to realize that something is off when the speed of your specs start to annoy you. Why is your test suite getting slower and slower although you think you are doing all the right things? Feeling a bit punished for writing tests? Slow tests suck—big time! There are a couple of problems with them. The most important issue is that slow tests lead to skipping tests in the long run. Once you are at a point where your test suite takes forever to finish, you will be much more willing to think to yourself: “Screw this, I’ll run them later! I got better things to do than waiting for this stuff to finish.” And you are absolutely right, you have better things to do.</p>

<p>The thing is, slow tests are more likely to welcome in compromises in the quality of your code than maybe obvious at first. Slow tests also fuel people’s arguments against TDD—unfairly so I think. I don’t even want to know what non-technical product managers have to say if you regularly have to step outside for a nice long coffee break just to run your test suite before you can continue your work. Let’s not go down that road! When you only need little time to exercise your tests and as a result get super quick feedback cycles for developing each step of new features, practicing TDD becomes a lot more attractive and less of an argument. With a little bit of work and care along the way, we can avoid slow mo tests quite effectively. Slow tests are also a killer for getting into the “zone”. If you get taken out of the flow this frequently in your process, the quality of your overall work might also suffer by having to wait for slow tests to return from an expensive round trip. You want to get as much “in-the-zone time” as possible—unbearably slow tests are major flow killers.</p>

<p>Another issue worth mentioning in this context is that this might lead to having tests that cover your code, but because you won’t take time to finish exercising the whole suite, or write tests after the fact, your apps’ design won’t be driven by tests anymore. If you are not on the Test-Driven hype train this might not bother you much, but for TDD folks, that aspect is essential and should not be neglected. Bottom line, the faster your tests, the more you will be willing to exercise them—which is the best way to design apps as well as to catch bugs early and often. What can we do to speed up tests? There are two speeds that are important here:</p>

<ul>
<li>The speed in which your tests can really execute your suite.</li>
<li>The speed for getting feedback from your test suite to design your app.</li>
</ul>


<h3>Avoid writing to the database as much as you can.</h3>

<p>That does not mean that you should avoid it all costs. Often you don’t need to write tests that exercise the database and you can trim off a lot of time that your tests need to run. Using just <code>new</code> to instantiate an object is often sufficient for test setups. Faking out objects that are not directly under test is another viable option. Creating test doubles is a nice way to make your tests faster while keeping the collaborating objects you need for your setup super focused and lightweight. <a href="https://github.com/thoughtbot/factory_girl">Factory Girl</a> also gives you various options to smartly “create” your test data. But sometimes there is no way around to saving to the database (which is a lot less often than you might expect) and this is exactly where you should draw the line. Any other time, avoid it like hell and your test suite will stay fast and agile. In that regard you should also aim for a minimal amount of dependencies, which means the minimal amount of objects that you need collaborating to get your tests to pass—while saving as less as possible to the database along the way. Stubbing out objects—that are mere collaborators and not directly under test—often also make your setup easier to digest and simpler to create. A nice speed boost overall with very little effort.</p>

<h3>Build your tests with the testing pyramid in mind.</h3>

<p>This means that you want to have a majority of unit tests at the bottom of this hierarchy—which all focus on very specific parts of your application in isolation—and the smallest amount of integration tests at the top of this pyramid. Integration tests simulate a user going through your system while interacting with a bunch of components that are exercised around the same time. They are easy to write but not so easy to maintain—and the speed losses are not worth going the easy route. Integration tests are pretty much the opposite of unit tests in regard to being high level and sucking in a lot of components that you need to setup in your tests—which is one major reason why they are slower than unit tests. I guess this makes it clear why they should be at the top of your testing pyramid to avoid significant speed losses. Another important issue here is that you want to have as little overlap between these two test categories as possible—you ideally want to test things only once after all. You can’t expect to have perfect separation, but aiming for as little as possible is a reasonable and achievable goal.</p>

<p>In contrast to unit tests, you want to test as few details as possible with integration tests. The inner mechanics should already be covered by extensive unit tests. Focus instead only on the most essential parts that the interactions need to be capable of exercising! The other main reason is that a webdriver needs to simulate going through a browser and interacting with a page. This approach fakes out nothing or very little, saves the stuff to the database and really goes through the UI. That’s also one reason they can be called acceptance tests because these tests try to simulate a real user experience. This is another major speed bump that you want to exercise as little as possible. If you have a ton of these tests—I guess more than 10% from your overall number of tests—you should slow down and reduce that number to the minimum amount possible. Also, keep in mind that sometimes you don’t need to exercise the whole app—a smaller, focused view test often does the trick as well. You will be much faster if you rewrite a couple of your integration tests that just test a little bit of logic that does not necessitate a full integration check. But don’t get into writing a ton of them either, they offer the least bang for the buck. That being said, intergration tests are vital to the quality of your test suite and you need to find a balance of being too stingy applying them and not having too much of them around.</p>

<h3>Getting feedback from your app / tests fast.</h3>

<p>Quick feedback and fast iteration cycles are key to designing your objects. Once you start to avoid running these tests frequently, you are loosing this advantage—which is a big aid for designing objects. Don’t wait until your Continuous Intergration service of choice kicks in to test your whole application. So what’s a magic number we should keep in mind when running tests? Well, different people will tell you different benchmarks for this. I think that staying under 30 seconds is a very reasonable number that makes it very likely to exercise a full test on a regular basis. If you leave that benchmark more and more behind, some refactoring might be in order. It will be worth it and it will make you feel much more comfortable because you can check in more regularly. You will most likely move forward a lot faster too.</p>

<p>You want that dialog with your tests to be as fast as possible. Tightening this feedback cycle by using an editor that can also exercise your tests is not to be underestimated. Switching back and forth between your editor and your terminal is NOT the best solution to handle this. This gets old very quickly. If you like using Vim, you have one more reason to invest some time to become more efficient at using your editor. Lots of handy tools available for Vim peeps. I remember that Sublime Text also offers to run tests from within the editor but other than that, you need to do a little bit of research to find out what your editor of choice is capable of in that regard. The argument that you will hear frequently from TDD enthusiasts is that you don’t want to leave your editor because overall, you will be spending too much time doing that. You want to stay much more in the zone and not lose train of thought when you can do this sorta thing via a fast shortcut from inside your code editor.</p>

<p>Another thing to note is that you also want to be able to slice the tests that you want to run. If you don’t need to run the whole file, it’s nice to run a single test or a block that focuses just on what you need to get feedback on right now. Having shortcuts that help you run single tests, single files or just the last test again saves you a ton of time and keeps you in the zone—not to mention the high degree of convenience and feeling super dandy cool as well. It’s just amazing how awesome coding tools can be sometimes.</p>

<p>On last thing for the road. Use a preloader like <a href="https://github.com/rails/spring">Spring</a>. You will be surprised how much time you can shave off when you don’t have to load Rails for every test run. Your app will run in the background and does not need to boot all the time. DO it!</p>

<h2>Fixtures</h2>

<p>I’m not sure if fixtures are still an issue for newbies coming to Ruby / Rails land. In case nobody instructed you about them, I’ll try to get you up to speed in a jiffy on these dreaded things. ActiveRecord database fixtures are great examples of having tons of Mystery Guests in your test suite. In the early days of Rails and Ruby TDD, YAML fixtures were the de facto standard for setting up test data in your application. They played an important role and helped move the industry forward. Nowadays, they have a reasonable bad rep though.</p>

<h4>YAML Fixtures</h4>

<pre><code class="yaml">
Quartermaster:
  name: Q
  favorite_gadget: Broom radio
  skills: Inventing gizmos and hacking

00 Agent:
  name: James Bond
  favorite_gadget: Submarine Lotus Esprit
  skills: Getting Bond Girls killed and covert infiltration
</code></pre>

<p>The hash-like structure sure looks handy and easy to use. You can even reference other nodes if you want to simulate associations from your models. But that’s where the music stops and many say their pain begins. For data sets that are a bit more involved, YAML fixtures are difficult to maintain and hard to change without affecting other tests. I mean, you can make them work of course—after all, developers used them plenty in the past—but tons of developers will agree that the price to pay for managing fixtures is just a bit stingy.</p>

<p>One scenario we definitely want to avoid is changing little details on an existing fixture and causing tons of tests to fail. If these failing tests are unrelated, the situation is even worse—a good example of tests being too brittle. In order to “protect” existing tests from this scenario, this can also lead to growing your fixture set beyond any reasonable size—being DRY with fixtures is most likely not on the table anymore at that point. To avoid breaking your test data when the inevitable changes occur, developers where happy to adopt newer strategies that offered more flexibility and dynamic behaviour. That’s where <a href="https://github.com/thoughtbot/factory_girl">Factory Girl</a> came in and kissed the YAML days goodbye. Another issue is the heavy dependency between the test and the .yml fixture file. Since the fixtures are defined in a separte .yml file, mystery guests are also a major pain waiting to bite you due to being obscure. Did I mention that fixtures are imported into the test database without running through any validations and don’t adhere to the Active Record life cycle? Yeah, that’s not awesome as well—from whatever angle you wanna look at it!</p>

<p>Factory Girl let’s you avoid all that by creating objects relevant to the tests inline—and only with the data needed for that specific case. The motto is, only define the bare minimum in your factory definitions and add the rest on a test-by-test basis. Locally (in your tests) overriding default values defined in your factories is a much better approach than having tons of fixture unicorns waiting to be outdated in a fixture file. This approach is more scalable too. Factory Girl gives you plenty of tools to create all the data you need—as nuanced as you like—but also provides you tons of ammo to stay DRY where needed. The pros and cons are nicely balanced with this library I think. Not dealing with validations is also not a cause of concern anymore. I think using the factory pattern for test data is more than pretty reasonable and is one major cause why Factory Girl was so well received by the community. Complexity is a fast growing enemy that YAML fixtures are hardly equipped to take on effectively. In some way, I think of fixtures as <code>let</code> on steroids. You are not only placing them even further away—being in a separate file and all—you are also potentially preloading way more fixtures than you might actually need. RIP!</p>

<h2>Brittle Tests</h2>

<p>If changes in your specs lead to seemingly unrelated failures in other tests, you are likely looking at a test suite that has become fragile due to causes mentioned above. These often puzzle-like, mystery guest infested tests easily lead to an unstable house of cards. When objects necessary for tests are defined “far away” from the actual test scenario, it’s not that hard to overlook the relationships that these objects have with their tests. When code gets deleted, adjusted or simply the setup object in question gets accidentally overridden—unaware how this could influence other tests around—failing tests are not a rare encounter. They easily appear like totally unrelated failures. I think it’s fair to include such scenarios into the category of tightly coupled code.</p>

<pre><code class="ruby">
describe Mission do
  let(:agent)   { build_stubbed(:agent, name: 'James Bond', number: '007') }
  let(:title)   { 'Moonraker' }
  let(:mission) { build_stubbed(:mission, title: title) }

  #...
  #...
  #...
  #lots of other tests

  describe '#joint_operation_agent_name' do
    let(:agent) { build_stubbed(:agent, name: 'Felix Leiter', agency: 'CIA')
    mission.agents &lt;&lt; agent

    it “returns mission’s joint operation’s agent name” do
      expect(mission.joint_operation_agent_name).to eq('Felix Leiter')
    end
  end
end
</code></pre>

<p>In this scenario we have clearly modified locally an objects’s state which was defined in our setup. The <code>agent</code> in question is now a CIA operative and has a different name. <code>mission</code> comes again out of nowhere as well. Nasty stuff really. No surprise when other tests that possibly rely on a different version of <code>agent</code> start to blow up. Let’s get rid of the <code>let</code> nonsense and build the objects we need again right where we test them—with only the attributes we need for the test case of course.</p>

<pre><code class="ruby">
describe Mission do

  #...
  #...
  #...
  #lots of other tests

  describe '#joint_operation_agent_name' do
    agent   = build_stubbed(:agent, name: 'Felix Leiter', agency: 'CIA')
    mission = build_stubbed(:mission)
    mission.agents &lt;&lt; agent

    it “returns mission’s joint operation’s agent name” do
      expect(mission.joint_operation_agent_name).to eq('Felix Leiter')
    end
  end
end
</code></pre>

<p>It is important to understand how objects are related—ideally with the minimum amount of setup code. You don’t want to send other developers on a wild goose chase to figure this stuff out when they stumble over your code. If it’s super hard to get a grasp quickly and a new feature needed to be implemented yesterday, these puzzles can not expect to be dealt with the highest priority. This in turn often means that new stuff get’s developed on top of that unclear context—which is a brittle basis for going forward and also super inviting for bugs down the road. The lesson to take away here is not to override stuff where possible.</p>

<h2>Data Attributes</h2>

<p>A final useful tip for avoiding brittle tests is to use data attributes in your HTML tags. Just do yourself a favor and use them—you can thank me later. This lets you decouple the needed elements under test from the styling information that your designers might touch frequently without your involvement. If you hard code a class like <code>class='mission-wrapper'</code> in your test and a smart designer decides to change this poor name, your test will be affected unnecessarily. And the designer is not to blame of course. How in the world would she know that this affects part of your test suite—very unlikely at least.</p>

<p>``` erb</p>

<div class='mission data-role='single-mission'>
  <h2><% = @mission.agent_status %></h2>
  ...
</div>


<pre><code></code></pre>

<p>context &ldquo;mission’s agent status&rdquo; do
  it &lsquo;does something with a mission&rsquo; do
    &hellip;</p>

<pre><code>...

expect(page).to have_css '[data-role=single-mission]'
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>We expect to see some HTML element on a page and marked it with  a <code>data-role</code>. Designers have no reason to touch that and you are protected against brittle tests that happen due to changes on the styling side of things. Pretty effective and useful strategy that basically costs you nothing in return. The only thing that might be necessary is to have a short conversation with designers. Piece of cake!</p>

<h2>Final Thoughts</h2>

<p>We want to avoid distracting people who will read our tests or even worse, confuse them. That is opening the door for bugs but can also be expensive because it can cost valuable time and brain power. When you create your tests, try hard not to override things—it does not aid in creating clarity. More likely it will lead to subtle, time-consuming bugs and won’t affect the aspect of documenting your code positively. This creates an unnecessary burden we can avoid. Mutating test data more than absolutely necessary is also worth being a bit paranoid about. Keep it as simple as possible! This really helps avoiding sending other developers or your future self on wild goose chases. There is still a lot to learn about things you should avoid while testing but I believe this is a good start. Folks who are rather new to all things TDD should be able to handle these few AntiPatterns right away without diving into more advanced waters.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slim Basics 01]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2016/02/08/Slim-Basics-01/"/>
    <updated>2016-02-08T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2016/02/08/Slim-Basics-01</id>
    <content type="html"><![CDATA[<p>Titles</p>

<p>Boss-level Ruby templates with Slim</p>

<p>Deluxe templating with Slim</p>

<p><img src="/images/Slim/slim-fishbowl-refined.png"></p>

<h2>Topics</h2>

<ul>
<li>Why Slim?</li>
<li>What are Templates?</li>
<li>What about ERB &amp; Haml?</li>
<li>Getting Started</li>
<li>Rails</li>
<li>Sinatra</li>
<li>Syntax</li>
<li>HTML Tags</li>
<li><p>Dynamic Content</p></li>
<li><p>Line Indicators</p></li>
<li>Helpers</li>
<li>Safety</li>
<li>Logic-less Mode</li>
<li>Performance</li>
<li>Framework Support</li>
<li>Command Line Slim slimrb</li>
<li>Temple &amp; Tilt</li>
</ul>


<h2>Why Slim?</h2>

<p>If you live and breathe in Ruby land and have given Haml a shot before, you’ll probably already know a couple of the arguments I’m gonna make. I think it’s nevertheless a good idea to follow along because you might have already decided to use a more minimalistic templating engine and I’d like you to see the advantages Slim offers as well.</p>

<p>Before we dive into why Slim is cool, I wanna answer real quick what Slim actually is and what it does for you. The documentation sums this up quite nicely: “Slim is a fast, lightweight templating engine with support for Rails 3 and 4”. You can also use it with Sinatra and even plain Rack. So, if you are a bit tired of using ERB for writing your templates or you are not super satisfied with what Haml has to offer, then Slim is exactly the right tree for barking up.</p>

<p>In regards to its syntax, the people behind Slim were trying to find an answer to the following question: “What&rsquo;s the minimum required to make this work?” For writing the minimal amount of front-end code possible, this sure sounds like the right question to ask imho. Does Slim offer a perfect solution to all your templating concerns? Probably not, but quite frankly, it might just offer the best! Is it easy to learn? I think so, but it’s hard to know what other people consider easy. I’d say this though, it takes a bit to get used to but it’s definitely no rocket science. So no need to feel intimidated if you are a bit new to the coding side of things. Will you have a good time with it? Absolutely!</p>

<p>So, why Slim? The answer is quite straightforward I think. Your markup should be as readable and beautiful as possible! You should have a good time working with it and the less time you need to spend wading through tons of tag matter the better. What is beautiful you might ask? Of course, that is not an answer I’ll try to tackle, but being minimal in that regard rarely hurts. What about becoming super cryptic because the templating engine tries to be super smart in being minimal? That is a fair concern and you’ll be happy to hear that the team behind Slim takes this very seriously. They want to remove as much as possible from plain old HTML and reveal only the essential parts—all without becoming too cryptic. They core team tries to go even a step beyond that, they are really concerned about the aesthetics of Slim code. Pretty good deal, don’t you think?</p>

<p>Isn’t it much nicer if you can just glance at a template and to be able to easily digest what’s going on? Templates can become a very ‘crowded’ place—even if you make intelligent use of partials—and as a consequence, you want to reduce the amount of noise to the absolute minimum. Have you maybe tried the indented Sass (.sass) syntax? I hope you did, it’s just plain dope! If so, you probably will have a similar appreciation for what Slim has to offer. It’s also whitespace sensitive which leads to really succinct and readable code. Let’s take this piece of HTML / ERB code and compare it to Slim.</p>

<pre><code class="html">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;&lt;%= full_title(yield(:title)) %&gt;&lt;/title&gt;
    &lt;%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' =&gt; true %&gt;
    &lt;%= javascript_include_tag 'application', 'data-turbolinks-track' =&gt; true %&gt;
    &lt;%= csrf_meta_tags %&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;header class="navbar"&gt;
      &lt;div class="logo"&gt;
        &lt;%= link_to "sample app", 'root_path', id: "logo" %&gt;
        &lt;nav&gt;
          &lt;ul class="navbar-right"&gt;
            &lt;li&gt;&lt;%= link_to "Home",   'root_path' %&gt;&lt;/li&gt;
            &lt;li&gt;&lt;%= link_to "Help",   'help_path' %&gt;&lt;/li&gt;
            &lt;li&gt;&lt;%= link_to "Log in", 'login_path' %&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/nav&gt;
      &lt;/div&gt;
    &lt;/header&gt;
    &lt;div class="main"&gt;
      &lt;%= yield %&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Let’s look at the Slim equivalent:</p>

<pre><code class="slim">
doctype html
html
  head
    title = full_title(yield(:title))
    = stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' =&gt; true
    = javascript_include_tag 'application', 'data-turbolinks-track' =&gt; true
    = csrf_meta_tags
  body
    header.navbar
      .logo
        = link_to "sample app", 'root_path', id: "logo"
        nav
          ul.navbar-right
            li
              = link_to "Home",   'root_path'
            li
              = link_to "Help",   'help_path'
            li
              = link_to "Log in", 'login_path'
    .main
      = yield
</code></pre>

<p>The first thing people often recognize is “hey, no closing tags!” Cool? Sure, you are not used to the syntax yet so it might look a bit alien at first but I’m sure you can appreciate how succinct it reads. No left / right angle brackets, no need to write divs and minimalistic selectors—instead we can focus on the name the ids and classes have—it feels a lot less messy and more organized, don’t you think?</p>

<p>For comparison, here is the Haml version. It’s really not meant as an opportunity to bash Haml, it just shows you how similar it is but also that Slim goes a step further with its choice of minimal syntax. The result is that it’s even more elegant than Haml I think. Why go so minimal but still make me type the <code>%</code> sign all over the place. My index finger has no special motivation to grab shift-5 all the time. Can you customize that behaviour? Pretty sure, at least I hope so! But the design seems a bit flawed in that regard and less spartan compared to Slim. I realize that this is also a matter of taste though, so I’ll leave it at that.</p>

<h4>Haml</h4>

<pre><code class="haml">
!!!
%html
  %head
    %title= full_title(yield(:title))
    = stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' =&gt; true
    = javascript_include_tag 'application', 'data-turbolinks-track' =&gt; true
    = csrf_meta_tags
  %body
    %header.navbar
      .logo
        = link_to "sample app", 'root_path', id: "logo"
        %nav
          %ul.navbar-right
            %li= link_to "Home",   'root_path'
            %li= link_to "Help",   'help_path'
            %li= link_to "Log in", 'login_path'
    .main
      = yield
</code></pre>

<p>Before we jump into the meaty parts, let me be puffy for a moment and sum up what I think makes learning Slim a worthy investment of your time:</p>

<ul>
<li>It’s speedy.</li>
<li>Super readable.</li>
<li>It has a smart syntax.</li>
<li>Its aesthetic is minimal.</li>
<li>It is highly configurable</li>
<li>It’s index finger friendly.</li>
<li>It’s boss-level templating.</li>
<li>It’s fun to write and looks dope.</li>
<li>Automatic HTML escaping by default.</li>
<li>Super nice Rails and Sinatra integration.</li>
<li>Very minimal templates that are easy to maintain.</li>
<li>Is extensive and allows you to write plugins and extensions.</li>
<li>There is a logic-less mode for times when you want to output HTML but have no reason to include Ruby code.</li>
<li>It has configurable shortcuts for tags—which is a pretty nice feature to customize the engine to your needs.</li>
<li>And finally, because Slim’s syntax is guided by one very cool motto: “What&rsquo;s the minimum required to make this work”. This is very hard not to like.</li>
</ul>


<h2>What Are Templates?</h2>

<p>In terms of programming experience, if you consider yourself to be more on the newbie side of things, I’ll try to give you a quick round trip before we start using Slim. When people talk about templates, they mostly mean plain HTML markup with dynamic code that is often used for flow control, object injection or partial template (partials) rendering. For example when a controller provides you with instance variables that can be used by the view via (instance)variable substitution to display attributes from that object. All this happens via the template processor of your choice—ERB, Haml, Slim and the likes—which combines all your web templates into a final web page. Templates can also be used to generate XML and RSS feeds as well as other forms of structured text files.</p>

<p>With templates, you can define various “layouts” that are handling particular parts of your website as well as the the data that needs to be displayed systematically with the smallest amount of repetition. When you started playing with Rails, you surely have been using ERB for exactly these kinds of scenarios. ERB takes the plain text portions, hands them to the final document and only processes code that is marked as such. I’m not going into details how ERB works and suppose you have a basic understanding before you dive into Slim. I would not recommend to use Slim if you are not already familiar with Rails’ default way of templating since you will have a much easier time to play with Slim understanding how this works out of the box in Rails.</p>

<p>Below is a basic ERB example of a template that displays a collection of missions that are associated with an <code>@agent</code> object. Directly below, it also uses a method from a Ruby Gem to paginate the <code>@missions</code> collection.</p>

<pre><code class="erb">
&lt;% if @agent.missions.any? %&gt;
  &lt;h4&gt;Missions (&lt;%= @agent.missions.count %&gt;)&lt;/h4&gt;
  &lt;ul class="missions"&gt;
    &lt;%= render @missions %&gt;
  &lt;/ul&gt;
  &lt;%= will_paginate @missions %&gt;
&lt;% end %&gt;
</code></pre>

<p>This is a small section of a template that shows nicely that it’s nothing more than a static HTML part that has some dynamic injections from some Ruby code. If we wouldn’t use templates like this, we’d have to manually write code for every new object that we want to see displayed on a page. Not sure about you, but I can’t imagine a bigger nightmare or waste of time than that. Templates give us a handy tool for making our view layer smart and dynamic without repeating ourselves. As you can also see from this example, templates let us use partial templates that we can render where needed. Here we would have a <code>_mission.html.erb</code> partial somewhere which helps us to iterate over a collection of <code>@mission</code> objects which in turn get listed inside our <code>.missions</code> class.</p>

<p>As you can see, templates are nothing magic but are super handy to make developing web apps a lot more efficient and organized. I just wanted to make sure that we are all on the same page with this before diving into Slim.</p>

<h2>What about ERB &amp; Haml?</h2>

<p>If you like using these tools, it’s perfectly fine. Nothing wrong with that. The thing is, if you are looking for something smarter that is more minimalistic, it’s hard to find something that goes further than Slim. To me, it’s the most streamlined templating solution in Ruby land that I know of. They all work fine, it’s a matter of personal preference I guess.</p>

<h2>Getting Started</h2>

<h3>Slim With Rails</h3>

<p>No surprise, there is a gem for that.</p>

<h4>Gemfile</h4>

<pre><code class="ruby">
gem 'slim-rails'
</code></pre>

<h4>Shell</h4>

<pre><code class="bash">
bundle install
</code></pre>

<p>That’s it, we’re all set. Because you installed this gem, Slim will get loaded and initialized whenever your app loads. Also, for your convenience, when you generate controllers via <code>rails generate controller</code>, you will automatically get <code>.slim</code> view files for your view—<code>.html.erb</code> files no more. Works the same with scaffolds, but I hope you are not using them really!</p>

<p>To demonstrate this behaviour for folks who are new to using Rails’ generators, I’ll create a controller for secret service operatives that has all the standard REST controller actions:</p>

<h4>Shell</h4>

<pre><code class="bash">
rails generate controller SecretServiceOperatives index new create show edit update destroy
</code></pre>

<p>Among other stuff, you’ll get all the <code>.slim</code> files you need. Rails puts an extra <code>.html</code> in there as well—you can get rid of that if it bothers you of course. All that matters is that the slim file extension is already there and that it’s ready for preprocessing your Slim code. Yay!</p>

<pre><code class="bash">
...

invoke  slim
     create    app/views/secret_service_operatives
     create    app/views/secret_service_operatives/index.html.slim
     create    app/views/secret_service_operatives/new.html.slim
     create    app/views/secret_service_operatives/create.html.slim
     create    app/views/secret_service_operatives/show.html.slim
     create    app/views/secret_service_operatives/edit.html.slim
     create    app/views/secret_service_operatives/update.html.slim
     create    app/views/secret_service_operatives/destroy.html.slim

...
</code></pre>

<p>The next step would be to open your application layout and to replace boilerplate code with something Slim. Also, don’t forget to rename the <code>application.html.erb</code> file to <code>application.slim</code> (or <code>application.html.slim</code> if you want). We have already slimmed down a bit, even the file name has lost some weight.</p>

<h4>app/views/layouts/application.slim</h4>

<pre><code class="slim">
doctype html
html
  head
    title
    = stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' =&gt; true
    = javascript_include_tag 'application', 'data-turbolinks-track' =&gt; true
    = csrf_meta_tags
  body
    header.navbar
      .logo
        = link_to "Spy app", 'root_path', id: "logo"
        nav
          ul.navbar-right
            li
              = link_to "Home",    'root_path'
            li
              = link_to "Help",    'help_path'
            li
              = link_to "Sign up", 'sign_up_path'
            li
              = link_to "Log in",  'login_path'
    .main
      h1.welcome Welcome to Boss Level Slim Templates!
      = yield
</code></pre>

<p>Nothing fancy, but a good start—and as easy as can be I think.</p>

<h4>Screenshot</h4>

<p><img src="/images/Slim/boss-leve-slim-application-layout-welcome.png"></p>

<p>As a little side note, if you are ever curious which version of the gem you have installed, this little command will tell you—it’s handy for any gem as well of course:</p>

<h4>Shell</h4>

<pre><code class="bash">
bundle show 'slim-rails' 
</code></pre>

<p>It tells you where it is stored and which version this gem currently has. The output looks like this:</p>

<pre><code class="bash">
/Library/Ruby/Gems/2.3.0/gems/slim-rails-3.0.1
</code></pre>

<h3>Slim With Sinatra</h3>

<p>For the Sinatra enthusiasts among you, I wanted to mention how to get started as well. First we need to install the gem of course.</p>

<h4>Shell</h4>

<pre><code class="bash">
gem install slim
</code></pre>

<p>And after that you are almost done. In your Sinatra app, you just need to require Slim and you are good to go.</p>

<h4>some_sinatra_app.rb</h4>

<pre><code class="ruby">
require 'sinatra'
require 'slim'

get('/') { slim :index }

__END__

@@ index
doctype html
html
  head
    title Slim Templates
    body
      h1 Boss Level Ruby Templates With Slim
</code></pre>

<p>Here I used an inline template to write the Slim markup in the same file and told Sinatra that I want to use Slim for the index file when it makes a <code>get</code> request to the root path. I just needed to reference the inline template inside a curly braces block. What you see below the <code>@@ index</code>—which signifies the index template—is all whitespace sensitive Slim syntax.</p>

<h4>Screenshot</h4>

<p><img src="/images/Slim/sinatra-setup.png"></p>

<p>Time to show you how to write some Slim.</p>

<h2>Syntax</h2>

<h3>HTML tags</h3>

<h4>HTML &lt;!DOCTYPE> Declaration</h4>

<p>Let’s start with the simplest one, the doctype declaration. As you probably know and already forgot, this must be declared on top of you HTML document—before the actual <code>&lt;html&gt;</code> tag. FYI, it’s not an HTML tag and instructs the browser about the version of the HTML page. Among the different versions for <code>&lt;!DOCTYPE&gt;</code>, there is only one for HTML5: <code>&lt;!DOCTYPE html&gt;</code>—thank god!—which is exactly what we get when we write <code>doctype html</code> or <code>doctype 5</code> in Slim.</p>

<pre><code class="slim">
doctype html
html
  head

doctype 5
html
  head
</code></pre>

<h4>ID shortcut # and class shortcut .</h4>

<p>Writing front-end code means a ton of classes and ever so few ids—I hope. To avoid writing these over and over again, Slim meets you more than halfway and let’s you short-circut the whole process bascically. Let me show you what I mean. The following Slim code:</p>

<pre><code class="slim">
#logo
h1.header
.evil-wrapper
  h2#author-name
  ul.books
</code></pre>

<p>gets compiled to this HTML output:</p>

<p>``` html</p>

<div id="logo"></div>


<h1 class="header"></h1>


<div class="evil-wrapper">
  <h2 id="author-name"></h2>
  <ul class="books"></ul>
</div>


<pre><code>
As you cann see, the dot suggests to Slim that you want to use a class and the name that follows is what you want to name it. Same goes for ids—you just use the hash symbol (aka pound sign) which does the trick. Astute readers surely recognized that the versions without a leading tag trigger the creation of a div with the corresponding class or id—which can be seen for ```&lt;div id="logo"&gt;&lt;/div&gt;``` and ```&lt;div class="evil-wrapper"&gt;&lt;/div&gt;```. Pretty handy, don’t you think?

You can also be more expressive in your Slim code if you want to. Nobody hinders you to write your good ol’ classes and ids by hand. If you somehow feel attached to that, go for it! I like the more succinct version because it also let’s me avoid typing quotes and repeated text all the time. Up to you, whatever makes you happy! The code below is a bit more verbose but renders the exact same HTML as above:

#### Slim
</code></pre>

<p>div id=&lsquo;logo&rsquo;
h1 class=&lsquo;header&rsquo;
div class=&lsquo;evil-wrapper&rsquo;
  h2 id=&lsquo;author-name&rsquo;
  ul class=&lsquo;books&rsquo;</p>

<pre><code>
Now, isn’t that a thing of beauty? Imagine all these dreaded HTML tags that you don’t need to write yourself, plus getting rid of all the excess enclosing angle brackets. Sure, your code editor can do a lot of this work for you as well, but does your editor also read the code for you? Exactly! When you come back to read your code, you also want a succinct document that is super easy to digest visually. I think this simple examples shows best what a tool like Slim has to offer. It’s these little things that add up to a great tool and timesaver in the long run. Even if you only use it for exactly that functionality and ignore the other more advanced features for now, making the switch to Slim would already pay off big time imho.

#### Inline Tags

Let’s say you have multiple tags that you want to have inline for being more compact or whatever. So instead of breaking to a new line, you can chain them by separating these tags with a colon ```:```. Both examples below are rendering the exact same output.
</code></pre>

<p>ul
  li.first
    a href=&ldquo;<a href="http://vis-kid.github.io/octo-draft/a">http://vis-kid.github.io/octo-draft/a</a>&rdquo; A link
  li
    a href=&ldquo;<a href="http://vis-kid.github.io/octo-draft/b">http://vis-kid.github.io/octo-draft/b</a>&rdquo; B link</p>

<p>ul
  li.first: a href=&ldquo;<a href="http://vis-kid.github.io/octo-draft/a">http://vis-kid.github.io/octo-draft/a</a>&rdquo; A link
  li: a href=&ldquo;<a href="http://vis-kid.github.io/octo-draft/b">http://vis-kid.github.io/octo-draft/b</a>&rdquo; B link</p>

<pre><code>
HTML Output:
</code></pre>

<ul>
  <li class="link">
    <a href="http://vis-kid.github.io/octo-draft/a">A link</a>
  </li>
  <li>
    <a href="http://vis-kid.github.io/octo-draft/b">B link</a>
  </li>
</ul>


<pre><code>
The second version is more minimal because of the inlined tags and would be my preference. After all, compact is good, no? I think this case shows nicely that Slim evenly balances between compact and cryptic. Yes, it takes a bit getting used to and in some cases additional attribute wrappers are helpful (see more about wrappers below). Call me crazy, but I’m pretty certain that you’ll read Slim like regular HTML markup in a jiffy.

#### Text Content

Writing text is as easy as you’d expect of course. Just add it on after your tags.

Slim:
</code></pre>

<p>h1#welcome-header Your funky welcome message goes here!</p>

<pre><code>
HTML Output:
</code></pre>

<h1 id="welcome-header">
  Your funky welcome message goes here!
</h1>


<pre><code>
Nothing more to add, easy as can be!

#### Attributes

HTML attributes, which provide additional info about the tags, can be included as follows:

Slim:
</code></pre>

<p>a href=&ldquo;<a href="http://slim-lang.com">http://slim-lang.com</a>&rdquo; title=&lsquo;Slim Homepage&rsquo; Goto the Slim homepage</p>

<p>img alt=&ldquo;James Bond posing together with M&rdquo; src=&ldquo;image.png&rdquo; height=&ldquo;90&rdquo; width=&ldquo;90&rdquo;/</p>

<pre><code>
HTML Output:
</code></pre>

<p><a href="http://slim-lang.com" title="Slim Homepage">Goto the Slim homepage</a></p>

<p><img alt="James Bond posing together with M" height="90" src="image.png" width="90" /></p>

<pre><code>
You can basically chain them on and Slim will separate it from the text content—if present. If you look closely, you can see that our ```img``` tag has a trailing slash which explicitly closes tags in Slim. For images or more convoluted tags surely useful. FYI, HTML5 does not require you to write the attribute names in lower case nor to use quotes around attribute values. It is nevertheless recommended standard practice by the W3C.

#### Attribute Merging

Btw, if you have multiple selectors like classes or ids per tag, you can also write this more succinctly by daisy-chaining them. These selectors will be automatically delimited by whitespace.

Slim:
</code></pre>

<p>h2#big-header.agent-header.tagline Funky headline</p>

<p>h3.small-header.agent#007.tagline Small funky headline</p>

<pre><code>
HTML Output
</code></pre>

<h2 class="agent-header tagline" id="big-header">
  Funky headline
</h2>


<h3 class="small-header agent tagline" id="007">
  Small funky headline
</h3>


<pre><code>
Not that all these ids and classes mixed up like this represents best practices or anything, but it’s easy to see how Slim works in such a convoluted example. Pretty cool huh? Careful though, spreading these selectors across multiple lines won’t work without attribute wrappers (see next section).

Another option would be to use an array with strings or just symbols to merge in attributes.

Slim:
</code></pre>

<p>h2 class=[&ldquo;agent-header&rdquo;,&ldquo;tagline&rdquo;] Funky headline</p>

<p>h3 class=:agent,:double_o_seven,:tagline Small funky headline</p>

<pre><code>
HTML Output:
</code></pre>

<h2 class="agent-header tagline">
  Funky headline
</h2>




<h3 class="agent double_o_seven tagline">
  Small funky headline
</h3>


<pre><code>
In my book, I’d call this one a good-to-know but it’s not something I try to actively use. Might be handy if you want to interpolate something I suppose.

#### Attribute Wrappers

Slim offers you wrappers to make your attributes easier to read. Might not be necessary all the time, but it’s handy to know if a tag with lots of attributes needs some taming. You can use any of the following delimiters to wrap attributes: ```{}```, ```[]``` and ```()```.

Slim:
</code></pre>

<p>a{href=&ldquo;<a href="http://slim-lang.com">http://slim-lang.com</a>&rdquo; title=&lsquo;Home page&rsquo;} Goto the home page</p>

<p>a{href=&ldquo;<a href="http://slim-lang.com/about.html">http://slim-lang.com/about.html</a>&rdquo; title=&lsquo;About page&rsquo;
  class=&lsquo;link&rsquo; id=&lsquo;about&rsquo;} Goto the about page</p>

<p>h2[id=&ldquo;big-header&rdquo; class=&ldquo;agent-header tagline&rdquo;] Funky headline</p>

<p>h3(id=&ldquo;small-header&rdquo;
   class=&ldquo;agent 007 tagline&rdquo;) Some other funky headline</p>

<pre><code>
HTML Output:
</code></pre>

<p><a href="http://slim-lang.com" title="Home page">Goto the home page</a></p>

<p><a class="link" href="http://slim-lang.com/about.html" id="about" title="About page">Goto the about page</a></p>

<h2 class="agent-header tagline" id="big-header">
  Funky headline
</h2>




<h3 class="agent 007 tagline" id="small-header">
  Some other funky headline
</h3>


<pre><code>
If that’s easier for you to organize the markup, go for it! As illustrated by the second ```a``` and the ```h3``` tags, you can even spread attributes and selectors across multiple lines. Indentation seems to be enforced very forgivingly in regards whitespace sensitivity. My guess is though that not for long and you won’t need wrappers much. You‘ll get used to the barebones Slim syntax in no time and save them for special occasions—like you probably should.

For inlined tags, wrappers might come in handy every once in a while. As you can also observe in the example below, you can use spaces with the delimiters to make it even more readable—just a side note.
</code></pre>

<p>ul
  li.long-link: a{ href=&ldquo;<a href="http://slim-lang.com">http://slim-lang.com</a>&rdquo; title=&lsquo;Home page&rsquo; } Goto the home page
  li.long-link.class.with-id: a[ href=&ldquo;<a href="http://slim-lang.com/about.html">http://slim-lang.com/about.html</a>&rdquo; title=&lsquo;About page&rsquo;
                                 class=&lsquo;link&rsquo; id=&lsquo;about&rsquo; ] Goto the about page
  li.c-link: a(href=&ldquo;/c&rdquo;) C link
  li: a[href=&ldquo;/d&rdquo;] D link</p>

<pre><code>
HTML Output
</code></pre>

<ul>
  <li class="long-link">
    <a href="http://slim-lang.com" title="Home page">Goto the home page</a>
  </li>
  <li class="long-link class with-id">
    <a class="link" href="http://slim-lang.com/about.html" id="about" title="About page">Goto the about page</a>
  </li>
  <li class="c-link">
    <a href="http://vis-kid.github.io/octo-draft/c">C link</a>
  </li>
  <li>
    <a href="http://vis-kid.github.io/octo-draft/d">D link</a>
  </li>
</ul>


<pre><code>
#### Attribute Interpolation

Did somebody say interpolation? Within quoted attributes, you can use Ruby to interpolate code if needed. A simple example should be enough to illustrate this behaviour:

Slim:
</code></pre>

<p>a href=&ldquo;<a href="http://#">http://#</a>{url}&rdquo; Goto #{url}</p>

<pre><code>
Again, not something you might use on a daily basis but it sure is good to know to have in your bag of tricks. The attribute values will be escaped by default btw. If you need that behaviour disabled, just use a ```==```.
</code></pre>

<p>a href==&ldquo;<a href="http://#">http://#</a>{url}&rdquo; Goto #{url}</p>

<pre><code>
You can use full-on Ruby to play with your attributes as well. Just throw an equals sign in there where you want some Ruby code to be executed and you are ready to go. In the second article, you’ll find more info about outputting Ruby code in your Slim templates.
</code></pre>

<p>ul
  li id=&ldquo;agent_#{agent.id}&rdquo; class=agent.role
    a href=(path_to_agent agent) =agent.name</p>

<pre><code>
That of course also means that you can use simple booleans the same way in your attributes as well.
</code></pre>

<p>input type=&ldquo;text&rdquo; disabled=false
input type=&ldquo;text&rdquo; disabled=true
input type=&ldquo;text&rdquo; disabled=nil</p>

<p>```</p>

<p>Groovy, let’s move on!</p>

<h2>Final Thoughts</h2>

<p>I hope you got a good sense why Slim is a good choice for all your templating needs in Ruby land. If you still prefer to use Haml or ERB at the moment you might grow an appetite for Slim over time though. I’m not saying it’s an aquired taste or anthing, just that it’s not something that many people pick up early in their careers—maybe because they haven’t yet felt the pain of writing all that excess markup over and over again. This article should provide you with the basics that you need to get started. Slim has more to offer of course—especially a few advanced features that you definitely want to take a look at. In the next article we’re gonna start with a more detailed section about outputting Ruby code into your templates—and much more of course. See you there!</p>

<h2>Output</h2>

<p>You have already seen a bit how to use Ruby in your templates. This section gives you all you need to make use of this &hellip;</p>

<p>Before we take a break, we should definitely look into ways to bring Ruby into this equation. As you are hopefully aware of, tons of view code—aka tons of Ruby code in our context—is a serious smell and should be minimized at all times. Just because Slim makes it maybe even more enticing to plaster your templates with tons of logic does not mean that you should not practice constraint in that department. Done right on the other hand, Slim makes it really elegant to inject Ruby where needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AntiPatterns Basics—Rails Controllers]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2016/01/25/AntiPatterns-Basics-Rails-Controllers/"/>
    <updated>2016-01-25T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2016/01/25/AntiPatterns-Basics-Rails-Controllers</id>
    <content type="html"><![CDATA[<p><img src="/images/AntiPatterns/Controllers/LomaPrieta-Marina.jpeg"></p>

<h2>Heads Up</h2>

<p>Anti- what? It probably sounds a lot more complicated than it is. Over the last couple of decades, programmers were able to identify a useful selection of “design” patterns that frequently occurred throughout their code solutions. While solving similar problems, they were able to classify solutions that prevented them from reinventing the wheel for every project. It is important to note that these patterns should be seen more as discoveries than the inventions of a group of advanced developers.</p>

<p>AntiPatterns—as the name implies—on the other hand represent pretty much the opposite. They are discoveries of solutions to problems that you should definitely avoid. They often represent the work of inexperienced coders who don’t know what they don’t know yet. Worse, it could be the output of a lazy person who just ignores best practices for no good reason—or they think they don’t. What they might hope to gain in time savings in the beginning by hammering out quick, lazy or dirty solutions is gonna haunt them or some sorry successor later in the project’s life cycle. Do not underestimate the implications or these bad decisions, they’re gonna plague you like a curse—no matter what.</p>

<p>This one is exactly written for you if all this sounds rather new to you and you identify yourself as being more on the beginner side of all things Ruby / Rails. I think, it’s best if you approach these articles as quick skinny-dips into a much deeper topic whose mastery will not happen overnight. Nevertheless, I strongly believe that starting to get into this early will benefit beginners and their mentors tremendously.</p>

<h2>Topics</h2>

<ul>
<li>Fat Controllers</li>
<li>Non-RESTful Controllers</li>
<li>Rat’s Nest Rsources</li>
</ul>


<h2>FAT Controllers</h2>

<p>Well, “fat models, skinny controllers”, right? In case you haven’t read the previous AntiPattern articles, I should mention that aiming for models and controllers that stay skinny is a better guideline—no matter what. All that excess fat is not good for your projects—“skinny everything” makes much more sense. (Maybe I should disclaim that I’m not associated with the fashion industry in any way and don’t want to repeat the impression that you can’t be considered beautiful without fitting a certain type of imaginary body). As with models, you want controllers that have single responsibilities. Controllers should be dumb really, managing traffic and not much else. Also, if possible, we want to make our templates as dumb as possible—presenters can be handy in that regard.</p>

<p>It is further important that you do not stray much from RESTful controller actions. Sure, every once in a while it can make sense to have additional methods in there, but most of the time, you should feel a little uneasy having them around. Controllers tend to get fat when they amass business logic that actually belongs into models or when inexperienced developers don’t make use of Rails’ conventions. You won’t be the first trying to reinvent the wheel and you certainly won’t be the last. Don’t feel bad about it, probably most of us have been there, but as a craftsman, you really should invest time and effort to know the conventions, benefits and limitations of the frameworks you work with—at least for commercial purposes where somebody pays for your expertise. Experiments are always fine of course.</p>

<p>Since controllers are in charge of the flow of your application as well as for gathering the information that your views need, they already have a pretty important responsibility. They really do not need added complexity from the realm of your models. Controllers are closely working with your views to display the data provided by the model layer. Their relationship is tighter than with models. The model layer can potentially be developed much more independent from the others. The good thing about that is that a clean controller layer often has a positive effect on how tidy your views can be.</p>

<p>What I want to get across is that fat controllers are super common in Rails land—especially among beginners and inexperienced developers—and with a little bit of love and care this can be optimized easily. The first step is straightforward. Ask yourself when a controller grows in size if the complexity comes from added business logic. If so, find a way to move it to the model layer where you have the added benefit of having a better home for testing complex code.</p>

<h3>Presenters</h3>

<p>To follow the above recommendation of moving aquired controller logic to models, presenters can be a handy technique. They can simulate a model while combining a couple of loosely related attributes together which can be useful for keeping controllers slim and sexy. On top of that, they are also good at keeping logic nastiness out of your views. Pretty good deal for crafting an extra object!</p>

<p>Presenters can “imitate” a model which represents the state that your view needs and combines the attributes that need to move through the controller. They can be more complex, but then I feel they are drifting into “Decorator” territory. Sometimes a controller is in charge of creating multiple models simultaneously and we want to avoid is handling multiple instance variables in there. Why is this important? Because it helps us to keep the maintainability of our apps in check. The presenter aggregates behaviour and attributes which makes it easy for our controllers to focus on small, dead-simple jobs—with a single object. Also, formatting data in your view or other similar small functions are frequent jobs that often occur. Having this contained in a presenter is not only great for clean views but also for having a dedicated place that makes testing this  behaviour straightforward—the model layer is easier to test. More “bang for the buck” and all that jazz.</p>

<p>If you stumble upon the Presenter Pattern and find multiple approaches or different ways to describe it, you are not going crazy. There is little clear cut agreement on what a presenter is I feel like. What is common knowledge though is that it sits between the MVC layers. We can use it to manage multiple model objects that need to be created at the same time. While combining these objects it imitates an ActiveRecord model.</p>

<p>A commonly cited scenario is some sort of form that inputs information for various different models. Like a new user account that also has input fields for credit cards and addresses or something or something. Going full wizard by stepping through a couple of forms in sequence is not that different . Since these parts of your application tend to be very important ones, it is definitely a good idea to keep things tidy while having the best possible option available for testing at the same time. The user experience on this one is key too. In the example below, we want to create a simple mission that <code>has_one</code> <code>agent</code> and one <code>quartermaster</code>. No rocket science, but it’s a good example to see how quickly things can get out of hands. The controller needs to juggle multiple objects that the view needs in a nested form to tie things together. You will soon see that all of this can be cured with a nice “Form Object” which presents the objects needed and weaves things together in one central class.</p>

<h5>app/models/mission.rb</h5>

<pre><code class="ruby">
class Mission &lt; ActiveRecord::Base
  has_one :agent
  has_one :quartermaster
  accepts_nested_attributes_for :agent, :quartermaster, allow_destroy: true

  validates :mission_name, presence: true
  ...

end

class Agent &lt; ActiveRecord::Base
  belongs_to :mission
  validates :name, presence: true
  ...

end

class Quartermaster &lt; ActiveRecord::Base
  belongs_to :mission
  validates :name, presence: true
  ...

end
</code></pre>

<p>I’m mentioning the models here just for completeness sake in case you never used <code>fields_for</code> before—a bit simplified but working. Below is the heart of the matter.</p>

<h4>Too many instance variables</h4>

<h5>app/controllers/missions_controller.rb</h5>

<pre><code class="ruby">
class MissionsController &lt; ApplicationController
  def new
    @mission = Mission.new
    @agent = Agent.new
    @quartermaster = Quartermaster.new
  end

  def create
    @mission = Mission.new(mission_params)
    @agent = Agent.new(agent_params)
    @quartermaster = Quartermaster.new(quartermaster_params)

    @mission.agent = @agent
    @mission.quartermaster = @quartermaster

    if @account.save and @agent.save and @quartermaster.save
      flash[:notice] = 'Mission accepted'
      redirect_to missions_path
    else
      flash[:alert] = 'Mission not accepted'
      render :new     
    end
  end

  private

  def mission_params
    params.require(:mission).permit(:mission_name, :objective, :enemy)
  end

  def agent_params
    params.require(:agent).permit(:name, :number, :licence_to_kill)
  end

  def quartermaster_params
    params.require(:quartermaster).permit(:name, :number, :hacker, :expertise, :humor)
  end

end
</code></pre>

<p>Overall, it’s easy to see that this is heading in the wrong direction. It already attracted quite a bit of mass and it only consists of <code>new</code> and <code>create</code> methods. Not good! The quickly growing amount of private methods are already piling up way too fast as well. <code>agent_params</code> and <code>quartermaster_params</code> in a <code>MissionsController</code> does not sound too slick to you I hope. A rare sight you think? I’m afraid not. “Single Responsibilities” in controllers truly are a golden guideline. You’ll see why in just a minute.</p>

<p>Even if you squint your eyes, this looks super nasty. And during saving in the <code>create</code> action, with validations in place, if we can’t save every object due to some mistake or something, we’ll end up with orphaned objects that nobody wants to deal with. Yikes! Sure we could put this into a <code>transaction</code> block which successfully completes saving only if all objects are in order, but this is a bit like surfing against the current—also, why do model level stuff like this in the controller really? There are more elegant ways to catch a wave.</p>

<p>Following this path, the view would have an accompanying <code>form_for</code> for <code>@mission</code> and the additional <code>fields_for</code> for <code>@agent</code> and <code>@quartermaster</code> of course.</p>

<h3>Messy Form With Multiple Objects</h3>

<h5>app/views/missions/new.html.erb</h5>

<pre><code class="erb">
&lt;%= form_for(@mission) do |mission| %&gt;

  &lt;h3&gt;Mission&lt;/h3&gt;
    &lt;%= mission.label      :mission_name %&gt;
    &lt;%= mission.text_field :mission_name %&gt;

    &lt;%= mission.label      :objective %&gt;
    &lt;%= mission.text_field :objective %&gt;

    &lt;%= mission.label      :enemy %&gt;
    &lt;%= mission.text_field :enemy %&gt;

  &lt;h3&gt;Agent&lt;/h3&gt;
  &lt;%= fields_for @agent do |agent| %&gt;
      &lt;%= agent.label      :name %&gt;
      &lt;%= agent.text_field :name %&gt;

      &lt;%= agent.label      :number %&gt;
      &lt;%= agent.text_field :number %&gt;

      &lt;%= agent.label      :licence_to_kill %&gt;
      &lt;%= agent.check_box  :licence_to_kill %&gt;
  &lt;% end %&gt;

  &lt;h3&gt;Quartermaster&lt;/h3&gt;
  &lt;%= fields_for @quartermaster do |quartermaster| %&gt;
      &lt;%= quartermaster.label      :name %&gt;
      &lt;%= quartermaster.text_field :name %&gt;

      &lt;%= quartermaster.label      :number %&gt;
      &lt;%= quartermaster.text_field :number %&gt;

      &lt;%= quartermaster.label      :hacker %&gt;
      &lt;%= quartermaster.check_box  :hacker %&gt;

      &lt;%= quartermaster.label      :expertise %&gt;
      &lt;%= quartermaster.text_field :expertise %&gt;

      &lt;%= quartermaster.label      :humor %&gt;
      &lt;%= quartermaster.check_box  :humor %&gt;
  &lt;% end %&gt;

  &lt;%= mission.submit %&gt;
&lt;% end %&gt;
</code></pre>

<p>Sure, this works but I wouldn’t be too excited to stumble upon this. <code>fields_for</code> sure is handy and all but handling this with OOP is a lot more dope. For such a case, a presenter will also aid us in having a simpler view because the form will deal with just a single object. Nesting the form becomes unnecessary that way. Btw, I left out any wrappers for styling the form to make it easier to digest visually.</p>

<h3>Form Object Presenter</h3>

<h5>app/views/missions/new.html.erb</h5>

<pre><code class="erb">
&lt;%= form_for @mission_presenter, url: missions_path do |mission| %&gt;
  &lt;h3&gt;Mission&lt;/h3&gt;
    &lt;%= mission.label      :mission_name %&gt;
    &lt;%= mission.text_field :mission_name %&gt;

    &lt;%= mission.label      :objective %&gt;
    &lt;%= mission.text_field :objective %&gt;

    &lt;%= mission.label      :enemy %&gt;
    &lt;%= mission.text_field :enemy %&gt;

  &lt;h3&gt;Agent&lt;/h3&gt;
    &lt;%= mission.label      :agent_name %&gt;
    &lt;%= mission.text_field :agent_name %&gt;

    &lt;%= mission.label      :agent_number %&gt;
    &lt;%= mission.text_field :agent_number %&gt;

    &lt;%= mission.label      :licence_to_kill %&gt;
    &lt;%= mission.check_box  :licence_to_kill %&gt;

  &lt;h3&gt;Quartermaster&lt;/h3&gt;
    &lt;%= mission.label      :quartermaster_name %&gt;
    &lt;%= mission.text_field :quartermaster_name %&gt;

    &lt;%= mission.label      :quartermaster_number %&gt;
    &lt;%= mission.text_field :quartermaster_number %&gt;

    &lt;%= mission.label      :hacker %&gt;
    &lt;%= mission.check_box  :hacker %&gt;

    &lt;%= mission.label      :expertise %&gt;
    &lt;%= mission.text_field :expertise %&gt;

    &lt;%= mission.label      :humor %&gt;
    &lt;%= mission.check_box  :humor %&gt;

  &lt;%= mission.submit %&gt;
&lt;% end %&gt;
</code></pre>

<p>As you can easily see, our view has become much simpler—no nestings and it’s a lot more straightforward this flat. The part you need to be a bit careful is this:</p>

<pre><code class="erb">
&lt;%= form_for @mission_presenter, url: missions_path do |mission| %&gt;
</code></pre>

<p>You need to provide <code>form_for</code> with a path via <code>url</code> so that it can <code>post</code> the params from this form to its proper controller—here <code>MissionsController</code>. Without that additional argument, Rails would try to find the controller for our presenter object <code>@mission_presenter</code> through conventions—in this case <code>MissionFormPresentersController</code>—and blow up without one.</p>

<p>In general, we should try our best to keep controller actions mostly as simple as dealing with the CRUD manipulation of resources—that’s what a controller does for a living and is best equiped to do without muddying the MVC distinctions. As a nice side effect, the level of complexity in your controllers will go way down as well.</p>

<h5>app/controllers/missions_controller.rb</h5>

<pre><code class="ruby">
class MissionsController &lt; ApplicationController

  def new
    @mission_presenter = MissionFormPresenter.new
  end

  def create
    @mission_presenter = MissionFormPresenter.new(mission_params)
    if
      @mission_presenter.save
      flash[:notice] = 'Mission accepted'
      redirect_to missions_path
    else
      flash[:alert] = 'Mission not accepted'
      render :new
    end
  end

  private

  def mission_params
    params.require(:mission_form_presenter).permit(whitelisted)
  end

  def whitelisted
    [:mission_name, :objective, :enemy, :agent_name, :agent_number, :licence_to_kill, :quartermaster_name, :quartermaster_number, :hacker, :expertise, :humor]
  end
end
</code></pre>

<p>The controller is also a lot easier on the eyes, isn’t it? Much cleaner and pretty much standard controller actions. We are dealing with a single object that has one job. We instantiate a single object, the presenter, and feed it the params as usual.</p>

<p>The only thing that bugged me was sending this long list of whitelisted strong parameters. I extracted them into a method called <code>whitelisted</code> which just returns an array with the complete list of parameters. Otherwise, <code>mission_params</code> would have looked like the following—which felt too nasty:</p>

<pre><code class="ruby">
def mission_params
  params.require(:mission_form_presenter).permit(:mission_name,
                                                 :objective, :enemy,
                                                 :agent_name, 
                                                 :agent_number, 
                                                 :licence_to_kill, 
                                                 :quartermaster_name, 
                                                 :quartermaster_number, 
                                                 :hacker, 
                                                 :expertise, 
                                                 :humor)
end
</code></pre>

<p>Oh, a word about the <code>:mission_form_presenter</code> argument for <code>params.require</code>. Although we named our instance variable for the presenter <code>@mission_presenter</code>, when we use it with <code>form_for</code>, Rails expects the key of the params hash for the form to be named after the object instantiated—not after the name given in a controller. I have seen newbies trip over this several times. That Rails is providing you with cryptic errors in such a case isn’t helping either. If you need a little refresher on params, this is a good place to dig in:</p>

<ul>
<li><a href="http://api.rubyonrails.org/classes/ActionController/Parameters.html">Documentation</a></li>
<li><a href="https://www.youtube.com/watch?v=y57OnWV6dRE">Free screencast</a></li>
</ul>


<p>In our <code>Mission</code> model, we now have no need for <code>accepts_nested_attributes</code> anymore and can get rid of that harmless looking, dreaded thing. The <code>validates</code> method is also irrelevant here because we add this responsibility to our form object. Same goes for our validations on <code>Agent</code> and <code>Quartermaster</code> of course.</p>

<h5>app/models/mission.rb</h5>

<pre><code class="ruby">
class Mission &lt; ActiveRecord::Base
  has_one :agent
  has_one :quartermaster
  #accepts_nested_attributes_for :agent, :quartermaster, allow_destroy: true

  #validates :mission_name, presence: true
  ...

end
</code></pre>

<p>Encapsulating this validation logic directly on our new object helps us keeping things clean and organized. In cases where you could also create these objects independently from each other, validations should stay where they currently are of course. This kind of duplication can also be dealt with—no worries. FYI, for example by using <code>validates_with</code> with a separate class for validation that inherits from <code>ActiveModel::Validator</code>.</p>

<p>Now we have a skinny controller with a single responsibility and a flat form for creating multiple objects in parallel. Awesome! How did we achieve all this?  Below is the presenter that does all the work—not implying this class does a lot of work though. We want to have some sort of intermediary model without a database that juggles multiple objects. Take a look at this plain old ruby object (PORO).</p>

<h5>app/presenters/mission_form_presenter.rb</h5>

<pre><code class="ruby">
class MissionFormPresenter
  include ActiveModel::Model

  attr_accessor  :mission_name, :objective, :enemy, :agent_name,
                 :agent_number, :licence_to_kill, :quartermaster_name,
                 :quartermaster_number, :hacker, :expertise, :humor

  validates :mission_name, :agent_name, :quartermaster_name, presence: true

  def save
    ActiveRecord::Base.transaction do
      @mission = Mission.create!(mission_attributes)
      @mission.create_agent!(agent_attributes)
      @mission.create_quartermaster!(quartermaster_attributes)
    end
  end

  private 

  def mission_attributes
    { mission_name: mission_name, objective: objective, enemy: enemy }
  end

  def agent_attributes
    { name: agent_name, number: agent_number, licence_to_kill: licence_to_kill }
  end

  def quartermaster_attributes
    { name: quartermaster_name, number: quartermaster_number, hacker: hacker, expertise: expertise, humor: humor }
  end
end
</code></pre>

<p>I think it’s fair to say that it’s not very complicated. <code>MissionFormPresenter</code> is a form object that now encapsulates what made our controller unnecessarily fat. As a bonus, our view became flat and simple. What happens here is that we can aggregate all the info from our form and then we create all the objects we need sequentially.</p>

<p>The most important piece happens in our new <code>save</code> method. First we create the new <code>Mission</code> object. After that, we can create the two objects assoicated with it: <code>Agent</code> and <code>Quartermaster</code>. Through our <code>has_one</code> / <code>belongs_to</code> associations, we can make use of of a <code>create_x</code> method that adapts to the name of the associated object. For example, if we use <code>has_one :agent</code> we get a <code>create_agent</code> method. Easy, right? (FYI, actually we also get a <code>build_agent</code> method.) I decided to use the version with a bang(!) because it raises an <code>ActiveRecord::RecordInvalid</code> error if the record is invalid while attempting to save. Wrapped inside a <code>transaction</code> block, these bang methods take care that no ophaned object gets saved if some validation kicks in. The transaction block will roll back if something goes wrong during save.</p>

<p>How does this work with the attributes you might ask? We ask Rails for a little bit of love via <code>include ActiveModel::Model</code> (<a href="http://api.rubyonrails.org/classes/ActiveModel/Model.html">API</a>). This allows us to initialize objects with a hash of attributes—which is exactly what we do in the controller. After that, we can use our <code>attr_accessor</code> methods to extract our attributes to instantiate the objects we really need. <code>ActiveModel::Model</code> further enables us to interact with views and controllers. Among other goodies, you can also use this for validations in such classes. Putting these validations into such dedicated form objects is a good idea for organization and it also keeps your models a bit more tidy. I decided to extract the long list of parameters into private methods which feed the objects that get created in <code>save</code>. In such a presenter object, I have little concern of having a couple more private methods lying around. Why not? Feels cleaner!</p>

<p>Testing these kind of scenarios where multiple models come together should be treated with utmost care—the simpler the objects in question, the better the testing experience. No rocket science really. Presenters operate in your favor on this one. Having these tests potentially tied to the controller is not the best way to approach this. Remember, unit tests are fast and cheap.</p>

<p>A word of caution. Do not overuse presenters—they should not be your first choice. Usually, the need for a presenter grows over time. For me personally, they are best used when you have data represented by multiple models that need to come together in a single view. Without a presenter, you might more often than not prepare multiple instance variables in your controller for a single view. That alone can make them real fat real quick. A thing that you should consider and weigh is while presenters add objects to your codebase they can also reduce the number of objects a controller needs to deal with—less complexity and single responsibilities. It is probably a fairly advanced technique to lose some fat, but when you want to slim down, you need to put in the work.</p>

<h2>Non-RESTful Controllers</h2>

<p>Not trying to adhere to the standard controller actions is most likely a bad idea. Having tons of custom controller methods is an antipattern you can avoid pretty easily. Methods like <code>login_user</code>, <code>activate_admin</code>, <code>show_books</code>, and other funny business that stands in for <code>new</code>, <code>create</code>, <code>show</code> and so forth, should give you a reason to pause and to doubt your approach. Not following a REST-ful approach can easily lead to big, massive controllers, mostly likely because you’ll need to fight the framework or reinvent the wheel every once in a while. In short, not a good idea. Also, more often than not, it’s also a symptom of inexperience or carelessnes. Following the “Single Responsibility Principle” seems to be very hard under these circumstances as well—just an educated guess though.</p>

<p>Approaching resources in your controller in a  restful manner is making your life a lot less complicated and your apps are becoming easier to maintain as well—which adds to the overall stability of your app. Think about handling resources REST-fully from the perspective of an object’s life cycle. You create, update, show (single or collections), update and destroy them. For most cases, this will do the job. FYI, <code>new</code> and <code>edit</code> actions aren’t really part of REST—they are more like different versions of the <code>show</code> action, helping you present different stages in the resource’s life cycle. Put together, most of the time, these seven standard controller actions give you all you need to manage your resources in your controllers. Another big advantage is that other Rails developers working with your code will be able to navigate your controllers much faster.</p>

<p>Following that line of REST-ful cool aid, this also includes the way you name your controllers. The name of the resource you work on should be mirrored in the controller object. For example, having a <code>MissionsController</code> that handles other resources than <code>@mission</code> objects is a smell that something is off. The sheer size of a controller often is also a dead giveaway that REST was ignored. Should you encounter large controllers that implement tons of customized methods that break with conventions, it can be a very effective strategy to split them into multiple distinctive controllers that have focused responsibilities—and bascially manage only a single resource while adhering to a REST-ful style. Break them apart agressively and you will have an easier time to compose their methods the Rails way.</p>

<h2>Rat’s Nest Resources</h2>

<p>Look at the following example and ask yourself what’s wrong with this:</p>

<h4>Nested AgentsController</h4>

<h5>app/controllers/agents_controller.rb</h5>

<pre><code class="ruby">
class AgentsController &lt; ApplicationController
  def index
    if params[:mission_id]
      @mission = Mission.find(params[:mission_id])
      @agents = @mission.agents
    else
      @agents = Agent.all
    end
  end
end
</code></pre>

<p>Here we check if we have a nested route that provides us with the id for a possible <code>@mission</code> object. If so, we want to use the associated object to get the <code>agents</code> from it. Otherwise, we’ll fetch a list of all agents for the view. Looks harmless, especially because it’s still concise, but it’s the start of a potentially way larger rat’s nest.</p>

<h4>Nested Routes</h4>

<pre><code class="ruby">
resources :agents
resources :missions do
  resources :agents
end
</code></pre>

<p>Nothing obtuse about the nested routes here. In general, there is nothing wrong about this approach. The thing we should be careful about is how the controller handles this business—and as a consequence, how the view needs to adapt to it. Not exactly squeaky clean as you can see below.</p>

<h4>View With Unnecessary Conditional</h4>

<h5>app/views/agents/index.html.erb</h5>

<p>``` erb</p>

<p>&lt;% if @mission %>
  <h2>Mission</h2>
  <div>&lt;%= @mission.name %></div>
  <div>&lt;%= @mission.objective %></div>
  <div>&lt;%= @mission.enemy %></div>
&lt;% end %></p>

<h2>Agents</h2>


<ul>
  <% @agents.each do |agent| %>
    <li class='agent'>
      <div>Name:            <%= agent.name %></div>
      <div>Number:          <%= agent.number %></div>
      <div>Licence to kill: <%= agent.licence_to_kill %></div>
      <div>Status:          <%= agent.status %></div>
    </li>
  <% end %>
</ul>


<pre><code>
Might also not look like a big deal, I get it. The level of complexity is not exactly real world though. Aside from that, the argument is more about dealing with resources in an object oriented way and about using Rails to your fullest advantage. I guess this is a little bit of an edge case regarding single responsibilities. It’s not exactly violating this idea too bad, even though we have a second object—@mission—for the association lingering around. But since we are using it for getting access to a specific set of agents, this is totally alright.

The branching is the part that is inelegant and will most likely lead to poor design decisions—both in views and controllers. Creating two versions of ```@agents``` in the same method is the perpetrator here. I’ll make it short, this can get out of hand really quickly. Once you start nesting resources like this, chances are good new rats are hanging around soon. And the view above also needs a conditional that adapts to the situation for when you have ```@agents``` associated with a ```@mission```. As you can easily see, a little bit of sloppiness in your controller can lead to bloated views that have more code than needed. Let’s try another approach. Exterminator time! 

#### Separate Controllers

Instead of nesting these resources, we should be giving each version of this resource its own distinctive, focused controller—one controller for “simple”, unnested agents and one for agents that are associated with a mission. We can achieve this via namespacing one of them under a ```/missions``` folder. 

##### app/controllers/missions/agents_controller.rb
</code></pre>

<p>module Missions
  class AgentsController &lt; ApplicationController</p>

<pre><code>def index
  @mission = Mission.find(params[:mission_id])
  @agents = @mission.agents
end
</code></pre>

<p>  end
end</p>

<pre><code>
By wrapping this controller inside a module, we can avoid that ```AgentsController``` inherits twice from ```ApplicationController```. Without it, we would run into an error like this: ```Unable to autoload constant Missions::AgentsController```. I think a module is a small price to pay for making Rails autoloading happy. The second ```AgentsController``` can stay in the same file as before. It now only deals with one possible resource in ```index```—prepping all agents without missions that are around. 

##### app/controllers/agents_controller.rb
</code></pre>

<p>class AgentsController &lt; ApplicationController</p>

<p>  def index
    @agents = Agent.all
  end
end</p>

<pre><code>
Of course, we also need to instruct our routes to look for this new namespaced controller if agents are associated with a mission.
</code></pre>

<p>resources :agents
resources :missions do
  resources :agents, controller: &lsquo;missions/agents&rsquo;
end</p>

<pre><code>
After we specified that our nested resource has a namespaced controller, we’re all set. When we do a ```rake routes``` check in the terminal, we’ll see that our new controller is namespaced and that we are good to go.

#### New Routes
</code></pre>

<p> Prefix Verb   URI Pattern                                     Controller#Action
              root GET    /                                               agents#index
            agents GET    /agents(.:format)                               agents#index
                   POST   /agents(.:format)                               agents#create
         new_agent GET    /agents/new(.:format)                           agents#new
        edit_agent GET    /agents/:id/edit(.:format)                      agents#edit
             agent GET    /agents/:id(.:format)                           agents#show
                   PATCH  /agents/:id(.:format)                           agents#update
                   PUT    /agents/:id(.:format)                           agents#update
                   DELETE /agents/:id(.:format)                           agents#destroy
    mission_agents GET    /missions/:mission_id/agents(.:format)          missions/agents#index
                   POST   /missions/:mission_id/agents(.:format)          missions/agents#create
 new_mission_agent GET    /missions/:mission_id/agents/new(.:format)      missions/agents#new
edit_mission_agent GET    /missions/:mission_id/agents/:id/edit(.:format) missions/agents#edit
     mission_agent GET    /missions/:mission_id/agents/:id(.:format)      missions/agents#show
                   PATCH  /missions/:mission_id/agents/:id(.:format)      missions/agents#update
                   PUT    /missions/:mission_id/agents/:id(.:format)      missions/agents#update
                   DELETE /missions/:mission_id/agents/:id(.:format)      missions/agents#destroy</p>

<pre><code>
Our nested resource for ```agents``` is now properly redirected to ```controllers/missions/agents_controller.rb``` and each action can take care of agents that are part of a mission. For completeness sake, let’s have a look at our final views as well:

#### Agents With Mission

##### app/views/missions/agents/index.html.erb 
</code></pre>

<h2>Mission</h2>


<div><%= @mission.mission_name %></div>


<div><%= @mission.objective %></div>


<div><%= @mission.enemy %></div>




<h2>Agents</h2>


<ul>
  <% @agents.each do |agent| %>
    <li class='agent'>
      <div>Name:            <%= agent.name %></div>
      <div>Number:          <%= agent.number %></div>
      <div>Licence to kill: <%= agent.licence_to_kill %></div>
    </li>
  <% end %>
</ul>


<pre><code>
#### Agents Without Mission

##### app/views/agents/index.html
</code></pre>

<h2>Agents</h2>


<ul>
  <% @agents.each do |agent| %>
    <li class='agent'>
      <div>Name:            <%= agent.name %></div>
      <div>Number:          <%= agent.number %></div>
      <div>Licence to kill: <%= agent.licence_to_kill %></div>
    </li>
  <% end %>
</ul>


<pre><code>
Well, let’s get rid of that little bit of duplication where we iterate over ```@agents``` also. I created a partial for rendering a list of agents and put it into a new ```shared``` directory under ```views```. 

##### app/views/shared/_agents.html.erb
</code></pre>

<h2>Agents</h2>


<ul>
  <% @agents.each do |agent| %>
    <li class='agent'>
      <div>Name: <%=            agent.name %></div>
      <div>Number: <%=          agent.number %></div>
      <div>Licence to kill: <%= agent.licence_to_kill %></div>
    </li>
  <% end %>
</ul>


<pre><code>
Nothing new or surprising here but our views are now more DRY.

#### Agents With Mission

##### app/views/missions/agents/index.html.erb 
</code></pre>

<h2>Mission</h2>


<div><%= @mission.mission_name %></div>


<div><%= @mission.objective %></div>


<div><%= @mission.enemy %></div>


<p>&lt;%= render &ldquo;shared/agents&rdquo;, collection: @agents %></p>

<pre><code>
#### Agents Without Mission

##### app/views/agents/index.html
</code></pre>

<p>&lt;%= render &ldquo;shared/agents&rdquo;, collection: @agents %></p>

<p>```</p>

<p>Dope!</p>

<h2>Final Thoughts</h2>

<p>I think if you as a beginner can avoid these AntipPatterns in your controllers you are off to a very good start. There is still much left to learn for you in this regard but give it time, it’s nothing that comes too easy or overnight. On the other hand, if you you are hungry for more and like to explore more advanced techniques I’m all for it of course. Don’t let yourself be discouraged by the “advanced” name tag. Take your time, have fun and don’t get frustrated if you need to revisit the topic again because you don’t yet have all pieces of the puzzle in place yet. If you are early in the development game and started to play with design patterns, I believe you are way ahead of the game and made the right decision. Don’t wait and get out of your comfort zone to stretch your gray matter a bit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AntiPatterns Basics—Rails Views]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2016/01/03/AntiPatterns-Basics-Rails-Views/"/>
    <updated>2016-01-03T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2016/01/03/AntiPatterns-Basics-Rails-Views</id>
    <content type="html"><![CDATA[<p><img src="/images/AntiPatterns/Views/pisa-tower.1000x580.jpeg"></p>

<h2>Heads Up</h2>

<p>Anti- what? It probably sounds a lot more complicated than it is. Over the last couple of decades, programmers were able to identify a useful selection of “design” patterns that frequently occurred throughout their code solutions. While solving similar problems, they were able to classify solutions that prevented them from reinventing the wheel for every project. It is important to note that these patterns should be seen more as discoveries than the inventions of a group of advanced developers.</p>

<p>AntiPatterns—as the name implies—on the other hand represent pretty much the opposite. They are discoveries of solutions to problems that you should definitely avoid. They often represent the work of inexperienced coders who don’t know what they don’t know yet. Worse, it could be the output of a lazy person who just ignores best practices for no good reason—or they think they don’t. What they might hope to gain in time savings in the beginning by hammering out quick, lazy or dirty solutions is gonna haunt them or some sorry successor later in the project’s life cycle. Do not underestimate the implications or these bad decisions, they’re gonna plague you like a curse—no matter what.</p>

<p>This one is exactly written for you if all this sounds rather new to you and you identify yourself as being more on the beginner side of all things Ruby / Rails. I think, it’s best if you approach these articles as quick skinny-dips into a much deeper topic whose mastery will not happen overnight. Nevertheless, I strongly believe that starting to get into this early will benefit beginners and their mentors tremendously.</p>

<h2>Topics</h2>

<ul>
<li>Rails Views</li>
<li>PHPitis</li>
<li>Extracting Helpers</li>
<li>Helpful Helpers</li>
<li>Forms</li>
<li>Partials</li>
<li>Conditional Content</li>
<li>Semantic Markup</li>
</ul>


<h2>Rails Views</h2>

<p>Rails comes with ERb out of the box and I think it’s not necessary to throw in cool view-rendering engines like Slim for our examples for now. When you think “convention over configuration” mostly applies to the model and controller layers you are missing out on a lot of the goodies that makes working with Rails so speedy and progressive. Taking good care of the view layer includes not only the way you compose your markup but also CSS / Sass, JavaScript, view helpers and your layout templates. Viewed from that angle it becomes a bit deeper than you might think at first. Alone that number of technologies which can be involved in creating your views suggest that care should be taken to keep things neat, clear and flexible.</p>

<p>Since the way we write markup and styles is a lot less constrained than domain modeling, you want to be extra cautious to keep things as simple as possible. Maintenance should be pretty much your number one priority. Since redesigns or design iterations can be more frequent than extensive changes to your model layer, preparing for change gets a whole nother meaning when it comes to your user facing layer. My advice, don’t necessarily build for the future but also, by all means, do not underestimate the rate of change—especially if you have one of those “idea guys” who knows jack about implementations on the team. What I like about Rails’ approach towards views in MVC is that it is treated as equally important and the lessons learned from the model domain were incorporated into the view—whenever possible and useful. Other frameworks seem to agree since they integrated a lot of these ideas pioneered by Rails.</p>

<p>Since the last article was a bit more extensive I chose this topic as a small breather. The following articles about Rails controllers and testing are again bigger in size. The AntiPatterns for views are not that many but they are nevertheless equally important—at least. We’ll focus on the main one, PHPitis, and work through a couple of techniques to keep your views lean and mean. Since the view is your presentation layer, maybe you should be especially careful to not create a hazardous mess. Let’s get to it!</p>

<h2>PHPitis</h2>

<p>Why do we have MVC in the first place? Yes, because the separation of concerns seemed like the most reasonable thing to do. Sure the implementations of this idea vary a bit here and there but the overall concept of having distinct responsibilities for each layer is the core motivation for building robust applications. Having tons of code in your view layer might not be alien to developers coming from the PHP side of things—although I hear their frameworks have caught up already (heavily influenced by things like Rails?)—but in Ruby land these things have been a loudly voiced AntiPattern—since forever I feel like.</p>

<p>The obvious problems like mixing responsibilities and duplications aside, it simply feels nasty and lazy—a little stupid too to be frank. Sure, I get it, when you develop much within a framework, language or whatever ecosystem, it’s easy to become complicit or numb towards crap like that. What I like about the people pushing Ruby is that these things seem to have a lot less weight—might be a reason why innovating never seemed to be a problem within the community. Whatever works best wins the argument and we can move forward.</p>

<p>So is this a whole section dedicated to bash PHP? Not at all! In the past, PHP apps had the reputation of having weak separations between models, views and controllers (Maybe this was one of the core reasons why people felt writing apps with Rails was much more appealing). Having single files with code for all three layers didn’t seem that sexy. So when we stuff tons of Ruby / domain code into our views it starts to look like the dreaded PHP style of structuring things—PHPitis. Only a few things are as bad as this when it comes to developing web apps I feel. When you care about happy developers and your own future sanity, I can’t see why anyone would go down that road—only pain ahead it seems.</p>

<p>Rails offers a lot of goodies to minimize code in the view as much as possible. You must learn the ways of helpers, layouts and preprocessors in order to achieve a cleaner view. A simple rule of thumb is to keep domain logic out of your views—no shortcuts! The price to pay for being lazy on this is hard to overestimate. The Ruby code that must be in the presentation layer should be as little and as simple as possible as well as intelligently organized. Your reward will be code that is a joy to extend and to maintain—new team members will also have an easier time wrapping their heads around the new codebase. As a bonus, neat freak designers who code also won’t be angy and hide rotten food in your salad if you keep tons of Ruby code out of their markup.</p>

<h3>Helpful Helpers</h3>

<p>Knowing the myriad of helper methods in Rails will significantly improve the quality of your presentation layer. Not only will it clean things up and inject the occasional speed boost in productivity, but more importantly it helps you fight PHPitis. The thing that you should appreciate about these helpers is that they represent extractions from commonly needed code. Instead of reinventing the wheel, when in doubt, check if there isn’t already a helper around that solves your issue in the view—same goes for Models and Controllers as well of course.</p>

<p>Here’s a list of helpers you should look into pretty much right away:</p>

<ul>
<li><code>form_for</code></li>
<li>Other helpers for forms.</li>
<li><code>fields_for</code></li>
<li><code>link_to</code></li>
<li><code>content_for</code></li>
<li>And writing your very own of course.</li>
</ul>


<h3>Forms</h3>

<p>Let’s have a look at <code>form_for</code> first. I know forms are a little bit boring and not that sexy for a topic, but I highly encourage you to read up on them to familiarize yourself with the finer details. It’s important to understand how they work. I remember often just glancing over them without giving them much attention. Sure you can get them to work quite easily without understanding what’s going on under the hood. In the future, I might take the time to write a complete article on them. In the meantime, I highly recommend that you spend a little time checking the documentation–at least you‘ll appreciate how convenient Rails makes it to deal with form stuff.</p>

<h4>The Ugly</h4>

<p>The example below shows you the HTML of a little form we need for creating agents. It only accepts three parameters as input: <code>name</code>, <code>number</code> and <code>licence_to_kill</code>. A lot of code for this little task actually. The <code>authenticity_token</code> comes from Rails–it’s a security thing that protects the app from “cross-site request forgery”.</p>

<h6>some.html.erb</h6>

<pre><code class="html">
&lt;form class="new_agent" id="new_agent" action="/agents" accept-charset="UTF-8" method="post"&gt;&lt;input name="utf8" type="hidden" value="&amp;#x2713;" /&gt;&lt;input type="hidden" name="authenticity_token" value="8tD8G9mBt5l34TcN6Tnt/Mbto32itOuS1fWbc3Ez1vKinUmdexxUQlFp7mXIYoazQJjjSgryFIuL4dioxtJw/g==" /&gt;

  &lt;label for="agent_name"&gt;Name&lt;/label&gt;
  &lt;input type="text" name="agent[name]" id="agent_name" /&gt;

  &lt;label for="agent_number"&gt;Number&lt;/label&gt;
  &lt;input type="text" name="agent[number]" id="agent_number" /&gt;

  &lt;label for="agent_licence_to_kill"&gt;Licence to kill&lt;/label&gt;
  &lt;input name="agent[licence_to_kill]" type="hidden" value="0" /&gt;&lt;input type="checkbox" value="1" name="agent[licence_to_kill]" id="agent_licence_to_kill" /&gt;

  &lt;input type="submit" name="commit" value="Create Agent" /&gt;

&lt;/form&gt;
</code></pre>

<p>Writing a form by hand is not only lengthy but error prone as well. Also, if we would approach it that way, we’d also have to solve the issue with the varying routes and  CSS classes that we might need for creating a new object and updating an existing one—in effect, we would need to duplicate forms to create and edit records. As you’ll see soon, Rails meets you more than halfway on that. Verdict, however you put it, the manual approach is nasty and lacks convenience.</p>

<h4>The Bad</h4>

<p>We could go down the following road which does not make perfect use of conventions in Rails. Heads up, don’t do it. It basically shows that you don’t handle the available tools to your advantage and you are duplicating the form for <code>new</code> and <code>edit</code> actions.</p>

<h6>some.html.erb</h6>

<pre><code class="erb">
&lt;%= form_for :agent,
             url: agents_path(@agent),
             html: {method: :post} do |form_object| %&gt;

  &lt;%= form_object.label      :name %&gt;
  &lt;%= form_object.text_field :name %&gt;

  &lt;%= form_object.label      :number %&gt;
  &lt;%= form_object.text_field :number %&gt;

  &lt;%= form_object.label      :licence_to_kill %&gt;
  &lt;%= form_object.check_box  :licence_to_kill %&gt;

  &lt;%= form_object.submit 'Create New Agent' %&gt;

&lt;% end %&gt;
</code></pre>

<p>What happens here is that the form builder carries the model you need for the form.</p>

<pre><code class="erb">
&lt;%= form_object.text_field :name %&gt;
</code></pre>

<p>Behind the scences, the line above get’s expanded into the following:</p>

<pre><code class="erb">
&lt;%= text_field :agent, :name %&gt;
</code></pre>

<p>The <code>form_for</code> method takes a couple of arguments:</p>

<ul>
<li>A symbol or a string for specifying the object</li>
<li>A <code>url</code> hash</li>
<li>A <code>html</code> hash.</li>
<li>A <code>namespace</code> hash</li>
</ul>


<p>The url hash is for specifing the routing options. That means that you can manually specify to which routing path you submit the form to—named routes come in handy with this. This style is called the “generic way” because you need to manually configure the <code>form_for</code> call. Why is this solution suboptimal? Because we want to keep business logic out of our Views and Controllers as much as we can. A side effect of that is that we need to change fewer parts when needed.</p>

<h6>HTML</h6>

<pre><code class="html">
&lt;form action="/agents" accept-charset="UTF-8" method="post"&gt;&lt;input name="utf8" type="hidden" value="&amp;#x2713;" /&gt;&lt;input type="hidden" name="authenticity_token" value="FUjXyB+EKkwElmRNt//pUmzYa95qy+cBQWcUYJtOHIFFBWJOvRnJlyIevSWWpIId6q0r6cKNGBgfc1e7LK+6jQ==" /&gt;

  &lt;label for="agent_name"&gt;Name&lt;/label&gt;
  &lt;input type="text" name="agent[name]" id="agent_name" /&gt;

  &lt;label for="agent_number"&gt;Number&lt;/label&gt;
  &lt;input type="text" name="agent[number]" id="agent_number" /&gt;

  &lt;label for="agent_licence_to_kill"&gt;Licence to kill&lt;/label&gt;
  &lt;input name="agent[licence_to_kill]" type="hidden" value="0" /&gt;&lt;input type="checkbox" value="1" name="agent[licence_to_kill]" id="agent_licence_to_kill" /&gt;

  &lt;input type="submit" name="commit" value="Create New Agent" /&gt;

&lt;/form&gt;
</code></pre>

<p>In case you missed it, this approach did not provide us with ids and classes for the <code>form</code> tag automatically. The ones for <code>input</code> tags however were generated for you. We’ll fix that in a minute. Just know what you can get for free and that you probably should use this to your advantage. If you need something different or an additional namespace, you can use the <code>html</code> hash or the <code>namespace</code> hash to specify things a bit more.</p>

<h6>some.html.erb</h6>

<pre><code class="erb">
&lt;%= form_for :agent,
             url: agents_path(@agent),
             html: {method: :post, class: 'create_agent', id: 'unique_agent'},
             namespace: 'mi6' do |form_object| %&gt;
</code></pre>

<h6>HTML</h6>

<pre><code class="html">
&lt;form class="create_agent" id="unique_agent" action="/agents" accept-charset="UTF-8" method="post"&gt;&lt;input name="utf8" type="hidden" value="&amp;#x2713;" /&gt;&lt;input type="hidden" name="authenticity_token" value="IAkMk58AJeTMbNHLf8wzYwf+seSpC8OfoHIJuu8M80FwRLkVPZ3GP+rkCKNel1gsgYvx0wFNPIb+ZkphWO1VTQ==" /&gt;

  &lt;label for="mi6_agent_name"&gt;Name&lt;/label&gt;
  &lt;input type="text" name="agent[name]" id="mi6_agent_name" /&gt;

  &lt;label for="mi6_agent_number"&gt;Number&lt;/label&gt;
  &lt;input type="text" name="agent[number]" id="mi6_agent_number" /&gt;

  &lt;label for="mi6_agent_licence_to_kill"&gt;Licence to kill&lt;/label&gt;
  &lt;input name="agent[licence_to_kill]" type="hidden" value="0" /&gt;&lt;input type="checkbox" value="1" name="agent[licence_to_kill]" id="mi6_agent_licence_to_kill" /&gt;

  &lt;input type="submit" name="commit" value="Create New Agent" /&gt;

&lt;/form&gt;
</code></pre>

<p>Not bad! Now the <code>form</code> tag has the specified class and id—whatever makes your blood flow—and the <code>input</code> tags are namespaced with <code>mi6</code>. Almost there.</p>

<h4>The Good</h4>

<p>This one is called the “resource-oriented style” and has the least amount of Ruby you need to write in your views. With that approach we want to rely on automated resource identification. Rails figures out which routes it needs based on the object itself. Not only that, it gives you a different HTML output for creating a new object or for editing an existing one. Behind the scenes, Rails just asks the object if it already exits and acts accordingly. Creating forms this way is a clever use of conventions and helps avoid duplication. One line and all the heavy lifting is done for you.</p>

<h6>some.html.erb</h6>

<pre><code class="erb">
&lt;%= form_for @agent do |form_object| %&gt;

  &lt;%= form_object.label      :name %&gt;
  &lt;%= form_object.text_field :name %&gt;

  &lt;%= form_object.label      :number %&gt;
  &lt;%= form_object.text_field :number %&gt;

  &lt;%= form_object.label      :licence_to_kill %&gt;
  &lt;%= form_object.check_box  :licence_to_kill %&gt;

  &lt;%= form_object.submit %&gt;

&lt;% end %&gt;
</code></pre>

<p>Much better, isn’t it? Now we get exactly what we need for both existing and new objects. Also, we didn’t need to add text to our submit button. Rails took care of that and also adapts to new or existing objects.</p>

<h6>HTML FOR NEW OBJECT</h6>

<pre><code class="html">
&lt;form class="new_agent" id="new_agent" action="/agents" accept-charset="UTF-8" method="post"&gt;&lt;input name="utf8" type="hidden" value="&amp;#x2713;" /&gt;&lt;input type="hidden" name="authenticity_token" value="4BwAH2OkTvD0hOPOO7NB6rT94PoENUI4MazyoY8RN7+wUbWZwTmtK9IMOqYa6CqlMoigzaxzvSFvuLF6OPCRsw==" /&gt;

  &lt;label for="agent_name"&gt;Name&lt;/label&gt;
  &lt;input type="text" name="agent[name]" id="agent_name" /&gt;

  &lt;label for="agent_number"&gt;Number&lt;/label&gt;
  &lt;input type="text" name="agent[number]" id="agent_number" /&gt;

  &lt;label for="agent_licence_to_kill"&gt;Licence to kill&lt;/label&gt;
  &lt;input name="agent[licence_to_kill]" type="hidden" value="0" /&gt;&lt;input type="checkbox" value="1" name="agent[licence_to_kill]" id="agent_licence_to_kill" /&gt;

  &lt;input type="submit" name="commit" value="Create Agent" /&gt;

&lt;/form&gt;
</code></pre>

<h6>HTML FOR EDITING OBJECTS</h6>

<pre><code class="html">&lt;form class="edit_agent" id="edit_agent_7" action="/agents/7" accept-charset="UTF-8" method="post"&gt;&lt;input name="utf8" type="hidden" value="&amp;#x2713;" /&gt;&lt;input type="hidden" name="authenticity_token" value="4BwAH2OkTvD0hOPOO7NB6rT94PoENUI4MazyoY8RN7+wUbWZwTmtK9IMOqYa6CqlMoigzaxzvSFvuLF6OPCRsw==" /&gt;

...
</code></pre>

<p>When editing objects, it is also reflected in the HTML output by adding the id to the form id and the route / action needed for updating a specific object.</p>

<p> A word about Rails magic. When people argue in exactly these situations that Rails is too magical for their taste, I often think that this could simply mean that they haven’t spent enough time learning the tools of their trade. Because once you take the time to master these tools, you’ll often understand not only why a simplification or an extraction was made but they also appear a lot more sober and straightforward.</p>

<h4>Attention!</h4>

<p>The code examples above used <code>form_object</code> as a block parameter. This is not recommended best practice but was done to remind you what this object represents and what gets yielded from <code>form_for</code>. Most people just use a plain <code>|f|</code> or <code>|form|</code>—which looks much nicer and concise. Btw, stuff like <code>label</code>, <code>text_field</code>, <code>check_box</code> and the likes are just helper methods that are called on the form builder object. There are a ton of them which cover pretty much any possible need you might encounter.</p>

<h6>some.html.erb</h6>

<pre><code class="erb">
&lt;%= form_for @agent do |f| %&gt;

  &lt;%= f.label      :name %&gt;
  &lt;%= f.text_field :name %&gt;

  &lt;%= f.label      :number %&gt;
  &lt;%= f.text_field :number %&gt;

  &lt;%= f.label      :licence_to_kill %&gt;
  &lt;%= f.check_box  :licence_to_kill %&gt;

  &lt;%= f.submit %&gt;

&lt;% end %&gt;
</code></pre>

<p>Concise and reads nice, right?</p>

<h3>Partials</h3>

<p>Collections are another thing we don’t want to be too verbose about. Rendering partials for individual objects of collections is so concise and straightforward—if done right—that I feel you have very little excuse not to make use of Rails’ conventions to reduce Ruby view code. Let’s turn things around with this one and start with an example that shows you how you are encouraged to approach this. Along they way, I’ll explain what you can leave out as well.</p>

<h4>The Good</h4>

<h6>app/views/agents/index.html.erb</h6>

<pre><code class="erb">
&lt;%= render @agents %&gt;
</code></pre>

<p>The <code>render</code> method is quite smart. The line above is all you need to write for iterating over a collection. If you need to change something in this view, it will be a very small change—and therefore a small cause of error. What happens here is that the framework is able to determine which partial it needs. Through the name of the object, it knows where to look for the partial—given that you adhere to the conventional naming of things. The way I see it, this is a good example that Rails is not trying to impress you with wizardry. The Rails team works hard to make your lives easier by cutting through repetitive red tape of sorts.</p>

<h6>app/views/agents/_agent.erb</h6>

<p>``` erb</p>

<h3>Agent name: <%= agent.name %></h3>


<h4>Licence to kill: <%= agent.licence_to_kill %></h4>


<h4>Number: <%= agent.number %></h4>


<h4>Gambler: <%= agent.gambler %></h4>


<h4>Womanizer: <%= agent.womanizer %></h4>


<pre><code>
The only other thing that is necessary to make this work is placing a partial template at the appropriate path in your objects’s directory and extract the attributes you need from the object. No need to write any loops on your own. Fast and easy, handy and pragmatic I’d say. This extraction was originally done because the name of the partial was most of the time the name of the iterated object anyway and so it was easy to create a convention that handles this common task more effectively.

#### The Bad

Ok, now that we know how to handle this, let’s look what you could do and should avoid. The example below is just a bad usage of Rails but I wouldn’t call it ugly this time.

###### app/views/agents/index.html.erb
</code></pre>

<p>&lt;% @agents.each do |agent| %>
  <h3>Agent name: &lt;%= agent.name %></h3>
  <h4>Licence to kill: &lt;%= agent.licence_to_kill %></h4>
  <h4>Number: &lt;%= agent.number %></h4>
  <h4>Gambler: &lt;%= agent.gambler %></h4>
  <h4>Womanizer: &lt;%= agent.womanizer %></h4>
&lt;% end %></p>

<pre><code>
You get the same result as above but it’s definitely more verbose. Iterating over the collection in the view is not necessary anymore. When you use ```render``` as above, the block parameter ```agent``` is implied and you can just use it without the ```each``` loop. So, stay away from code like this—it does not make you look particularly good (but nobody will collect your head for it either). It’s just not elegant and adds to the PHPitis.

### Extracting Helpers

The most obvious solution to clean up code from your views is avoiding to write any or extracting them intelligently. Let’s say we want to scramble the names of our agents in the index list. We should not put this code directly in our views. If we decide that the model is also not the appropriate layer to place this, then a custom helper in the ```app/helpers``` directory might be the right choice.

##### app/helpers/agents_helper.rb
</code></pre>

<p>module AgentsHelper
  def scramble(agent)
    agent.name.split(&lsquo;&rsquo;).shuffle.join
  end
end</p>

<pre><code>
By packaging this in a module inside the helpers directory we now have access to this method in our views. Please give specific helpers their own home and don’t put everything on ```ApplicationHelper``` (```app/helpers/application_helper.rb```) which is really meant for more “global” stuff.

Now I can access this little fellow in my partial template—or any view—for rendering my collection of agents. 

##### app/views/agents/_agent.erb 
</code></pre>

<h3>Agent name: <%= scramble(agent) %></h3>


<h4>Licence to kill: <%= agent.licence_to_kill %></h4>


<h4>Number: <%= agent.number %></h4>


<h4>Gambler: <%= agent.gambler %></h4>


<h4>Womanizer : <%= agent.womanizer %></h4>


<pre><code>
Your own custom helpers are a great way to keep your views clean and healthy. And as you have seen, it’s so quick and easy that there’s little excuse to be too lazy and not extract them for battling PHPitis.

## Conditional Content

The helper method ```content_for``` is a handy tool for extracting content that doesn’t really fit the bill for a partial but needs a bit of encapsulation. It’s a way to store a bit of markup that you can apply on a page per page basis—you yield it into the layout where needed. In size, it should be a lot smaller than partials or even layouts.

This technique can also save you the step to create your own method for it. Navigational menues or sidebars are often examples where this helper becomes useful. Let’s say you want to have a spot in your menu that is only for admins but don’t need to adjust the whole layout. Or you have pages where the sidebar is not needed. With ```content_for``` you inject what you need where you need it on a page per page basis. Duplication no more!

###### app/views/agents/index.html.erb
</code></pre>

<p>&lt;% content_for :double_o_navbar do %>
  <li>&lt;%= link_to &lsquo;Operations&rsquo;, operations_path %></li>
  <li>&lt;%= link_to &lsquo;Agents&rsquo;, agents_path %></li>
  <li>&lt;%= link_to &lsquo;Messages&rsquo;, messages_path %></li>
&lt;% end %></p>

<p>&lt;%= render @agents %></p>

<pre><code>
###### app/views/layouts/application.html.erb
</code></pre>

<p>&hellip;</p>

<p><body>
  <header>
    <ul class='navbar'>
      <li>&lt;%= link_to &lsquo;Home&rsquo;, root_path %></li>
      <li>&lt;%= link_to &lsquo;About&rsquo;, &lsquo;#&rsquo; %></li>
      &lt;%= yield :double_o_navbar %>
    </ul>
  </header></p>

<p>  &lt;%= yield %></p>

<p></body>
</html>
```</p>

<p>Aside from that fact that this <code>header</code> is a good candidate for extraction into a partial, look at the <code>yield :double_o_navbar</code> section. This is a yielding region that inserts code from a <code>content_for</code> block. It will only insert code if the symbol names match. Here we want only double-o agents to have access to certain links in the navbar. Everyone else sees just <code>Home</code> and <code>About</code>. Think about the special links an admin needs to see that should never face a public interface.</p>

<p>You can also use this helper to insert <code>id</code> or <code>class</code> attributes on HTML tags if needed. Every once in a while this comes in handy.</p>

<p>Another common use is populating the <code>&lt;title&gt;</code> of a page dynamically with a <code>content_for</code> block.</p>

<h6>app/views/layouts/application.html.erb</h6>

<pre><code class="erb">
&lt;title&gt;
  Spectre – &lt;%= yield(:title).presence || "Default" %&gt;
&lt;/title&gt;
</code></pre>

<h6>some.html.erb</h6>

<pre><code class="erb">
&lt;% content_for :title do %&gt;
  Some funky title
&lt;% end %&gt;
</code></pre>

<p>You just place the title you want in a <code>content_for</code> block and the application layout will insert it for you. You can get more clever with it but that should suffice for now. Should you have no need for a title or forget to add one then the logical <code>||</code> will kick in and yield a default of your choice. In the example above we need to check for the presence of a title or the default won’t work.</p>

<p>What you definitely don’t wanna do is create instance variables for that kinda thing. Single responsibilities, remember?</p>

<pre><code class="ruby">
def show
  @title = "Some page title"
end
</code></pre>

<p>One more thing, you can ask if pages have a <code>content_for</code> block.</p>

<h6>app/views/layouts/application.html.erb</h6>

<pre><code class="erb">
&lt;% if content_for?(:q_navbar) %&gt;
  &lt;%= yield :q_navbar %&gt;
&lt;% end %&gt;
</code></pre>

<p>This can help you avoid duplicating markup that is relevant to styling a page which adapts if elements are present on a page or not.</p>

<h2>Semantic Markup</h2>

<p>This is stuff you definitely want to avoid.</p>

<p>``` html</p>

<p><div class='container'>
  <div class='col-lg-6'>
    <div class='col-md-4 col-md-offset-2'></p>

<p>```</p>

<p>The markup above is from the <a href="http://getbootstrap.com">bootstrap</a> documentation and specifies how the columns are supposed to &lsquo;look'—information that has no semantic meaning and actually belongs into your stylesheets. That’s the stuff designers have nightmares about.</p>

<p>So what’s the deal with that? This is important because—besides the questionable naming of classes—unsemantic markup violates <strong>separation of concerns</strong>. Your markup should not be bothered with styling information, instead both should stand on their own and enable you to <strong>switch out styles effortlessly</strong>—without touching your HTML. It’s not as difficult as it might sound at first. It takes a bit of discipline though.</p>

<p>When you are able to keep that styling information out of your markup you have effectively achieved reducing PHPitis on another front—for designers an essential one! Also, the use of <strong>generic divs</strong> without inherent meaning is another example of poor markup. <strong>HTML5</strong> gives you lots of useful elements that convey more information to your <strong>future self</strong>, <strong>other developers and search engines</strong>. Naming is supposedly hard, but HTML5 provides you with lots of <strong>semantic elements</strong> that make your options much easier in that regard.</p>

<h2>Final Thoughts</h2>

<p>I hope you have seen that Rails Views don’t need much love to shine. Developers can be a bit snobby about the frontend layer. Dealing with Markup sometimes seems to be a little beneath them—writing HTML, DUH! Well, I shouldn’t throw any stones, but I came to appreciate a fine tuned, well honed presentation layer. It makes it much more fun to work with and when done right, much faster to make the inevitable changes. Parsing tons of Ruby code mixed with badly written markup is not a fun experience.</p>
]]></content>
  </entry>
  
</feed>
