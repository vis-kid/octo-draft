<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Css | Drafts Previewer]]></title>
  <link href="http://vis-kid.github.io/octo-draft/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://vis-kid.github.io/octo-draft/"/>
  <updated>2016-03-14T22:56:47+01:00</updated>
  <id>http://vis-kid.github.io/octo-draft/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bourbon Neat-Variables]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/10/01/Neat-Variables/"/>
    <updated>2015-10-01T05:29:10+02:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/10/01/Neat-Variables</id>
    <content type="html"><![CDATA[<p><img src="/images/Neat_01/Neat-pour.jpg"></p>

<p><a href="http://neat.bourbon.io/"><img src="/images/bourbon-neat/Bourbon-Neat-Logo.png" width="250" height="450"></a></p>

<p>In this last section about Bourbon Neat we’ll look at the various “built-in” Sass variables you have at your disposal. Its gonna be a short ride but knowing how to tweak your grids is important.</p>

<h4>Variables</h4>

<ul>
<li>default-layout-direction</li>
<li>visual-grid-opacity</li>
<li>border-box-sizing</li>
<li>visual-grid-index</li>
<li>disable-warnings</li>
<li>visual-grid-color</li>
<li>default-feature</li>
<li>grid-columns</li>
<li>max-width</li>
<li>visual-grid</li>
<li>column</li>
<li>gutter</li>
</ul>


<p>Before we start, I should remind you that most of the time your Neat variables are best placed in one central location like in your <strong>_grid-settings</strong> partial. In any case, to avoid any surprises, make sure to not forget to import these variables before you import Neat.</p>

<p>Sass:
<code>sass
@import "bourbon/bourbon"
@import "grid-settings"
@import "neat/neat"
</code></p>

<h2>Visualizing your grid</h2>

<p>Let’s start with something that you should be using from day one. Neat can show you a visual grid that makes it easier to visualize your designs and better spot opportunities for experimentation.</p>

<p>I’m definitely in the camp of people who advocate designing in the browser as soon as possible. No doubt, sometimes it is important so spend a little extra time in Sketch or whatever, but aiming to bridge the two faster is a reasonable ambition. Seeing the grid skelleton for your layout in the browser makes it a whole lot easier to leave other graphical design tools more and more behind.</p>

<ul>
<li><h3>visual-grid</h3></li>
</ul>


<p>By default, Neat sets <strong>$visual-grid</strong> to <strong>false</strong>. Just jump into <strong>_grid-settings</strong> and change it to <strong>true</strong>.</p>

<p>Sass:
<code>sass
$visual-grid: true
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/visual-grid-empty.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/PPWLQK">codepen example</a></p>

<p>The color you’ll see will be a bit different—I already tweaked that a bit—but it will show you the number of columns you have set via <strong>$grid-columns</strong>—all within your outer containers. In this case I kept the default which is 12 columns. In general, a 12 column grid offers you a lot of flexiblity and is a solid choice for beginners as well as for advanced designers.</p>

<ul>
<li><h3>visual-grid-index</h3></li>
</ul>


<p>If you already have some content which spans the full width of the outer container(s) on the page you might be surprised to see no effect of the <strong>$visual-grid</strong>. In case that happens, remember that the <strong>$visual-grid-index</strong> is set to <strong>back</strong> by default. Maybe not the best default ever, but no biggie either.</p>

<p>SCSS:
<code>scss
$visual-grid-index: back !default
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/visual-grid-index-back.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/MaJRpY">codepen example</a></p>

<p>If you want to see the visual grid displayed in front of the content on the page just make this little change:</p>

<p>Sass:
<code>sass
$visual-grid-index: front
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/visual-grid-index-front.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/RWKOyB">codepen example</a></p>

<ul>
<li><h3>visual-grid-color</h3></li>
</ul>


<p>If you’re unhappy with the default grid color you can change that of course. Obviously its a good idea to choose a color that has good contrast compared to your design. I like using plain old <strong>tomato</strong>—although for the examples here I decided differently since I already used it to highlight the containers.</p>

<p>Sass:
<code>sass
$visual-grid-color: black
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/visual-grid-color.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/PPWgXL">codepen example</a></p>

<ul>
<li><h3>visual-grid-opacity</h3></li>
</ul>


<p>If you’re unhappy with the default opacity of 40% you can overrule that too. I believe <strong>0.4</strong> is a good choice for a default but every project is different. Although its not the best use of this variable, let’s see how 100% looks in the same example.</p>

<p>Sass:
<code>sass
$visual-grid-opacity: 1
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/visual-grid-opacity-100.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/pjRmPe">codepen example</a></p>

<ul>
<li><h3>grid-columns</h3></li>
</ul>


<p>If you think the default 12-column grid gives you not the flexibility or structure you were looking for you can change the default via this variable globally. Doing this after you already designed your way through a layout in the browser might make you face some pain tough. Take it with a grain of salt— its just an educated warning since I haven’t been there before. I mean its probably nothing tragic but manual adjustments for individual rows / columns seem like a given.</p>

<p>Let’s go through a couple of reasonable examples:</p>

<p>Sass:
<code>sass
$grid-columns(6)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/grid-columns(6).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/PPpbOo">codepen example</a></p>

<p>Sass:
<code>sass
$grid-columns(16)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/grid-columns(16).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/NGpbyN">codepen example</a></p>

<p>Sass:
<code>sass
$grid-columns(4)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/grid-columns(4).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/QjpGmG">codepen example</a></p>

<ul>
<li><h3>column</h3></li>
</ul>


<p>For this one we’ll have to take a step back for a minute. Neat’s grid system is based on the Golden Ratio. If that is gobbledygook to you check out my articles about Bourbon mixins where I spent a little time on that. What is important here is that you can change the relative width of a single grid column via this variable. Let’s look under the hood.</p>

<p>SCSS:
<code>scss
$column: modular-scale(3, 1em, $golden) !default;
</code></p>

<p>Internally it uses the <strong>modular-scale</strong> function which I also described in an article about Bourbon’s various functions. Here it sets up the base value of <strong>1em</strong> and makes every column as wide as <strong>3</strong> increments / steps from that base value. Additionally it locks the scale of choice to the Golden Ratio via <strong>$golden</strong>.</p>

<p>I’ve never felt the need to tweak these things but if curiosity and some extra time for experimentation would hit me I’d start playing around with the various variables for modular scales that you have at your disposal in Bourbon. You can choose from 17 “scales” that come with the library—or make up your own of course.</p>

<p>SCSS
<code>scss
$golden:           1.618;
$minor-second:     1.067;
$major-second:     1.125;
$minor-third:      1.2;
$major-third:      1.25;
$perfect-fourth:   1.333;
$augmented-fourth: 1.414;
$perfect-fifth:    1.5;
$minor-sixth:      1.6;
$major-sixth:      1.667;
$minor-seventh:    1.778;
$major-seventh:    1.875;
$octave:           2;
$major-tenth:      2.5;
$major-eleventh:   2.667;
$major-twelfth:    3;
$double-octave:    4;
</code></p>

<h4>Attention!</h4>

<p>Make sure to import Bourbon first because the variables are defined there and not in Neat. Also, if you decide that you want to change the width of your column via a different variable for your modular scale you should not forget to change this unit in your gutters as well (more info in the next section about <strong>gutter</strong>).</p>

<p>Let’s compare the different modular scales for a default 12-column grid. Not all of them result in sensible choices but take a look and see if someting pops out that you like:</p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $golden)
$gutter: modular-scale(1, 1em, $golden)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(golden).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/ojZBgr">codepen example</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $minor-second)
$gutter: modular-scale(1, 1em, $minor-second)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(minor-second).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/NGpdbv">codepen examples</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $major-second)
$gutter: modular-scale(1, 1em, $major-second)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(major-second).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/yYMgzq">codepen example</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $minor-third)
$gutter: modular-scale(1, 1em, $minor-third)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(minor-third).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/yYMgPx">codepen examples</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $major-third)
$gutter: modular-scale(1, 1em, $major-third)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(major-third).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/WQpRdM">codepen example</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $perfect-fourth)
$gutter: modular-scale(1, 1em, $perfect-fourth)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(perfect-fourth).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/epvgzL">codepen example</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $augmented-fourth)
$gutter: modular-scale(1, 1em, $augmented-fourth)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(augmented-fourth).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/yYMgKR">codepen example</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $perfect-fifth)
$gutter: modular-scale(1, 1em, $perfect-fifth)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(perfect-fifth).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/WQpRyz">codepen examples</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $minor-sixth)
$gutter: modular-scale(1, 1em, $minor-sixth)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(minor-sixth).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/GpWrXm">codepen example</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $major-sixth)
$gutter: modular-scale(1, 1em, $major-sixth)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(major-sixth).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/Zbeyvm">codepen example</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $minor-seventh)
$gutter: modular-scale(1, 1em, $minor-seventh)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(minor-seventh).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/gamRvm">codepen example</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $major-seventh)
$gutter: modular-scale(1, 1em, $major-seventh)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(major-seventh).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/pjewaZ">codepen examples</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $octave)
$gutter: modular-scale(1, 1em, $octave)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(octave).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/EVWXQz">codepen example</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $major-tenth)
$gutter: modular-scale(1, 1em, $major-tenth)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(major-tenth).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/epvRMx">codepen example</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $major-eleventh)
$gutter: modular-scale(1, 1em, $major-eleventh)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(major-eleventh).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/JYWJvj">codepen example</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $major-twelfth)
$gutter: modular-scale(1, 1em, $major-twelfth)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(major-twelfth).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/gamRzW">codepen example</a></p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $double-octave)
$gutter: modular-scale(1, 1em, $double-octave)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/column(double-octave).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/EVWZPG">codepen example</a></p>

<p>I can’t believe I actually took screenshots of all scales. Guess I got curious after all because I planned on only showing you a couple. Maybe not a rabbit hole you wanna follow but hey, folks like to get clever with these things. Using the default Golden Ratio is an absolute solid choice for people who just wanna move on.</p>

<ul>
<li><h3>gutter</h3></li>
</ul>


<p>Kinda the same idea as with <strong>column</strong>. This ones sets the relative width of a single   gutter—the space between each column—in your grid. To create a coherent grid system that has the Golden Ratio baked into every aspect, by default, <strong>gutter</strong> also uses <strong>$golden</strong> to calculate the gutters.</p>

<p>SCSS:
<code>scss
$gutter: modular-scale(1, 1em, $golden) !default;
</code></p>

<p>For people new to the party, let me visualize this for you. All the <strong>tomato</strong> colored stuff are gutters:</p>

<p><img src="/images/bourbon-variables/gutter(golden).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/zvZypr">codepen example</a></p>

<h4>Attention!</h4>

<p>If you decide that you want to change the width of your gutter via a different variable for your modular scale you should not forget to change this unit for your columns as well.</p>

<p>Sass:
<code>sass
$column: modular-scale(3, 1em, $octave)
$gutter: modular-scale(1, 1em, $octave)
</code></p>

<h4>Screenshot:</h4>

<p><img src="/images/bourbon-variables/gutter(octave).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/EVWGEy">codepen example</a></p>

<ul>
<li><h3>max-width</h3></li>
</ul>


<p>This variable let’s you change the size of your outer containers that is used by the <strong>outer-container</strong> mixin. By default it is set to <strong>1088</strong> pixels which gets calculated to <strong>em</strong> out of the box.</p>

<h4>Screenshot with default max-width of <strong>1088px</strong>:</h4>

<p><img src="/images/bourbon-variables/max-width(1088).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/dYvwjV">codepen example</a></p>

<p>Sass:
<code>sass
$max-width: em(1200)
</code></p>

<h4>Screenshot with <strong>1200px</strong> max-width:</h4>

<p><img src="/images/bourbon-variables/max-width(1200).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/rOyoKx">codepen example</a></p>

<p>This variable is certainly handy since the “standards” for how wide web pages are supposed to span are changing rapidly and long gone are the 960px days. Through access to this variable you have one central place where you can determine how much space your content can maximally span.</p>

<ul>
<li><h3>default-feature</h3></li>
</ul>


<p>If you have gone through my previous articles you might remember that for media queries I really like the use of the <strong>media</strong> mixin from Neat combined with the additional convenient usage of the <strong>new-breakpoint</strong> function. I also mentioned that if you provide no <em>media feature</em> to your breakpoint pixel value it will default to <strong>min-width</strong>. Let me refresh your memeory:</p>

<p>Sass:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nv">$tablet</span><span class="o">:</span> <span class="nf">new-breakpoint</span><span class="p">(</span><span class="mi">800</span><span class="kt">px</span> <span class="mi">6</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.some-responsive-element</span>
</span><span class='line'>  <span class="nd">+media</span><span class="p">(</span><span class="n">tablet</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>CSS:
<code>css
@media screen and (min-width: 800px) {
  .some-responsive-element {
    ...
    ...
   }
</code></p>

<p>As you can see, providing no <em>media-feature</em> makes things super easy if want <strong>min-width</strong> for setting breakpoints. If that default is messing with your Zen when dealing with media queries you can change that default as well.</p>

<p>Sass:
<code>sass
$default-feature: max-width
</code></p>

<ul>
<li><h3>border-box-sizing</h3></li>
</ul>


<p>By default this is set to <strong>true</strong> and I guess a good reason would be in order to mess with this one.</p>

<ul>
<li><h3>default-layout-direction</h3></li>
</ul>


<p>Through this variable your layout uses the default orientation of <strong>LTR</strong>—left-to-right. Obviously this can have only one of two options—<strong>RTL</strong> being the second. I guess if you design something for cultures that digest content from the opposite direction, this one will make you love Neat even more.</p>

<ul>
<li><h3>disable-warnings</h3></li>
</ul>


<p>If excess deprication warnings are the sort of thing that sometimes make you want to hug their authors around the neck–unlike me of course—you can mute these messages by setting this variable to <strong>true</strong>.</p>

<p>Sass:</p>

<pre><code class="sass">$disable-warnings: true
</code></pre>

<h3>Final thoughts</h3>

<p>If you have gone through both modules about Bourbon and Neat and still don’t like the idea of using this framework for your projects I’d like it if you’d share your reasons and maybe even write about it. I’d love to hear reasonable opposing opinions or learn about better options to build lightweight semantic grids with Sass. I guess Neat is pretty hard to beat these days though. That being said, the thing that makes it so appealing to me, and that most likely will keep it relevant for quite some time, is that there isn’t much left that can be taken away to reduce it.</p>

<p>Btw, I just learned that thoughtbot recently announced that Bourbon and Neat are used in the new <a href="https://playbook.cio.gov/designstandards/">U.S. Web Design Standards</a>. Pretty darn cool!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bourbon Neat-Mixins 02]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/09/22/Neat-Bascis-02/"/>
    <updated>2015-09-22T05:29:10+02:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/09/22/Neat-Bascis-02</id>
    <content type="html"><![CDATA[<p><img src="/images/Neat_01/Neat-pour.jpg"></p>

<p><a href="http://neat.bourbon.io/"><img src="/images/bourbon-neat/Bourbon-Neat-Logo.png" width="250" height="450"></a></p>

<p>Now that you should have the basics under your belt, in the second article about Neat mixins I’ll dive a little deeper and explore the following function and mixins:</p>

<h4>Function</h4>

<ul>
<li>new-breakpoint</li>
</ul>


<h4>Mixins</h4>

<ul>
<li>reset-layout-direction</li>
<li>direction-context</li>
<li>display-context</li>
<li>reset-display</li>
<li>fill-parent</li>
<li>reset-all</li>
<li>media</li>
<li><p>row</p></li>
<li><h3>media</h3></li>
</ul>


<p>I assume you haven’t lived under a rock for the past couple of years and that you know about the importance of flexible designs that respond to the ever evolving landscape of screen sizes and types of devices. Bourbon Neat has your back and provides you with an elegant approach to manage media queries for your grids. Through the use of clever targeted media queries, your layout can be adapted to a wide range of devices without making a mess. Responsive design is here to stay and a responsible and sustainable use of media queries is king.</p>

<p>Something to avoid is what you could call query spagetthi—which basically is a tangled mess of media queries that becomes tricky to maintain lightening fast. So whatever you can do to keep these things neat and clean you should pay extra attention to I think. This mixin is no perfect antidote but definitly encourages a DRY approach to dealing with media queries sanely—especially when paired with the <strong>new-breakpoint</strong> function. How so?</p>

<p>You can write media query blocks that can take grid contexts. Say you have two elements that add up to <strong>12</strong> columns—as defined in <strong>$total-columns</strong> in your <strong>_grid-settings</strong> file. These elements span <strong>3</strong> and <strong>9</strong> columns respectively on desktop size screens which allow for <strong>1088px</strong> wide outer containers. For smaller devices / viewport sizes, just let the <strong>media</strong> (query) mixin know at what size the context of <strong>12</strong> columns overall needs to change to another number and adjust the size for the responsive elements within that new context accordingly. Boom!</p>

<p>Haml:
<code>haml
.container
  %aside 3 columns / 1 column
  %article 9 columns / 2 columns
</code></p>

<p>Sass:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nb">white</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.container</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>  <span class="na">margin-top</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">tomato</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">aside</span><span class="o">,</span> <span class="nt">article</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">aside</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="na">background-color</span><span class="o">:</span> <span class="ni">LightSkyBlue</span>
</span><span class='line'>    <span class="nd">+media</span><span class="p">(</span><span class="no">max-width</span> <span class="mi">700</span><span class="kt">px</span><span class="o">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">article</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'>    <span class="na">background-color</span><span class="o">:</span> <span class="nb">Olive</span>
</span><span class='line'>    <span class="nd">+media</span><span class="p">(</span><span class="no">max-width</span> <span class="mi">700</span><span class="kt">px</span><span class="o">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h5>Screenshot without media query:</h5>

<p><img src="/images/Neat_02/without-media-query.png"></p>

<h5>Screenshot with media query at 700px viewport size and 4 columns as grid context:</h5>

<p><img src="/images/Neat_02/with-media-query.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/wKzJXM">codepen example</a></p>

<p>I just provided the <strong>media</strong> mixin with a <a href="http://www.w3.org/TR/css3-mediaqueries/#media1">media feature</a> via <strong>max-width 700px</strong> and a new grid context of <strong>4</strong> columns for the <strong>$total-columns</strong> <strong>max-width</strong> of the element. Having established a new grid context for both the <strong>aside</strong> and <strong>article</strong> elements for the viewport size of <strong>700px</strong> max, I only needed to tell the elements how many columns they can now span within the new total of <strong>4</strong> columns.  I think this is pretty darn readable and easy to organize. It get’s even cooler once you reuse <em>media contexts</em> ( media query / grid context ) via the <strong>new-breakpoint</strong> function and save them to a Sass variable .</p>

<h4>Attention!</h4>

<p>If you provide this mixin with only a pixel value without any specific media feature</p>

<p>Sass:
<code>sass
.some-responsive-element
  +span-columns(8)
  +media(700px)
    +span-columns(4)
</code></p>

<p>then Neat is going to use <strong>$default-feature</strong> which is <strong>min-width</strong>. Also, providing a grid context is optional and defaults to whatever is set through <strong>$total-columns</strong> in your <strong>_grid-settings</strong> partial.</p>

<ul>
<li><h3>new-breakpoint</h3></li>
</ul>


<p>So you’re probably thinking about what’s up with the DRY approach I mentioned a couple of paragraphs earlier right? That’s the spirit!</p>

<p>I’d say this handy custom Sass function is the Robin to your <strong>media</strong> Batman and keeps you from repeating yourself over and over again. If you want to make your media queries a lot more readable and reuseable, I don’t see a good reason why you won’t be using this sidekick to fight media query crimes.</p>

<p>Put simply, all it does is save media contexts ( media query / grid context ) through variables and gives you the opportunity to reuse them at will in all your <strong>media</strong> mixins. In my book, that’s one hell of a useful extraction! Let’s take a look.</p>

<p>Sass:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nv">$tablet</span><span class="o">:</span> <span class="nf">new-breakpoint</span><span class="p">(</span><span class="no">min-width</span> <span class="mi">768</span><span class="kt">px</span> <span class="no">max-width</span> <span class="mi">1024</span><span class="kt">px</span> <span class="mi">4</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.some-responsive-element</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+media</span><span class="p">(</span><span class="nv">$tablet</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.some-other-responsive-element</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+media</span><span class="p">(</span><span class="nv">$tablet</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><a href="http://codepen.io/vis-kid/pen/merKVe">codepen example</a></p>

<p>Super readable right? To be extra sure we’re on the same page: You just provide all the media features you need—but no commas, colons, <strong>or</strong>, <strong>and</strong>—plus the number of columns for the new grid context and save it to a Sass variable. All that is left to do is feed your <strong>media</strong> mixins with the appropriate variable and DRY they are.</p>

<p>I hope you’ll appreciate how clean this reads and how easy it is to tweak your layouts for various breakpoints—all in one central place. Gone are the days where managing tons of layout related media queries could quickly get you in a fantasy fist fight with your former self.</p>

<ul>
<li><h3>row</h3></li>
</ul>


<h4>Basics</h4>

<p>I wanna take a little extra time to explore this one. If you’re not using tables very often in your designs—as you probably shouldn’t since we kissed the days of using tables for layout purposes goodbye—this one can be tricky to jump into right away. You have two main options for using this mixin: with the argument <strong>table</strong> or without any argument.</p>

<p>Sass:
<code>sass
.some-row-element
  +row
</code></p>

<p>Using row without the <strong>table</strong> argument, a <strong>clearfix</strong> is added and <strong>$display</strong> stays set to default which is <strong>block</strong>. Effectively that means that whatever comes after the designated element using <strong>row</strong> needs to start its own thing on a separare “row”.</p>

<p>Sass:
<code>sass
.some-table-row-element
  +row(table)
</code></p>

<p>On the other hand, using <strong>row(table)</strong>, you guessed it, makes this row part of a table layout. What happens under the hood, among other things, is that this mixin sets <code>display: table</code> and <code>table-layout: fixed</code>.</p>

<p>There is one more option you can provide this mixin with. You can pass an argument($direction with <strong>LTR</strong> or <strong>RTL</strong>) that changes the direction—<em>left-to-right</em> or vice versa—of your layout for that particular row.</p>

<p>Sass:
<code>sass
.some-row-element
  +row($direction: RTL)
</code></p>

<p>But let’s start at the beginning. The following dummy example has 16 <strong>img</strong> elements and the first four are nested under a <strong>.row</strong> container which uses the <strong>row</strong> mixin. Let’s see what happens if you leave off the <strong>table</strong> argument.</p>

<p>Haml:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nc">.container</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  .row
</span><span class='line'>    <span class="nt">%img</span>
</span><span class='line'>    <span class="nt">%img</span>
</span><span class='line'>    <span class="nt">%img</span>
</span><span class='line'>    <span class="nt">%img</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  %img
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  %img
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  %img
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Sass:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.container</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">tomato</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.row</span>
</span><span class='line'>  <span class="nd">+row</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">img</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">60</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">Olive</span>
</span></code></pre></td></tr></table></div></figure></p>

<h5>Screenshot:</h5>

<p><img src="/images/Neat_02/img-row-without-argument.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/ojYgMa">codepen example</a></p>

<p>As you can see, the browser treats the first four elements as part of one row and puts the following <strong>img</strong> elements on a separate row. The elements below the .row container are not bound to a particular row and just float downwards as long as they have space available to them.</p>

<p>Two <strong>.row</strong> containers result in the same trick, stacked on top of each other.</p>

<p>Haml:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nc">.container</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  .row
</span><span class='line'>    <span class="nt">%img</span>
</span><span class='line'>    <span class="nt">%img</span>
</span><span class='line'>    <span class="nt">%img</span>
</span><span class='line'>    <span class="nt">%img</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  .row
</span><span class='line'>    <span class="nt">%img</span>
</span><span class='line'>    <span class="nt">%img</span>
</span><span class='line'>    <span class="nt">%img</span>
</span><span class='line'>    <span class="nt">%img</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  %img
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  %img
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span></code></pre></td></tr></table></div></figure></p>

<h5>Screenshot:</h5>

<p><img src="/images/Neat_02/img-2-rows-without-argument.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/ZbBJjK">codepen example</a></p>

<p>Not too tricky I guess. Although I’m not sure how useful this would be because instinctively I’d rather use the <strong>omega</strong> mixin for such an occasion—but I might change my mind if I’d run against a wall of sorts with that approach. What seems pretty useless though is using <strong>row(table)</strong> here. You’d just get one very long column that stacks all 16 elements above each other. I’ll spare you the nasty screenshot but check out the <a href="http://codepen.io/vis-kid/pen/ZbBJqK">codepen example</a> if you’re curious.</p>

<h3>Using row without an argument on a table</h3>

<p>Above I wanted to show you the basic mechanics of this mixin, especially if you are new to the game. Now we’re approaching useful territory. Let’s play with an actual table:</p>

<p>If you haven’t fooled with tables before, I recommend firing up Google before you proceed. Below is a little survival guide for those who only need to refresh a couple of terms.</p>

<p>Here we have a <strong>table</strong> element that uses the <strong>thead</strong> tag which has one row that displays the various column names / headers via the <strong>th</strong> tag. Underneath you’ll find the <strong>tbody</strong> tag that houses the actual data for each table row (<strong>tr</strong>) via the <strong>td</strong> tag.</p>

<p>Haml:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nc">.container</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  %table&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;%thead
</span><span class='line'>  <span class="nt">%tr</span>
</span><span class='line'>    <span class="nt">%th</span> Username
</span><span class='line'>    <span class="nt">%th</span> User_ID
</span><span class='line'>    <span class="nt">%th</span> Favorite Pizza
</span><span class='line'>    <span class="nt">%th</span> Pet
</span><span class='line'>    <span class="nt">%th</span> Pet Name
</span><span class='line'>    <span class="nt">%th</span> Favorite Game
</span><span class='line'>
</span><span class='line'><span class="nt">%tbody</span>
</span><span class='line'>  <span class="nt">%tr</span>
</span><span class='line'>    <span class="nt">%td</span> Joe
</span><span class='line'>    <span class="nt">%td</span> 112233
</span><span class='line'>    <span class="nt">%td</span> Pepperoni
</span><span class='line'>    <span class="nt">%td</span> Cat
</span><span class='line'>    <span class="nt">%td</span> Gordon
</span><span class='line'>    <span class="nt">%td</span> Splinter Cell
</span><span class='line'>  <span class="nt">%tr</span>
</span><span class='line'>    <span class="nt">%td</span> Jane
</span><span class='line'>    <span class="nt">%td</span> 223311
</span><span class='line'>    <span class="nt">%td</span> Mushrooms
</span><span class='line'>    <span class="nt">%td</span> Dog
</span><span class='line'>    <span class="nt">%td</span> Fluffy
</span><span class='line'>    <span class="nt">%td</span> Metal Gear Solid V
</span><span class='line'>  <span class="nt">%tr</span>
</span><span class='line'>    <span class="nt">%td</span> Bob
</span><span class='line'>    <span class="nt">%td</span> 331122
</span><span class='line'>    <span class="nt">%td</span> Onions
</span><span class='line'>    <span class="nt">%td</span> Fish
</span><span class='line'>    <span class="nt">%td</span> Sharky
</span><span class='line'>    <span class="nt">%td</span> Little Big Planet 2
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>Sass:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;body
</span><span class='line'>  color: white
</span><span class='line'>  background-color: white&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;.container
</span><span class='line'>  +outer-container
</span><span class='line'>  background-color: tomato&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tr
</span><span class='line'>  +row()
</span><span class='line'>  text-align: center&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;th
</span><span class='line'>  padding:
</span><span class='line'>  top: 10px
</span><span class='line'>  bottom: 20px&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;td
</span><span class='line'>  height: 50px
</span><span class='line'>  background: Olive
</span><span class='line'>  padding-top: 2px
</span></code></pre></td></tr></table></div></figure>
This results in an uneven nasty table blob that only spans as far as the content in these table data cells go. Obviously not super useful and a pain if you want to manually fix this using a bunch of CSS rules to even things out.</p>

<p>Sreenshot:</p>

<p><img src="/images/Neat_02/row-without-table.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/avBzXK">codepen example</a></p>

<h3>Using row(table)</h3>

<p>There should be a simple solution to this right? Adding <strong>table</strong> as an argument and <code>display: table</code> and <code>table-layout: fixed</code> come to the rescue! Not too mention with a little topping of <strong>fill-parent</strong> under the hood. That’s it! That’s all you need to do for a nice table for your data—no need for an aspirin!</p>

<p>Sass:
<code>sass
tr
  +row(table)
  text-align: center
</code></p>

<h5>Screenshot</h5>

<p><img src="/images/Neat_02/row-with-table.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/rOWzGy">codepen example</a></p>

<h4>Attention!</h4>

<p>A fixed table-layout like that has the advantage of not only laying out the table faster, but the width of the columns is not dependent on the contents (their length) of the table cells. That basically means that you’ll get evenly laid out rows in your table grid that span over the width of the table container. Remove one table data cell (<strong>td</strong>) and you’ll see that the other elements will divide up the space in that row evenly. Booyakasha!</p>

<h5>Screenshot with irregular number of columns:</h5>

<p><img src="/images/Neat_02/table-with-varying-length-table-data.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/KdNXzq">codepen example</a></p>

<h3>Without row</h3>

<p>Let’s close with an example that shows the default behaviour of tables without using the <strong>row</strong> mixin at all. (With a little padding and stuff though)</p>

<p>Sass
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nb">white</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.container</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">tomato</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">tr</span>
</span><span class='line'>  <span class="na">text-align</span><span class="o">:</span> <span class="no">center</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">th</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span>
</span><span class='line'>  <span class="na">top</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">bottom</span><span class="o">:</span> <span class="mi">20</span><span class="kt">px</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">td</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">50</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">background</span><span class="o">:</span> <span class="nb">Olive</span>
</span><span class='line'>  <span class="na">padding-top</span><span class="o">:</span> <span class="mi">2</span><span class="kt">px</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Screenshot:</h4>

<p><img src="/images/Neat_02/table-without-row.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/bVBrXp">codepen example</a></p>

<p>Easy to see that cells for every column are spaced evenly but don’t use all the appropriated space that is available to them. They simply orient themselves on the longest data / content per column and adjust their cells to align themselves along these lines.</p>

<p>Apologies for being overly verbose about <strong>row</strong> but I hope this section made any headaches you might have with tables / rows a little less likely.</p>

<ul>
<li><h3>fill-parent</h3></li>
</ul>


<p>Neat offers you an easy solution if you want some element to quickly fill its parent by spanning the same number of columns. You don’t have to provide any arguments. This mixin is nothing fancy but might come in handy when you deal with media queries or tables.</p>

<h4>Attention!</h4>

<p>Using <strong>span-columns(12)</strong> instead of <strong>fill-parent</strong> to span the whole width of an outer-container for example would not be the right approach in such a case—it would just add unnecessary baggage.</p>

<p>Haml:
<code>haml
.container
  %aside Aside 3 columns | fill-parent
  %article Article 5 columns | fill-parent
</code></p>

<p>Sass:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nb">white</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.container</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>  <span class="na">margin-top</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">tomato</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">aside</span><span class="o">,</span> <span class="nt">article</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">aside</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+fill-parent</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">LightSkyBlue</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">article</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+fill-parent</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">Olive</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><a href="http://codepen.io/vis-kid/pen/Kdgebx">codepen example</a></p>

<p>Let’s look at a couple of screenshots for comparison:</p>

<h5>Screenshot without <strong>fill-parent</strong>:</h5>

<p><img src="/images/Neat_02/without-fill-parent.png"></p>

<h5>Screenshot with only one element that uses <strong>fill-parent</strong>:</h5>

<p><img src="/images/Neat_02/single-fill-parent.png"></p>

<h5>Screenshot with both elements using <strong>fill-parent</strong>:</h5>

<p><img src="/images/Neat_02/both-fill-parent.png"></p>

<p>Just wanted to show you that elements using <strong>fill-parent</strong> ignore other elements in the same row and aim to span the full width of its parent without considering its neighbors. I guess this one is straightforward enough, let’s move on!</p>

<ul>
<li><h3>direction-context</h3></li>
</ul>


<p>Every element in your Neat grid has a <strong>$default-layout-direction</strong> which is set to <strong>LTR</strong> (left-to-right) in <strong>settings/_grid.scss</strong>. This simply means that behind the scenes Neat is always using a <strong>direction-context</strong> with <strong>left-to-right</strong>. It is an obivious decision of course since most cultures are used to digest content from left to right.</p>

<p>Under the hood, this mixin does nothing else than change the float direction of the applied element. What is neat is that within some directional context, let’s say <strong>left-to-right</strong>, you can gather a bunch of grid elements and change their direction to <strong>right-to-left</strong> all at once under one code block. Again, this solution makes things mostly more compact and readable for yourself as well as easier to understand / navigate for someone who’s not that familiar with a certain project.</p>

<p>Haml:
<code>haml
.container
  %aside 3 columns
  %article 9 columns
</code></p>

<p>Sass:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nb">white</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.container</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>  <span class="na">margin-top</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">tomato</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">aside</span><span class="o">,</span> <span class="nt">article</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;+</span><span class="nt">direction-context</span><span class="o">(</span><span class="nt">right-to-left</span><span class="o">)</span>
</span><span class='line'>  <span class="nt">aside</span>
</span><span class='line'>    <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="na">background-color</span><span class="o">:</span> <span class="ni">LightSkyBlue</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span>  <span class="nt">article</span>
</span><span class='line'>    <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'>    <span class="na">background-color</span><span class="o">:</span> <span class="nb">Olive</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><a href="http://codepen.io/vis-kid/pen/OyRKPq">codepen example</a></p>

<h5>Screenshot with <strong>direction-context(right-to-left)</strong>:</h5>

<p><img src="/images/Neat_02/with-direction-context.png"></p>

<h5>Screenshot “without” <strong>direction-context</strong>:</h5>

<p><img src="/images/Neat_02/without-direction-context.png"></p>

<p>Just for the heck of it, here’s another example. Nothing new here for now—just the columns are of equal size now and also flow from <strong>right-to-left</strong>.</p>

<p>Haml:
<code>haml
.container
  %aside 3 columns
  %article 3 columns
</code></p>

<p>Sass:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nb">white</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.container</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>  <span class="na">margin-top</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">tomato</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">aside</span><span class="o">,</span> <span class="nt">article</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;+</span><span class="nt">direction-context</span><span class="o">(</span><span class="nt">right-to-left</span><span class="o">)</span>
</span><span class='line'>  <span class="nt">aside</span>
</span><span class='line'>    <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="na">background-color</span><span class="o">:</span> <span class="ni">LightSkyBlue</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span>  <span class="nt">article</span>
</span><span class='line'>    <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="na">background-color</span><span class="o">:</span> <span class="nb">Olive</span>
</span></code></pre></td></tr></table></div></figure></p>

<h5>Screenshot:</h5>

<p><img src="/images/Neat_02/3-column-elements-with-direction-context-rtl.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/ZbpgWp">codepen example</a></p>

<p>The following little tweak only has one of these 3-column elements use the mixin and therefore both float on the opposite side of the container. Nothing too magic, but might be handy to have in your bag of tricks. Over time, not needing to fiddle around with floats on every element manually because you can do it on a high level that extracts the details is not small potatoes. Et voilà!</p>

<p>Sass:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nb">white</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.container</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>  <span class="na">margin-top</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">tomato</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">aside</span><span class="o">,</span> <span class="nt">article</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">aside</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">LightSkyBlue</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;+</span><span class="nt">direction-context</span><span class="o">(</span><span class="nt">right-to-left</span><span class="o">)</span>
</span><span class='line'>  <span class="nt">article</span>
</span><span class='line'>    <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="na">background-color</span><span class="o">:</span> <span class="nb">Olive</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/Neat_02/one-3-column-element-with-direction-context-rtl.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/yYamVJ">codepen example</a></p>

<ul>
<li><h3>reset-layout-direction</h3></li>
</ul>


<p>Not much to say about this one. You’ve changed the layout direction for whatever reason and want to switch back to the <strong>$default-layout-direction</strong> (<strong>left-to-right</strong>)? Here you go, the default context is restored! No argument needed. When might this be useful? Good question! The documentation says mostly when you need to change direction in a single row. I personally wouldn’t bother too much. First of all it’s gonna be deprecated in favor of a <strong>direction</strong> mixin anyway and also it gave me a surprising headache when I wanted to make it work with media queries.</p>

<ul>
<li><h3>display-context</h3></li>
</ul>


<p>To create a code block that changes the display properties used by mixins within itself you have two options you can pass to this mixin: <strong>block</strong> and <strong>table</strong>. The first one is obvious of course and <strong>table</strong> adds <code>display: table-cell</code> for you. <strong>table-cell</strong> let’s an element behave like a <strong>&lt;td></strong> element.</p>

<p>Sass:
<code>sass
+display-context(table)
  .some-cell {
    +span-columns(9)
  .some-other-cell
    +span-columns(3)
</code></p>

<ul>
<li><h3>reset-display</h3></li>
</ul>


<p>Let’s say you have changed the active display to <strong>table</strong> like in the example above, you can easily switch back to <strong>block</strong> through this mixin. Takes no argument as well. The documentation says it’s most useful if applied to single rows that changed their display values.</p>

<p>Sass:
<code>sass
+display-context(table)
  .some-cell {
    +span-columns(9)
  .some-other-cell
    +span-columns(3)
  +media(700px)
    .some-cell, .some-other-cell
      +reset-display
</code></p>

<ul>
<li><h3>reset-all</h3></li>
</ul>


<p>If you want to combine <strong>reset-display</strong> and <strong>reset-layout-direction</strong> in one go, that’s what you’ll get—no arguments required. Let’s say one some row you changed the display to <strong>table</strong> and the <strong>$default-layout-direction</strong> to <strong>RTL</strong> and want to switch back.</p>

<p>Sass:
<code>sass
.some-element
  +row(table, RTL)
  +media(700px)
    +reset-all
</code></p>

<h3>Final thoughts</h3>

<p>Well, that was a long one. Thanks for making it through and I hope it was an interesting journey through Neat mixin land. There is one more thing to discuss though, namely all the variables that you have at your disposal to tweak the framework for your needs. The next article is a shorter one but then the Neat module should be complete for now. Thanks for taking the time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bourbon Neat-Mixins 01]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/09/15/Neat-Bascis/"/>
    <updated>2015-09-15T05:29:10+02:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/09/15/Neat-Bascis</id>
    <content type="html"><![CDATA[<p><img src="/images/Neat_01/Neat-pour.jpg"></p>

<p><a href="http://neat.bourbon.io/"><img src="/images/bourbon-neat/Bourbon-Neat-Logo.png" width="250" height="450"></a></p>

<p>I assume you have taken a look at my previous intro article about Neat. So without further ado, let me pour you your first sip of Bourbon Neat. In this piece I’ll take a newbie-friendly look at the following function, mixins and variables:</p>

<h4>Function</h4>

<ul>
<li>new-breakpoint</li>
</ul>


<h4>Mixins</h4>

<ul>
<li>shift-in-context</li>
<li>outer-container</li>
<li>span-columns</li>
<li>media</li>
<li>omega</li>
<li>shift</li>
<li>pad</li>
</ul>


<h4>Variables</h4>

<ul>
<li>$visual-grid-opacity</li>
<li>$visual-grid-index</li>
<li>$visual-grid-color</li>
<li>$grid-columns</li>
<li>$max-width</li>
<li>$visual-grid</li>
</ul>


<h2>Mixins</h2>

<ul>
<li><h3>outer-container</h3></li>
</ul>


<p>When you make an element the outer container, Neat automatically centers it in the viewport (by adding <strong>margin-left: auto</strong> / <strong>margin-right: auto</strong>), clears the floats and applies the specified <strong>$max-width</strong>. It is an optional mixin (recommended though) and you can have multiple outer container elements on a single page. The one thing you can’t do is nest them.</p>

<p>The outer container holds your layout grid. Within it, your grid can span as many columns across as specified in your <strong>grid-settings</strong> file via the <strong>$grid-columns</strong> variable (defaults to 12 columns). That means all the elements in a row have to add up to the total number of columns specified there.</p>

<p>In the dummy example below, you’ll see that the <strong>container</strong> element wraps a couple of <strong>aside</strong> and <strong>article</strong> tags. They span 3 and 9 columns respectively and simply add up to 12 columns as specified in my settings. If I’d go over that number of columns the layout would certainly break. Think of the <strong>outer-container</strong> mixin as the most likey prerequisite for adding grid layouts within container elements.</p>

<p>Haml:</p>

<pre><code class="haml">.container
  %aside Aside
  %article Article

  %aside Aside
  %article Article

  %aside Aside
  %article Article
</code></pre>

<p>Sass:</p>

<pre><code class="sass">
body
  background-color: white

.container
  +outer-container
  background-color: tomato

aside, article
  margin-bottom: 5px
  height: 200px

aside
  +span-columns(3)
  background-color: LightSkyBlue 

article
  +span-columns(9)
  +omega
  background-color: Olive
</code></pre>

<p>The background colors are supposed to make it easier to see how the pieces fit together. You don’t need to concern yourself too much about the <strong>span-columns</strong> and <strong>omega</strong> mixins in this example for now. After a couple of paragraphs they will be crystal clear to you.</p>

<h4>Screenshot</h4>

<p><img src="/images/Neat_01/outer-container.png"></p>

<p>Here is also a codepen for playing around with it:
<a href="http://codepen.io/vis-kid/pen/xwZJOP">codepen example</a></p>

<p>In your settings file you can also specify a <strong>$max-width</strong> Sass variable that defines the maximum width that the content of your page should span. For example, Neat comes with a easily changeable <strong>$max-width</strong> setting of 1088px (converted to em) out of the box. That setting basically specifies the width of your outer container elements.</p>

<p>There is also the option to provide this mixin with an argument for a <strong>$local-max-width</strong> if you want a certain container element to have a different <strong>max-width</strong> than the global one set in <strong>grid-settings</strong>. This overwrites locally the default <strong>max-width</strong> from your settings file. You can provide <em>pixel</em>, <em>em</em> or <em>percentage</em> arguments. The columns of your grid inside that container adjust their width automatically but the number of columns stays the same.</p>

<p>Sass:
<code>sass
.container
  +outer-container(800px)
  background-color: tomato
</code>
or</p>

<pre><code class="sass">.container
  +outer-container(80%)
  background-color: tomato
</code></pre>

<p><a href="http://codepen.io/vis-kid/pen/vNGOqj">codepen example</a></p>

<ul>
<li><h3>span-columns</h3></li>
</ul>


<p>Just in case some of you are new to designing with grids, you should maybe look into this excellent book by <a href="http://www.subtraction.com/2010/11/05/i-wrote-a-book/">Khoi Vinh</a>. I highly recommend it. One concept that you need to understand right away though is that you build up your grid designs through a series of columns that span across the page.</p>

<p>The basic usage of this is super straightforward in this framework. You just pick an element and tell it how many columns it should span within the total number of <strong>$grid-columns</strong>. Let me demonstrate the basics.</p>

<p>Haml:</p>

<pre><code class="haml">.container
  %aside.first  First: 2 columns
  %article.second  Second: 10 columns

  %aside.third  Third: 4 columns
  %article.fourth  Fourth: 8 columns

  %aside.fifth  Fifth: 6columns
  %article.sixth  Sixth: 6 columns

  %aside.seventh  Seventh: 8 columns
  %article.eighth  Eighth: 4 columns

  %aside.ninth  Ninth: 10 columns
  %article.tenth  Tenth: 2 columns
</code></pre>

<p>Sass:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nb">white</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.container</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">tomato</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">aside</span><span class="o">,</span> <span class="nt">article</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">article</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">Olive</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">aside</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">LightSkyBlue</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.first</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="nc">.third</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="nc">.fifth</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="nc">.seventh</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="nc">.ninth</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.second</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="nc">.fourth</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="nc">.sixth</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="nc">.eighth</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="nc">.tenth</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.second</span><span class="o">,</span> <span class="nc">.fourth</span><span class="o">,</span> <span class="nc">.sixth</span><span class="o">,</span> <span class="nc">.eighth</span><span class="o">,</span> <span class="nc">.tenth</span>
</span><span class='line'>  <span class="nd">+omega</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Screenshot</h4>

<p><img src="/images/Neat_01/span-columns.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/Mayorb">codepen example</a></p>

<p>Of course such an example is just for show and makes little practical sense . As you can see, every row consists of one blue <strong>aside</strong> on the left and one green <strong>article</strong> element on the right. The layout doesn’t break because within the outer container element their total number of columns add up to 12 (as defined in <strong>$grid-columns</strong>) evenly.</p>

<p>The coolest part is that there is no need to add any styling information to your markup—since this is related to your presentation layer, you only add the info how your grid is composed of to your Sass files. Cleanly separated concerns. SWEET! Every sane designer that touches your work after you will love you for not polluting the content with styling information. Your future self anyway!</p>

<p>An added bonus that comes for free is that you can name classes in your markup anyway you want / need. Nobody makes these decisions for you which is a blessing without any disguise. Yes naming is hard, yadda yadda yadda, but its even trickier if somebody unrelated makes these decisions for you.</p>

<h3>Nesting columns</h3>

<p>Sass:
<code>sass
.some-parent-element
  +span-columns(10)
  .some-nested-element
    +span-columns(5 of 10)
</code></p>

<p>Of course, from time to time it might come in handy to quickly nest grid elements within another. Say you have a wide element that spans for 10 columns and should incorporate two smaller elements spanning 5 columns each. Easy! All you have to provide the nested elements with is the size of the parent column as an argument to the <strong>span-columns</strong> mixin. The nested elements can of course only add up to the number of columns of the parent tops. That’s it! Let’s look at a more concrete example.</p>

<p>Haml:
<code>haml
.container
  %aside.first First: 2 columns
  %article.second
    %article.third Third: 5 nested columns
    %article.fourth Fourth: 5 nested  columns
</code></p>

<p>Sass:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&amp;ldquo;bourbon&amp;rdquo;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&amp;ldquo;neat&amp;rdquo;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">body</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nb">white</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.container</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">tomato</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span>
</span><span class='line'>    <span class="na">top</span><span class="o">:</span> <span class="mi">15</span><span class="kt">px</span>
</span><span class='line'>    <span class="na">bottom</span><span class="o">:</span> <span class="mi">15</span><span class="kt">px</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">aside</span><span class="o">,</span> <span class="nt">article</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">article</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">Olive</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">aside</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">LightSkyBlue</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.first</span><span class="o">,</span> <span class="nc">.second</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">250</span><span class="kt">px</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.second</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.third</span><span class="o">,</span> <span class="nc">.fourth</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">5</span> <span class="n">of</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nf">darken</span><span class="p">(</span><span class="nb">Olive</span><span class="o">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>  <span class="na">margin-top</span><span class="o">:</span> <span class="mi">25</span><span class="kt">px</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.first</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="na">padding-top</span><span class="o">:</span> <span class="mi">25</span><span class="kt">px</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Screenshot</h4>

<p><img src="/images/Neat_01/span-columns-nested.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/VvaWBV">codepen example</a></p>

<ul>
<li><h3>omega</h3></li>
</ul>


<p>Another important concept for newbies playing with grids is the gutter. It’s just the margin on the right between grid elements and get’s automatically created for every grid element in a container—except for the last! Gutters also scale responsively if you resize the browser window. The example below clearly demonstrates this space beween grid elements. The gutter is signified by the tomato-colored background which comes through from the outer container.</p>

<h4>Screenshot</h4>

<p><img src="/images/Neat_01/gutters.png"></p>

<p>Haml:
<code>haml
.container
  .first  1 column
  .second 2 columns
  .third  3 columns
  .fourth 3 columns
  .fifth  2 columns
  .sixth  1 column
</code></p>

<p>Sass:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nb">white</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.container</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">tomato</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.first</span><span class="o">,</span> <span class="nc">.second</span><span class="o">,</span> <span class="nc">.third</span><span class="o">,</span> <span class="nc">.fourth</span><span class="o">,</span> <span class="nc">.fifth</span><span class="o">,</span> <span class="nc">.sixth</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">Olive</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.first</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.second</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.third</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.fourth</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.fifth</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.sixth</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><a href="http://codepen.io/vis-kid/pen/avNPjX">codepen example</a></p>

<p>Easy-peasy right? But guess what happens if we just double the columns by duplicating the row right beneath it?</p>

<h4>Screenshot</h4>

<p><img src="/images/Neat_01/messy-columns-without-omega.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/BoKvER">codepen example</a></p>

<p>Pretty messy huh? So what happened here? Because the 6th element in the first row is not the last element anymore, it also get’s a right gutter (margin) by default. Let me be very clear on this—to achieve a cleanly aligned layout, the last element in a container has it’s gutter removed by default. Because of the added gutter on the sixth element, the width of all elements in the first row now exceed the <strong>total-width</strong> your number of <strong>total-columns</strong> can span per row and your grid simply breaks.</p>

<p>Nothing too tragic though and the fix is easy. Just find the element that needs that automatically added gutter to the right removed and apply the <strong>omega</strong> mixin there. Boom, that easy!</p>

<p>Haml:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.container</span>
</span><span class='line'>  <span class="na">.first</span><span class="err">  </span><span class="na">1st</span><span class="o">:</span> <span class="mi">1</span> <span class="n">column</span>
</span><span class='line'>  <span class="na">.second</span><span class="err"> </span><span class="na">2nd</span><span class="o">:</span> <span class="mi">2</span> <span class="n">columns</span>
</span><span class='line'>  <span class="na">.third</span><span class="err">  </span><span class="na">3rd</span><span class="o">:</span> <span class="mi">3</span> <span class="n">columns</span>
</span><span class='line'>  <span class="na">.fourth</span><span class="err"> </span><span class="na">4th</span><span class="o">:</span> <span class="mi">3</span> <span class="n">columns</span>
</span><span class='line'>  <span class="na">.fifth</span><span class="err">  </span><span class="na">5th</span><span class="o">:</span> <span class="mi">2</span> <span class="n">columns</span>
</span><span class='line'>  <span class="na">.sixth</span><span class="err">  </span><span class="na">6th</span><span class="o">:</span> <span class="mi">1</span> <span class="n">column</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;</span><span class="err">  </span><span class="na">.first</span><span class="err">  </span><span class="na">1st</span><span class="o">:</span> <span class="mi">1</span> <span class="n">column</span>
</span><span class='line'>  <span class="na">.second</span><span class="err"> </span><span class="na">2nd</span><span class="o">:</span> <span class="mi">2</span> <span class="n">columns</span>
</span><span class='line'>  <span class="na">.third</span><span class="err">  </span><span class="na">3rd</span><span class="o">:</span> <span class="mi">3</span> <span class="n">columns</span>
</span><span class='line'>  <span class="na">.fourth</span><span class="err"> </span><span class="na">4th</span><span class="o">:</span> <span class="mi">3</span> <span class="n">columns</span>
</span><span class='line'>  <span class="na">.fifth</span><span class="err">  </span><span class="na">5th</span><span class="o">:</span> <span class="mi">2</span> <span class="n">columns</span>
</span><span class='line'>  <span class="na">.sixth</span><span class="err">  </span><span class="na">6th</span><span class="o">:</span> <span class="mi">1</span> <span class="n">column</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Sass:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&amp;ldquo;bourbon&amp;rdquo;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&amp;ldquo;neat&amp;rdquo;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">body</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nb">white</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.container</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">tomato</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.first</span><span class="o">,</span> <span class="nc">.second</span><span class="o">,</span> <span class="nc">.third</span><span class="o">,</span> <span class="nc">.fourth</span><span class="o">,</span> <span class="nc">.fifth</span><span class="o">,</span> <span class="nc">.sixth</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">Olive</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.first</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.second</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.third</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.fourth</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.fifth</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.sixth</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+omega</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As you can see, I only added an <strong>omega</strong> to the <strong>.sixth</strong> class but it made all the difference. Every element falls into place nicely and none of the rows exceed their <strong>total-width</strong>.</p>

<p><img src="/images/Neat_01/messy-columns-with-omega.png"></p>

<p><a href="http://codepen.io/vis-kid/pen/BoKMow">codepen example</a></p>

<p>Let’s take this one little step further. Say you have a couple of rows that should display images of the same size evenly without breaking the grid. All we need is a couple of elements that span the same width, here <strong>span-columns(2)</strong>, and place them in a couple of rows. The magic happens with the arguement you supply the <strong>omega</strong> with:</p>

<pre><code class="sass">img
  +omega(6n)
</code></pre>

<p>So every sixth <strong>img</strong> element will have it’s right gutter removed and therefore evenly fits six 2-column elements into the 12 columns of the outer container. Neat!</p>

<p>Haml:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nc">.container</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  %img
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  %img
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>
</span><span class='line'>  <span class="nt">%img</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>Sass:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;body
</span><span class='line'>  color: white
</span><span class='line'>  background-color: white&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;.container
</span><span class='line'>  +outer-container
</span><span class='line'>  background-color: tomato&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;img
</span><span class='line'>  +span-columns(2)
</span><span class='line'>  +omega(6n)
</span><span class='line'>  height: 200px
</span><span class='line'>  margin-bottom: 5px
</span><span class='line'>  background-color: Olive
</span></code></pre></td></tr></table></div></figure></p>

<h4>Screenshot</h4>

<p><img src="/images/Neat_01/omega(6n).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/NGNoXB">codepen example</a></p>

<p>You want only 4 elements per row? No problem! Just reduce the argument for <strong>omega</strong> to <strong>4n</strong>. This will come in handy in the next article when we get to responsive grids and how you can change your layout through media queries.</p>

<p>Sass:
<code>sass
img
  +omega(4n)
</code></p>

<p><img src="/images/Neat_01/omega(4n).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/meEbdr">codepen example</a></p>

<p>I enrourage you to play around with this example via the provided codepen and get a feel for it. There is no magic here, but if you need a bit more time to wrap your head around, mess a bit with the arguments of the omega and I have no doubt it will become crystal clear to you in no time.</p>

<h4>Attention!</h4>

<p>Last words of wisdom: In some cases it seems to matter in which order you supply the <strong>span-columns</strong> and <strong>omega</strong> mixins to the elements. My advice is to always use <strong>span-columns</strong> first to avoid unexpected behaviour.</p>

<ul>
<li><h3>shift</h3></li>
</ul>


<p>This one should be quick. If you want to adjust an element by moving it horizontally to the left or right, you simply apply the <strong>shift</strong> mixin and provide it with the number of columns it should move. You can use integers or floating point numbers.</p>

<p>Sass:
<code>sass
.some-element-that-needs-adjusting
  +shift(n)
</code></p>

<p>Provide a positive number (unitless) of columns and the element moves to the right and vice versa. Behind the scenes, Neat simply increases or decreases the percentage values of <strong>margin-left</strong> on the element. Little sidenote, if you use <strong>shift</strong> without any argument, it will default to <strong>shift(1)</strong>.</p>

<p>Screenshot without <strong>shift</strong>:</p>

<p><img src="/images/Neat_01/without-shift.png"></p>

<p>Screenshot with <strong>shift(1)</strong>:</p>

<p><img src="/images/Neat_01/with-shift(1).png"></p>

<p>Screenshot with <strong>shift(-1.5)</strong>:</p>

<p><img src="/images/Neat_01/with-shift(-1.5).png"></p>

<p><a href="http://codepen.io/vis-kid/pen/XmKrmQ">codepen example</a></p>

<ul>
<li><h3>shift-in-context</h3></li>
</ul>


<p>Same idea as shift (it uses <strong>shift-in-context</strong> under the hood btw) but made for grid elements that are nested I guess. Played around with it a little bit in a dummy example that had nested grids but achieved the same results using only <strong>shift</strong>.</p>

<ul>
<li><h3>pad</h3></li>
</ul>


<p>I don’t think I need to go into any specifics how this little padding fella works. It’s a little helper to clean  up your stylesheets and to provide you with the default gutter width if you provide the mixin with <strong>default</strong> as an argument. Nothing too fancy, but I thought I mentioned it to complete your options for adjusting the spacing of your grids.</p>

<p>Sass:
<code>
.some-element-that-needs-padding
  +pad(10px 20px 30px default)
</code></p>

<p>Here you go, all you need to know to get started for playing with Neat grids. I tried to provide you with a solid basis that enables you to build any grid you need—however complex you like. Neat is one of my favorite tools out there and I hope I could show you why this lightweight project deserves a lot of respect.</p>

<p>My next article will cover another round of Neat mixins and also explain how you can use media queries and breakpoints to adjust your grids for changing viewport sizes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bourbon Neat: Semantically Responsible Responsive Grids]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/09/09/bourbon-neat-semantic-responsive-grids/"/>
    <updated>2015-09-09T05:29:10+02:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/09/09/bourbon-neat-semantic-responsive-grids</id>
    <content type="html"><![CDATA[<p><img src="/images/bourbon-neat/bourbon-neat.jpg" width="450" height="260" title="" ></p>

<p><a href="http://neat.bourbon.io/"><img src="/images/bourbon-neat/Bourbon-Neat-Logo.png" width="250" height="450"></a></p>

<h2>Welcome to your new favorite tool</h2>

<p>Bourbon Neat was conceived by <a href="https://twitter.com/kaishin">Reda Lemeden</a> and is part of the fantastic <a href="http://bourbon.io/">Bourbon</a> suite. Its basically a lightweight responsive grid framework that was built on top of Sass and Bourbon. If semantic markup is your thing and presentation classes make you mad, this smart library will brighten your day. Btw, the project is supported by <a href="https://thoughtbot.com/">thoughtbot</a> and their designers take care of it.</p>

<p>Before we install the thing, let me give you a couple of good reasons to look into it. We all know countless frameworks that promise to deliver a stable frame for developing your designs. And certainly most succeed in that regard in one way or another. The relevant questions are in how many regards and to what degree:</p>

<ul>
<li>Will you be able to switch frameworks in the future easily?</li>
<li>Problems with cluttering your markup?</li>
<li>Are they suited for scaling projects?</li>
<li>Are they ridiculous in size?</li>
<li>Steep learning curve?</li>
<li>Generic look?</li>
</ul>


<p>If any of the issues above are remotly ringing a bell, I just want to assure you that such headaches are easily avoidable these days. Its very rare to come across a project that balances its payoffs so well as <em>Bourbon Neat</em> (Or just Neat for short). Why so? Here are a couple of good reasons:</p>

<ul>
<li>super lightweight</li>
<li>future-proof</li>
<li>easy to use</li>
<li>responsive</li>
<li>semantic</li>
<li>scalable</li>
<li>elegant</li>
</ul>


<p>Bourbon also aims to provide you with options—not answers. What I like especially is that it isn’t a factory for generic, pre-defined styles. That way it aids the designer’s own design decisions without standing in the way.</p>

<h2>A word about semantics</h2>

<p>This is an important issue but I’ll make it short:
These ugly <em>presentation classes</em> and additional <em>“empty” wrapper divs</em> that you often find in similar libraries are ghosts from the past—at least they should be ghosted really. <em>Neat</em> plays a significant role in moving past these gnarly semantic habits. Nowadays you can easily write <em>clean, unobtrusive markup</em> and have all your grid styles cleanly separated in your stylesheets by including mixins. Busted!</p>

<p><img src="/images/bourbon-neat/Ghostbusters.gif" width="350"></p>

<h2>Neat Grids</h2>

<p>Why deal with a grid framework at all? Well, design is all about relationships and relationships are obviously hard. Grids make them easier by helping you tie structures together more meaningfull and organized.</p>

<p>What I like most about grids is that they <em>simplify, reduce</em> and <em>stabilize</em>—in essence, they help trim the fat out of designs. Unless applied mindlessly of course, that’s exactly what Neat helps you achieve so effortlessly. Neat’s grid framework offers a lot of power in a small looking package that is easy to use. Hard to believe this library consists of only:</p>

<ul>
<li><h3>14 mixins</h3>

<ul>
<li>reset-layout-direction</li>
<li>direction-context</li>
<li>shift-in-context</li>
<li>display-context</li>
<li>outer-container</li>
<li>span-columns</li>
<li>reset-display</li>
<li>fill-parent</li>
<li>reset-all</li>
<li>omega</li>
<li>media</li>
<li>shift</li>
<li>pad</li>
<li>row</li>
</ul>
</li>
<li><h3>one function for setting breakpoints</h3>

<ul>
<li>new-breakpoint</li>
</ul>
</li>
<li><h3>and twelve variables for settings</h3>

<ul>
<li>default-layout-direction</li>
<li>visual-grid-opacity</li>
<li>border-box-sizing</li>
<li>visual-grid-index</li>
<li>disable-warnings</li>
<li>visual-grid-color</li>
<li>default-feature</li>
<li>grids-columns</li>
<li>max-width</li>
<li>visual-grid</li>
<li>column</li>
<li>gutter</li>
</ul>
</li>
</ul>


<p>Boom, that’s it! Pretty low key but it equips you with a lot of horsepower!</p>

<h2>Responsive Grids</h2>

<p><img src="/images/bourbon-neat/grids.gif" width="750"></p>

<p>Its becoming obvious that <em>change</em> and the <em>need for flexibility</em> are constant future-proof necessities. Incorporating media queries should be smooth and easily manageable but they can quickly become a mess if not handled with care.</p>

<p>Bourbon Neat encourages a <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"><em>DRY</em></a> approach for handling your breakpoints with its <strong>new-breakpoint</strong> function. Save breakpoints in variables and resuse them wherever you need. Changing a bunch of media queries in one place is hard to beat.</p>

<p>To be more concrete, let me give you one little teaser.
Here’s some random Sass example using the <strong>new-breakpoint</strong> function for media-queries:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nv">$mobile</span><span class="o">:</span> <span class="nf">new-breakpoint</span><span class="p">(</span><span class="no">max-width</span> <span class="mi">500</span><span class="kt">px</span> <span class="mi">4</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.sidebar</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+media</span><span class="p">(</span><span class="nv">$mobile</span><span class="p">)</span>
</span><span class='line'>      <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.content</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">+media</span><span class="p">(</span><span class="nv">$mobile</span><span class="p">)</span>
</span><span class='line'>      <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
In my next article I’ll dive deeper into the nitty-gritties of this but what should be apparent to you in this example is the ease of use if you decide to change your media queries. Through the use of Sass variables and this function, you’ll have one consistent, authoritative place to change / tweak your responsive layout without touching each element individually.</p>

<h2>Installation</h2>

<p>Now that you know what you’re getting yourself into, let’s install this beauty:
(You need <a href="http://sass-lang.com/install">Sass</a> installed before you start of course)</p>

<ul>
<li><h4>#01 Install Bourbon</h4></li>
</ul>


<p>Take a look at my article about Bourbon if you need to follow this step.</p>

<ul>
<li><h4>#02 Install the Neat gem via <a href="https://rubygems.org/">RubyGems</a></h4></li>
</ul>


<pre><code class="">gem install neat
</code></pre>

<ul>
<li><h4>#03 Install Neat</h4></li>
</ul>


<p>Change into a Sass directory of your choosing:</p>

<pre><code>neat install
</code></pre>

<p>This will install all the necessary mixins, settings and functions in your designated directory.</p>

<h3>Screenshot:</h3>

<p><img src="/images/bourbon-neat/neat_directories.png"></p>

<ul>
<li><h4>#04 Do a Sass import for Neat in your Sass stylesheet</h4></li>
</ul>


<pre><code class="sass">@import 'bourbon/bourbon'
@import 'grid-settings'
@import 'neat/neat'
</code></pre>

<p>As you can see, the order is important here. Because Neat was built on top of Bourbon you need to import Bourbon first. The same goes for its <strong>grid-settings</strong>.</p>

<h2>Rails</h2>

<p>If you want to use Neat with Rails you’ll just add</p>

<ul>
<li><h4>#01</h4></li>
</ul>


<pre><code class="ruby">gem neat
</code></pre>

<p>to your Gemfile and run</p>

<ul>
<li><h4>#02</h4></li>
</ul>


<pre><code class="bash">bundle install
</code></pre>

<p>in your terminal.</p>

<ul>
<li><h4>#03</h4></li>
</ul>


<p>In <strong>application.sass</strong> you’ll simply add</p>

<pre><code class="sass">@import 'bourbon'
@import 'grid-settings'
@import 'neat'
</code></pre>

<p>and you’re good to go. Remember though that <code>@import</code> isn’t playing well with Sprockets directives and therefore you need to delete them. In <strong>application.sass</strong>, all references to <strong>require</strong>, <strong>require_tree</strong>, and <strong>require_self</strong> need to go.</p>

<p>Last but not least, the fine folks at thoughtbot provided you with a nice command line interface. It comes with three self-explanatory commands:</p>

<pre><code class="bash">neat install

neat update

neat remove
</code></pre>

<h2>Closing $0.02</h2>

<p>Given that you’re using intelligent tools, its definitely a joy working with grids. This framework does a great job in planning for developer happiness—long- and short-term. To me there is but one word which describes best what Bourbon Neat has provided me with when I work with grids: <em>Zen</em>. Hard to find better developer / designer happiness than that imho.</p>

<p>In the next article I’ll take a closer, more technical look at how to use this fantastic gem.
Have fun playing with Neat! I know you will!</p>

<p><img src="/images/bourbon-neat/ping-pong-grids.gif" width="450"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bourbon - Functions]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/07/15/bourbon-functions/"/>
    <updated>2015-07-15T13:51:46+02:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/07/15/bourbon-functions</id>
    <content type="html"><![CDATA[<p><img src="/images/bourbon-functions/bourbon-aerator.jpg" width="450" height="260" title="" ></p>

<p><a href="http://bourbon.io/"><img src="/images/bourbon-mixins/bourbon-logo@2x.png" width="250" height="450"></a></p>

<h2>Functions</h2>

<p>Bourbon provides very handy Sass functions for a variety of use cases. Let’s take a look at this selection:</p>

<ul>
<li><a href="#ratio"><strong>golden-ratio()</strong></a></li>
<li><a href="#modular"><strong>modular-scale()</strong></a></li>
<li><a href="#linear"><strong>linear-gradient</strong></a></li>
<li><a href="#tint"><strong>tint()</strong></a></li>
<li><a href="#shade"><strong>shade()</strong></a></li>
<li><a href="#em"><strong>em()</strong></a></li>
</ul>


<!-- more -->


<h2></h2>

<ul>
<li><h2><a name='ratio'></a>golden-ratio()</h2></li>
</ul>


<p>With this function, it is very easy to calculate the golden ratio (<strong>1:1.6180339</strong>) of a certain number. As a heads up, I should mention that it is slowly deprecated though. The function is useful if you want to create “meaningful” relationships within your typography for example. The same goes for structural relationships within your layout.</p>

<h4>The golden ratio for your typographic scale</h4>

<p>If you want to generate a <a href="http://www.hyperarts.com/blog/how-to-use-a-modular-scale/">modular scale</a> to structure various sizes of type by using the golden ratio, you can apply the <strong>goden-ratio function</strong> to calculate the <strong>golden mean</strong> for any number. Building your <strong>typographic scale</strong> with it is straightforward:</p>

<p>The function’s first parameter expects a <strong>pixel</strong> or <strong>em</strong> value — here represented by a Sass variable defined above. The second parameter requires an integer as <strong>increment / decrement value</strong> (&hellip;-3, -2, -1, 0, 1, 2, 3&hellip;) for moving up &amp; down the scale using the golden ratio.</p>

<pre><code class="sass typographic scale using the golden ratio">$base-font-size: 10px

body
  font-size: $base-font-size

.footnote
  font-size: golden-ratio($base-font-size, -1)
  // decrement size value proportional to golden ratio by factor 1
h3
  font-size: golden-ratio($base-font-size, 1)
h2
  font-size: golden-ratio($base-font-size, 2)
  // increment size value proportional to golden ratio by factor 1
h1
  font-size: golden-ratio($base-font-size, 3)

//  SCSS syntax

//  $base-font-size: 10px;

    body {
      font-size: $base-font-size;
    }

    .footnote {
      font-size: golden-ratio($base-font-size, -1);
    }

    h3 {
      font-size: golden-ratio($base-font-size, 1);
    }

    h2 {
      font-size: golden-ratio($base-font-size, 2);
    }

    h1 {
      font-size: golden-ratio($base-font-size, 3);
//  }
</code></pre>

<pre><code class="css CSS output">body {
  font-size: 10px;
}

.footnote {
  font-size: 6.18px;
}

h3 {
  font-size: 16.18px;
}

h2 {
  font-size: 26.179px;
}

h1 {
  font-size: 42.358px;
}
</code></pre>

<p>If you need to round the output, you can use Sass’s built in functions for that purpose:</p>

<h3><strong>abs()</strong> — <strong>floor()</strong> — <strong>ceil()</strong></h3>

<pre><code class="sass rounded example">.footnote
  font-size: floor( golden-ratio($base-font-size, -1) )

//  SCSS syntax

//  .footnote {
      font-size: floor( golden-ratio($base-font-size, -1) );
//  }
</code></pre>

<h3>Under The Hood</h3>

<p>Internally, the golden-ratio function is using the <strong>modular-scale function</strong> with the scaling variable <strong>$golden</strong> for golden-ratio.</p>

<pre><code class="sass modular-scale mixin">@function golden-ratio($value, $increment) {
  @return modular-scale($value, $increment, $golden)
}
</code></pre>

<p>Btw the fantastic <a href="http://neat.bourbon.io">Bourbon Neat</a> grid framework also uses the golden ratio by default for <strong>gutters</strong> and <strong>columns</strong>.</p>

<h2></h2>

<h3>FYI: The Golden Ratio</h3>

<p><img src="/images/bourbon-functions/bender-golden-ratio.jpg" width="280"></p>

<p>There are two sides to this story. The classical approach to describing the importance of this ratio could be along the following lines:</p>

<p>The golden ratio or “<strong><em>divine proportion</em></strong>” is a very common ratio used across disciplines. In music, art, mathematics, architecture, biology and in many other fields you can encounter the &ldquo;use&rdquo; of the ratio <strong>1 : 1.6180339</strong> to tie structures and forms together. Interestingly, in the past, especially in early architecture, it was often used to please the &ldquo;gods&rdquo; by attempting to &ldquo;communicate&rdquo; in a &ldquo;divine geometric language&rdquo;.</p>

<p>This ratio represents a pattern that is said to please human visual perception, probably because it’s been so abundant in biology around us all along. Therefore we supposedly perceive some kind of inherent balance when confronted with it. For ages, applying this ratio was seen as an old &ldquo;trick&rdquo; used by creators because it can make your work feel more <strong>harmonious</strong> or even &ldquo;natural&rdquo;.</p>

<p>In design, the use of the <strong><em>golden mean</em></strong> is widespread as well:</p>

<ul>
<li>Layouts in Webdesign</li>
<li>iPods / iPhones</li>
<li>Business cards</li>
<li>Credit cards</li>
<li>Tyography</li>
<li>Postcards</li>
<li>Logos</li>
<li>Cars</li>
</ul>


<p>&hellip;and <a href="http://en.wikipedia.org/wiki/List_of_works_designed_with_the_golden_ratio">many more</a></p>

<h4>Twitter’s use of the golden ratio for its layout</h4>

<p><img src="/images/bourbon-functions/goldentwitter.jpg" width="580"></p>

<p>On the other hand, you are also encouraged to doubt the tremendous reputation the golden ratio has earned over the centuries. Check out this controversial <a href="http://www.fastcodesign.com/3044877/the-golden-ratio-designs-biggest-myth">article</a> if you want to whet your appetite. The tl;dr version is that it’s supposed to be bullshit and a very old scam. Maybe still useful and effective, but simply nonsense projected onto an irrational number.</p>

<p>Over the years, hundreds of students were tested about their preference of the golden ratio at Stanford University. The Haas School of Business in Berkeley did something similar. The conclusion was that in the real world people don’t prefer the golden ratio. I’ll leave you with that and you can decide for yourself if “divine” is really what we should call this proportion that is supposedly the universal formula behind aesthetic beauty. Maybe it’s just another case where we try to find meaning in the patterns out there.</p>

<h2></h2>

<ul>
<li><h2><a name='modular'></a>modular-scale()</h2></li>
</ul>


<p>If you are into <a href="http://www.alistapart.com/article/more-meaningful-typography">&ldquo;<em>more meaningful typography</em>&rdquo;</a> and want to calculate a modular scale for various font sizes that have some sort of numerical relationship, this function might be interesting to you.
It offers to calculate various modular scales for you — the golden ratio is just one out of <strong>17 options</strong>, excluding your very own made up scales of course.</p>

<pre><code class="sass modular-scale example">$base-font-size: 10px
// Your choice of ratio saved in a variable to change it in one place
// Here I used the double-octave ratio
$type-of-scale: $double-octave

body
  font-size: $base-font-size

.footnote
  font-size: modular-scale($base-font-size, -1, $type-of-scale)

h3
  font-size: modular-scale($base-font-size, 1, $type-of-scale)

h2
  font-size: modular-scale($base-font-size, 2, $type-of-scale)

h1
  font-size: modular-scale($base-font-size, 3, $type-of-scale)

//  SCSS syntax

//  $base-font-size: 10px;
    $type-of-scale: $double-octave;

    body {
      font-size: $base-font-size;
    }

    .footnote {
      font-size: modular-scale($base-font-size, -1, $type-of-scale);
    }

    h3 {
      font-size: modular-scale($base-font-size, 1, $type-of-scale);
    }

    h2 {
      font-size: modular-scale($base-font-size, 2, $type-of-scale);
    }

    h1 {
      font-size: modular-scale($base-font-size, 3, $type-of-scale);
//  }
</code></pre>

<h3>Scaling Variables</h3>

<p><img src="/images/bourbon-functions/scaling-variables.png" width="350"></p>

<p>Bourbon prepared these <strong>variables</strong> of <strong>predefined ratios for various scales</strong>. To create a consistent design, it would be a good decsision not to mix different ratios for your typographic scale in one project. Keep it classy by deciding on one ratio that mirrors your intentions best.</p>

<h3>Attention!</h3>

<p>To use these scaling variables you need to install a version of Bourbon higher than <strong>v3.1.8</strong>.
As of Feb 2014, I’d recommend updating to the beta with:</p>

<ul>
<li>tag

<ul>
<li><strong>v3.2.0-beta.1</strong>
or</li>
<li><strong>v3.2.0-beta.2</strong></li>
</ul>
</li>
</ul>


<p>Put this in your gemfile to directly update from Github:</p>

<pre><code class="ruby Gemfile">gem 'bourbon', git: 'https://github.com/thoughtbot/bourbon.git', tag: 'v3.2.0-beta.2'
</code></pre>

<p>and of course</p>

<pre><code class="ruby">bundle install
</code></pre>

<p>Otherwise the variables above will throw an error. Of course you can just type in any desired ratio as the third parameter yourself.</p>

<pre><code class="sass without scaling variables">$base-font-size: 10px

h2
  font-size: modular-scale($base-font-size, 2, 1.6180)
                                            // golden ratio

//  SCSS syntax

//  $base-font-size: 10px;

    h2 {
      font-sizse: modular-scale($base-font-size, 2, 1.6180);
//  }
</code></pre>

<h2></h2>

<ul>
<li><h2><a name='linear'></a>linear-gradient()</h2></li>
</ul>


<p>If you need a linear gradient in combination with your background-image mixin, this function will save you quite a bit of code. The color of the gradient is defined by the <strong>starting color</strong>, the <strong>ending color</strong> and optional <strong>stop-color points</strong> in between. Those additional color-stops give you the possiblity to create more sophisticated transitions between the starting and ending colors, or provide a more colorful gradient.</p>

<p>Take a look at this horrible gradient. Here I think it’s easy to see how the <strong>linear-gradient</strong> function works and how you can utilize it:</p>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-functions/horrible-gradient.png"></p>

<pre><code class="sass horrible linear-gradient">.horrible-gradient
  +background-image(linear-gradient(
    45deg,                // directon of gradient line
    red 10%,              // starting color
    yellow 15%,   // S    // bleeds into red
    yellow 40%,   // T
    orange 45%,   // O    // bleeds into yellow
    orange 50%,   // P
    orange 70%,   // S    // bleeds into green
    green 90%)            // ending color
  )
    height: 50px

//  SCSS syntax

//  .horrible-gradient {
      @include background-image(linear-gradient(
        45deg,                // directon of gradient line
        red 10%,              // starting color
        yellow 15%,   // S    // bleeds into red
        yellow 40%,   // T
        orange 45%,   // O    // bleeds into yellow
        orange 50%,   // P
        orange 70%,   // S    // bleeds into green
        green 90%)            // ending color
      )
        height: 50px
//  }
</code></pre>

<p>For colors you can optionally provide <strong>percentage</strong>, <strong>pixel</strong> or <strong>em</strong> <strong>values</strong>. Those define the distance this color is supposed to stretch out. You should probably stick to using <strong><em>%</em></strong> most of the time though. If you don’t provide percentages as limitation values, the colors will strech out evenly, divided by the number of colors in the gradient.
You can optionally provide an angle for the first parameter — either in form of <strong>value</strong> + <strong>deg</strong> or <strong>to</strong> with <strong>direction</strong>:</p>

<ul>
<li>45deg</li>
<li>90deg</li>
<li>to left top</li>
<li>to right</li>
<li>to left</li>
</ul>


<p>and so on.</p>

<pre><code class="sass with direction parameter — left to right">.gradient
  +background-image(linear-gradient(to right, yellow 50%, blue 60%))
  height: 50px

//  SCSS syntax

//  .gradient {
      @include background-image(linear-gradient(to right, yellow 50%, blue 60%));
      height: 50px;
//  }
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-functions/yellow-blue-gradient.png"></p>

<p>The gradient flows from left to right</p>

<p>Or something more sophisticated using <strong>hsla()</strong> functions and multiple <strong>linear-gradient()</strong> functions:</p>

<pre><code class="sass decent gradient">.gradient
  +background-image(linear-gradient(
    hsla(0, 100%, 100%, 0.25) 0%,
    hsla(0, 100%, 100%, 0.08) 50%, transparent 50%),
    linear-gradient(#4e7ba3, darken(#4e7ba4, 10%)))
  height: 50px

//  SCSS syntax

//  .gradient
      +background-image(linear-gradient(
        hsla(0, 100%, 100%, 0.25) 0%,
        hsla(0, 100%, 100%, 0.08) 50%, transparent 50%),
        linear-gradient(#4e7ba3, darken(#4e7ba4, 10%)))
//    height: 50px
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-functions/hsla-gradient.png"></p>

<h2>Tint &amp; Shade Color Functions</h2>

<p>You might already be familiar with Sass’s built in functions for colors like <code>lighten()</code> and <code>darken()</code> which do exactly what you’d expect. Bourbon provides two additional awesome color functions for your convenience. Both functions take a color and percentage parameter to fine-tune the color mix.</p>

<ul>
<li><h2><a name='tint'></a>tint()</h2></li>
</ul>


<p>The tint function changes a color by mixing it with <strong>white</strong>.
It expects a second parameter that takes the <strong>percentage of white</strong> you want to mix the color with.</p>

<pre><code class="sass tint()">$light-blue: #2F7DD1

.tint
  background: tint($light-blue, 25%)
  height: 100px


//  SCSS syntax

//  $light-blue: #2F7DD1

    .tint {
      background: tint($light-blue, 25%)
      height: 100px
//  }
</code></pre>

<h4>Without tint()</h4>

<p><img src="/images/bourbon-functions/no-tint.png"></p>

<h4>With tint()</h4>

<p><img src="/images/bourbon-functions/tint.png"></p>

<h2></h2>

<ul>
<li><h2><a name='shade'></a>shade()</h2></li>
</ul>


<p>The shade function changes a color by mixing it with <strong>black</strong>.
This function also takes a <strong>color</strong> and <strong>percentage</strong> parameter to fine-tune the color mix.</p>

<pre><code class="sass shade()">$light-blue: #2F7DD1

.shade
  background: shade($light-blue, 25%)
  height: 100px


//  SCSS syntax

//  $light-blue: #2F7DD1

    .shade{
      background: shade($light-blue, 25%)
      height: 100px
//  }
</code></pre>

<h4>Without shade()</h4>

<p><img src="/images/bourbon-functions/no-tint.png"></p>

<h4>With shade()</h4>

<p><img src="/images/bourbon-functions/shade.png"></p>

<h2></h2>

<ul>
<li><h2><a name='em'></a>em()</h2></li>
</ul>


<p>Calculates <strong>pixels to ems</strong> for you.</p>

<pre><code class="sass em function in a Sass file">font-size: em(12)
</code></pre>

<pre><code class="css css output">font-size: 0.75em;
</code></pre>

<h2></h2>

<p>That’s it for Bourbon for now. Over the last couple of articles we have looked in detail at mixins &amp; functions and covered a lot of ground. I hope I could convey how awesome this project is and why it deserves a lot of respect.</p>

<p>Now feel free to scheme how to take over the world with it.</p>

<p><img src="/images/bourbon-functions/scheming.gif" width="700"></p>
]]></content>
  </entry>
  
</feed>
