<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Drafts Previewer]]></title>
  <link href="http://vis-kid.github.io/octo-draft/atom.xml" rel="self"/>
  <link href="http://vis-kid.github.io/octo-draft/"/>
  <updated>2016-03-14T22:54:02+01:00</updated>
  <id>http://vis-kid.github.io/octo-draft/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Visual Design 101]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2016/03/03/Visial-Design-101/"/>
    <updated>2016-03-03T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2016/03/03/Visial-Design-101</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Ingres_Academic_Study_(detail)_03.jpg" width="600"></p>

<h2>Topics</h2>

<ul>
<li>Relationships</li>
<li>Design Principles</li>
<li>Unity</li>
<li>Alignment</li>
<li>Continuation(Gestalt)</li>
<li>Emphasis</li>
<li>Hierarchy</li>
<li>Consistency</li>
<li>Similarity(Gestalt)</li>
<li>White space</li>
<li>Balance</li>
<li>Figure-Ground Relationship(Gestalt)</li>
<li>Proximity(Gestalt)</li>
<li>Closure(Gestalt)</li>
</ul>


<h2>Relationships</h2>

<p>Let’s get this out of the way real quick—it’s all about relationships. That’s basically it, end of story. Good visual design is successful at creating distinctive and cohesive relationships. On a intellectual level, that’s easy to grasp. The hard part start when you get frustrated when you want to achieve elegance and quality by applying various design principles but the practice of the craft is between you and your glorious ideas. Long story short, the following content is relatively easy to learn and understand but it takes repeated practice to put the pieces together and achieve results that creates these relationships successfully—while effortless looking at best.</p>

<p>probably some kind of innate pattern recognition software that helped to form these visual comforts and discomforts</p>

<p>Learning these visual design basics, I want to convey the idea that your number one priority should probably be to not to frustrate or alienate users while communicating with your viewers via your designs. I currently think that visual design—especially on the web—should also build up confidence. The user needs to feel not only save, but also understand what you put in front of her. She should never feel intimidated by the site or the content. You can apply all the visual design principles successfully, but if you fail at the afore mentioned, it will be for nothing. Overall you want to be helpful, that should be your priority. These principles make you much more effective with that goal in mind. You want to not only create relationships within your design, more importantly, you want to create successful relationships with your users. Design can help with that.</p>

<p>Convery a message tailored to an audience
shapes, words, symbols, images</p>

<p>visual problems
goot design solves visual problems</p>

<h2>Design Principles</h2>

<p>The knowledge of these principles will help you make informed decisions about how distribute pieces of your design in the overall composition, guide you in sizing objects and make it clearer how you should apply colors for example. Design principles are often very closely related to each other and can’t stand too much on their own. When you put them to work, you should be able to achieve better visual hierarchy which in turn makes it easier for the user to navigate through your work. The relationships you create in your designs are only as good as the relationships people tend to look for—via psychological patterns.</p>

<p>These principles help you achieve the functionality that good design is capable of. Maybe its not a bad approximation to say that it helps with the communication of your product, content or whatever by being visually sound and functional. The user should never be negatively surprised when you apply these principles. The design becomes more invisible because you provide users little reason to stop and think. Effortless looking design can be one of your goals and it is easier achieved with these principles in your tool belt. Maybe effortless design and invisible design go hand in hand. Not sure, but they are definitely not too far apart from each other.</p>

<p>Design principles want to help removing the guesswork from our design process as much as possible. They are based on human psychology and help you to make better, more informed decisions about how you compose your work. Understanding these will improve the quality of your work tremendously—and probably also speed up the time spent on particular pieces before they work. Experimentation is great, it really is, but guess work can become tedious very quickly. Accepting that design principles are more of less part of your tool set and part of learning the craft might not come easy—after all, most of us want to be unique and original. In my mind, there is no contradiction in that department though, but if you don’t pay attention to these, you won’t build a proper basis for breaking the rules gloriously.</p>

<p>One last thing before we get to work: Design is communication! Via visual design you communicate with a viewer. Your “words” or your repertoire includes shapes, words, symbols, images, white space, textures, colors and movements(animations or implied movements like the continuation of a pattern or form). Good design work results in great communication by providing great solutions to visual problems. The principles are connected to each other, feed off each other and influence each other. You want to be a guide who takes a user through a design—where you want them to go(also where it’s best for them!). A good ui will take this concern seriously and offer appropriate solutions. It will most likely be be broken, should you you loose them or leave them behind. Below we’ll look into seven design principles and a hand full of useful gestalt principles you should be aware of. They should be taken as guidelines, not as being set in stone and help you make decisions that lead to more cohesiveness.</p>

<h2>Unity</h2>

<p>Designs works best as a cohesive whole and should overall aim to achieve unity when you put all the elements together. Try to build up unified structures. Proximity, alignment, continuation and repetition can massively help to achieve perceived union among elements. This also helps you separate pieces of the puzzle without using additional borders. It looks more classy that way as well I think. As viewers, we perceive the overall structure first when we look at new things. A unified whole meets the user half way with that.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Unity/dropbox-team.png"></p>

<h6>This site does a lot of things right and makes good use of every design principle in the book. What I found most impressive though is how effortless they achieved visual unity with only a few elements on the page.</h6>

<p>Unity needs to be built up over time—doesn’t happen right away. I’d describe it as the combination of macro- and micro-unity in that regard. Smaller elements needs to convey cohesion as well when you build up an overall unified impression. Doesn’t work without paying attention to smaller details first.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Unity/github-project-page.png"></p>

<h6>GitHub does a great job in establishing unity as well. All little considerations in a content rich page like this add up to a consistent whole where all the pieces fit together and where nothing sticks out negatively. Impressive work really!</h6>

<p>If you do your job right, it creates the sort of cohesion that makes viewers more comfortable. Establishing trusting and understanding how they should follow the content is a free by-product. My impression is that the more unified a design becomes the more invisible it gets. If nothing stands in the way that could block the users attention the more frictionless the user experience can take place. Don’t make users think, right? In terms of style and elements used, if nothing sticks out from the rest too much and if all pieces have some sort of relationship to each other, unity can be easier achieved.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Unity/github-integrations.png"></p>

<h6>This is another example of excellent use of this principle. The block that displays the list of integrations does need very little extra elements to establish unity. Since the unity of this section is already very strong, hey could maybe even try to loose the borders.</h6>

<h2>Alignment</h2>

<p>This design principle is the easiest to use to reduce visual clutter. Think of messy desk vs organized one. even if you like creative looking messy desks, your audience or customers might appreciate a well sorted appearance over a chaotic one. It’s also easier for them to navigate and find the relevant pieces of information if you can establish some sort of flow via alignment. As a side effect, hierarchy gets easier established without elements floating all over the place—or even lazily arranged ones. I guess it’s fair to say that missing alignment makes you look cheap or inexperienced—unless this is something you want to imply—or when you like to have an experimental, anarchistic vibe to a design I guess. Long story short, alignment is where it all begins and you are probably never wrong taking care of it.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Alignment-Continuation/dropbox-help.png"></p>

<h6>Grids are maybe the most obvious use of using alignment to your advantage. This screenshot from the Dropbox help center clearly shows how tidy proper alignment can look. Visually pleasing as well I think.</h6>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Alignment-Continuation/paravel-reynolds.png"></p>

<h6><a href="http://themanyfacesof.com/burt-reynolds/">themanyfacesof.com</a>, a fun side project from <a href="http://paravelinc.com/">Paravel</a>, made a nice little Burt Reynolds themed site that has tons of examples where you can see good alignment in action. The alignment is very subtle and mostly achieved through great typography skills and grids.</h6>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Alignment-Continuation/dropbox-feature-list.png"></p>

<h6>The Dropbox feature list is another example that is worth studying. Simple, unpretentious and effective design work showing using alignment to maximum effect to structure content.</h6>

<h2>Gestalt Principles</h2>

<p>“<a href="https://en.wikipedia.org/wiki/Gestalt_psychology">Gestalt principles</a>” are powerful tools for designers. They are psychological principals that can help with making it clear how to arrange design elements in your work. We will cover them a bit along the way where they fit in best. Similar to visual design principles, they can be applied with print, web, video and photography. The list below covers what you need to study first:</p>

<ul>
<li>Figure ground relationship</li>
<li>Uniform Connectedness</li>
<li>Law of Praegnanz</li>
<li>Common Fate</li>
<li>Continuation</li>
<li>Similarity</li>
<li>Proximity</li>
<li>Closure</li>
</ul>


<h2>Continuation</h2>

<p>Visual alignment is actually pretty much based on the Gestalt principle of continuation. We’ll look more into how you can use this in your work when we cover grids in this series. I should mention this though, objects that follow a common direction, for example by being aligned to each other, create the impression of being more related to each other than elements missing this guideline. Following these organized lines of content creates order in a layout. For example, letters that form words which in turn form sentences and paragraphs are a good example of how continuation creates a better sense of content. You can clearly see they are belonging to each other and how to follow them to digest the information.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Alignment-Continuation/color-drops.png"></p>

<h6>This is a great example of both alignment and continuation (<a href="http://www.lolcolors.com/">LOL Colors</a>). Without using borders, you can clearly see a grid at work effectively and the form of the color drops implies movement continuing down the page. I love this piece!</h6>

<p>On macro-level, you want to work on aligning things that are related to each other and position them along a common edge. That way, elements flow a lot easier in the overall composition and let users navigate effortless—if done right. This visual connection helps you to form an overall unity between small and big elements. It’s like an invisible margin that holds the major pieces in your design together and gives the eye little reason to stop for visual hiccups. More often than not, edge alignment is more useful and applied more frequently than center alignment. Both have their place of course, but aligning content via edges is definitely your bread and butter when you design for the web. Center alignment for larger elements can be used to emphasize particular elements or call to actions.</p>

<h2>Emphasis</h2>

<p>Emphasis is all about focal points. The less you have, the stronger their emphasis. You want to avoid making look everything important—that way nothing sticks out and all you end up with is noise. I’m sure you have seen sites that ignore that principle and plaster tons of funky colored buttons all over the place. Leaves a nasty taste, doesn’t it? That’s what a lack of emphasis can leave behind. More importantly, it does not help in creating a clear hierarchy. Your tools of choice are the usual suspects, but size and color might be the most effective at creating emphasis.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Emphasis/dropbox-signup-emphasis.png"></p>

<h6>Establishing a strong contrast with content or design elements around is another way to go. Although this site is a bit busy, Dropbox makes a great job at highlighting the action they user is supposed to make. Visually, there is nothing standing in the way that blocks the user from focusing on signing up. The strongest emphasis is on the blue buttons that clearly stand out from the rest in the viewport. This design has good visual balance too—even better if they’d go with only one blue button.</h6>

<p>My approach these days is simple: one or two emphasised elements in a particular viewport should be enough to guide the users attention to the most important elements on the page. Which elements is maybe more difficult than it sounds like. You not only want to create interest among your users but also drive the attention where needed—fast and easily. Ask yourself, what is really so crucial to be grabbing the users focus first. Choose wisely and don’t annoy users with your decisions!</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Figure-Ground/wooden-keyboard.png"></p>

<h6>The emphasis on the product is excellent in this design. Neither the description nor the background blocks the emphasis on the wooden <a href="http://oreeartisans.com/products/oree-board">Orée</a> keyboard in any way. Beautiful! Symmetry is also working nicely here.</h6>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Figure-Ground/htc-vive.png"></p>

<h6>Not much to say about how HTC presented the <a href="http://www.htcvive.com/eu/product/">VIVE</a>. Emphasis at it’s best. Good design like this definitely sells.</h6>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Figure-Ground/craft-email.png"></p>

<h6><a href="http://www.invisionapp.com/craft">Craft</a> by Invision has made a nice landing page where they elegantly emphasised the input field for email addresses. Hard to get lost on this page. The name of the product sticks out nicely as well. The distinction between background and foreground is especially skilled and playful.</h6>

<h2>Figure Ground Relationship</h2>

<p>This principle is very powerful and I think so fundamental that you should master it as early as possible. Working on your designs, you should often ask yourself the simple question: what elements are basically background or foreground?</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Figure-Ground/raspberry-pi-figure-ground.png"></p>

<h6>You can see that the content and the button to take action clearly stick out from the background. (<a href="http://www.cayenne-mydevices.com/">http://www.cayenne-mydevices.com/</a>) A clear distinction is very important to play with the user’s focus effectively. Here the lines are a bit blurry and playful I’d say, but still very clear figure-ground distinction.</h6>

<p>When our early ancestors were hunting, gathering or whatever, it often was of vital importance to discern what might be an immediate threat or advantage—right in front of them. Distinguishing things quickly from stuff that are just background “noise” seems to still be part of our wiring for “survival”. Think of tiger behind a bush in the jungle vs rain on the horizon. Neurologically, this visual survival strategy has probably left such a deep imprint that we won’t change this simple mechanism of perception for quite a while.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Figure-Ground/zappka.png"></p>

<h6>Here we have a very prominent background image that takes a lot of attention. Should convey some sort of emotional response I guess. Nevertheless, the button to take action is cleverly placed and it’s color is emphasised nicely into the foreground. (<a href="http://zappka.com/">http://zappka.com/</a>)</h6>

<p>I know this sounds funny and mostly obsolete for digital folks, but knowing this, makes it much simpler to decide how to accentuate important elements or information for users and how to “hide” less relevant stuff in the background. Another issue might be that our eyes and brains are not super fast at processing a lot of information at the same time which leads to prioritizing what we need to focus on first. This is no rocket science of course, but having this knowledge at the back of your head definitely helps placing pieces of the design puzzle more effectively.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Figure-Ground/startup-fucking-advice.png"></p>

<h6>This works quite ok, the distinction between background and foreground works somehow. I just don’t get why they didn’t place the red button at the end of the table—where the eye is drawn naturally due to the perspective of the image. Would have been much stronger emphasis without much effort. (<a href="http://www.startupfuckingadvice.com/">http://www.startupfuckingadvice.com/</a>)</h6>

<p>Broken down to its core essence, figure ground relationship boils down to what can the user ignore at first and what should she focus on right away. For design with strong visual hierarchy, this is an essential design principle to produce quality work. Without applying this knowledge, you either stumble over a successful solution by accident or your outcome will be significantly weaker in establishing visual hierarchy. Blending them sometimes and breaking the clear distinction might result in nice results.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Figure-Ground/samsung-360.png"></p>

<h6>This one from the new Samsung <a href="http://www.samsung.com/global/galaxy/gear-360/">Gear 360</a> is as good as it gets. The background and foreground work together extremely well. There is a clear distinction and the background accentuates the camera in the foreground elegantly. Pretty clever and playful too.</h6>

<p>Below are couple more examples of good emphasis / figure-ground relationship for the road:</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Figure-Ground/chewable-coffee.png"></p>

<h6><a href="https://gocub.es/">Go Cubes</a></h6>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Figure-Ground/chewable-coffee-single.png"></p>

<h6><a href="https://gocub.es/">Go Cubes</a></h6>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Figure-Ground/gear360-dust.png"></p>

<h6><a href="http://www.samsung.com/global/galaxy/gear-360/">Gear 360</a></h6>

<h2>Hierarchy</h2>

<p>Hierarchy is all about visual importance and is sort of a cousin to emphasis in regards to reducing visual clutter. It’s mostly a macro guide on what to focus first and how to follow some sort of visual, subliminal breadcrumbs—like telling a visual story the user can cling on to when navigating your site. You can approach design elements like “layers of importance” that need to be arranged effectively. With only a few pieces strongly emphasized, you are taking the viewer softly by the hand and move him through the site as intended—more importantly, as you intend for the user to have the best possible experience.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Hierarchy/reddit-index.png"></p>

<h6>The screenshot of the Reddit index page is maybe not the best example of well crafted design—especially in the sense of establishing a clear and strong hierarchy. Reddit is one of these cases where the success of the site and design are not closely related I feel. It has an authentic ring to it, by being messy I mean, but I often wish their user experience would be enhanced by working more on their design. Wouldn’t need much to establish a better visual hierarchy.</h6>

<p>As we covered before, you don’t want things to look equally important. That way your viewer would have a harder time to digest your content. Instead create various level of importance that emphasise the overall structure of your composition. One strategy that works pretty much always is: the bigger the size, the bigger the importance. These differences in size or whatever should be significant differences only, avoid going overboard. After you achieved a basic hierarchy through size and spacing, you can bring color to the mix. This can help to emphasize certain elements even more. If you work the other way around, starting with color, you make your job unnecessarily harder—or at least less effective.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Hierarchy/github-trending.png"></p>

<h6>I like how the <a href="https://github.com/trending">Explore</a> page at GitHub deals with typography to create a subtle and clear hierarchy. It’s very easy for the eye to follow the content downward. Color is also put to good use to create visual anchors. Same goes for their search page.</h6>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Hierarchy/github-search.png"></p>

<h6>Color, form, white space, size and alignment work together and create a solid hierarchy.</h6>

<p>Good visual hierarchy is a bit like giving users directions without putting signs all over the place. It’s a lot more subtle and elegant that way. Skillfully implemented hierarchy let’s you avoid that the user feels overwhelmed, especially when you have tons of content on a site. Users getting lost by lacking of hierarchy is the exact opposite you want to happen. That is easy money that you leave on the table. I sometimes wonder how many conversions are missed just because this important principle was ignored designing checkouts and stuff. A clear hierarchy distinguishes quickly between good and mediocre design solutions—also convey the skills and experience of the designer at work.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Hierarchy/what-is-dropbox.png"></p>

<h6>Another great example of how skillful designer at Dropbox execute their work. A lot more content to work with, but still successful at guiding the eye through the text. Subtle and skillful.</h6>

<h2>Consistency</h2>

<p>If you follow the principles discussed so far but lack consistency you not only confuse your user unnecessarily but also weaken the progress you achieved applying other design principles. Consistency helps to create a mental model of the design, site or look you are going for. Similar items should look similar which makes finding stuff easier. Also, once you get into coding your designs, making your designs more DRY (Don’t Repeat Yourself) is a lot more straightforward with that in mind.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Consistency/dropbox-plans.png"></p>

<h6>Another eye pleasing design from the Dropbox team. It shows consistency on various levels. The style and size of the illustrations are consistent—not only in this example but across the page actually. The buttons look the same—also page wide. The visual weight of all three columns are evenly distributed, aligned and share the same inner structure. Overall, simple, considered and effective.</h6>

<p>Consistency sets expectations, the next thing should not look completely different—especially not to amuse the create impulses of designers making their mark.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Similarity/startup-cards.png"></p>

<h5><a href="http://uxtimeline.com/">UX Timeline</a></h5>

<p>Not using a ton of different typefaces is one of the most important application of consistency. Users gets used to read in a particular style or typeface and you don’t want to disturb that—at all! Lot’s of different typefaces is one nasty antipattern.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Consistency/type-consistency.png"></p>

<h5><a href="https://www.whiplashmerch.com/">Whiplash</a></h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Similarity/soundcloud-charts.png"></p>

<h5><a href="https://soundcloud.com/charts/top">SoundCloud Charts</a></h5>

<p>Have you recently seen sites that use tons of different buttons instead of a few which would create much better consistency? I bet you have and that you didn’t like it. The buttons below belong to a interface inventory of one single site. Amazing how far you can go in the wrong direction.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Consistency/atomic-design-buttons.png"></p>

<h6>A screenshot from Brad Frost’s excellent book about <a href="http://atomicdesign.bradfrost.com/chapter-4/">Atomic Design</a></h6>

<p>The usability of a system can improve a ton when similar elements like these share the same look. Why make users learn a ton of visual language for navigating your page? It doesn’t make any sense! On the bright side, consistency helps you shape the design very subliminally without too many extra elements as distinguishers.</p>

<h2>Similarity</h2>

<p>You guessed it, consistency has it’s roots in this Gestalt principle that says that similar looking things create a sort of unity that you can use in your designs. Elements that share similar characteristics appear to be more related to each other—more than dissimilar things. No surprises here of course. The being related part is the thing to focus on. Design elements can create a relationship just by looking similar. Elements that are similar, when put together can create strong contrasts to other elements around them which basically separates them without much effort or extra design barriers. That’s fantastic news because it can make our lives as designers a lot easier. This means that psychologically, it can help us create consistency by repeating particular elements and that avoiding to create tons of variations of the same things weaken our work—or most likely only confuse your users. Cohesion is the magic idea behind all this.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Similarity/dribbble-peeps.png"></p>

<h6>The user list on <a href="https://dribbble.com/designers">Dribbble</a>, displaying designers and their work, is a nice example how similarity can support a list of different design elements to create relationships and therefore appear more unified.</h6>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Similarity/reddit-bad-similarity.png"></p>

<h6>Reddit does not achieve great consistency by applying similarity that well. This list of posts has super long and super short titles, some headlines are indented while others aren’t. It looks a bit messy and wouldn’t take much work to create more cohesion via similarity.</h6>

<p>You can achieve similarity by:</p>

<ul>
<li>color</li>
<li>form</li>
<li>size</li>
<li>shape</li>
<li>texture</li>
<li>orientation</li>
<li>dimension</li>
<li>consistency of size</li>
</ul>


<p>All of them can suggest relationships when being similar. Color and shape are very strong examples to emphasize these relationships. I think that similarity of color is maybe the strongest to suggest similarity. The eye is looking for color similarity very early in the process of looking at new stuff. If you can make it easy for it to discover common threads via color, you make the user think less I guess. Although similarity is a mighty weapon to yield, it is nevertheless a tool for reinforcement of hierarchies, not one that easily creates it on its own.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Similarity/trending-open-source-boders.png"></p>

<h6>This list of trending Open Source repos on GitHub is really nice. Very simple, easy to read and digest as well as cohesive by being very similar. I think it is so successful in creating blocks of discrete content that it doesn’t even need these borders.</h6>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Similarity/trending-open-source-no-boders.png"></p>

<h6>After removing the borders in the list, you can see that the similarity is still so strong that it doesn’t change the effectiveness of this list. You can see that the consistent use of similar elements can create a rather strong unity. See, I told you, it’s all about relationships really.</h6>

<p>The subtle mental map we can create is not to be underestimated. It helps to establish a pattern for organizing content. Chaos is on the other end of that spectrum and is most likely not what we are aiming for. Imagine a page of text where the letters would not be displayed consistently on a line-by-line basis but would float randomly around the page. Not very inviting to read, huh?</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Similarity/github-explore-weaker.png"></p>

<h5>This is the landing page of the <a href="https://github.com/explore">Explore</a> section on GitHub. Here I think that a more consistent use of size and appearance would have been a bit more effective. At first I thought that the increased size was due to an “editorial” decision to consciously highlight certain categories. After a couple of refreshes it was clear thought that this was just randomized. Lacking good reason to play with size, the unity would have been stronger by sticking to consistency. Also, you have two sorts of cards, one with just a headline for the category and one with additional text. On top of that, the hover effects are different for all three variations. Not a big issue overall, but imho not as strong as the showcases list of the same section below.</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Similarity/github-explore-cards.png"></p>

<h6>Same content as above but the result is much stronger. Although the background colors are very different from each other, the cards look still very similar and consistent.</h6>

<p>In terms of functionality, similar looking elements should accomplish similar tasks for the user. When users unnecessarily need to re-learn different behaviours for similar looking things, frustration might be the least of your problems. You definitely want to avoid creating too many question marks for users in that department. Similarity helps to manage expectations of your users—that in itself is a very powerful tool in your arsenal.</p>

<h2>White space</h2>

<p>What exactly is considered white space? It’s unmarked, negative or empty space between elements in a composition. There is also macro whitespace for the main pieces in your design which creates more obvious effects. Micro whitespace on the other hand are for minute details, like spacings in text. It’s great if you are after more subtle effects. A good grip on white space is considered elegant and timeless if executed right.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/WhiteSpace/gear-360-white-space.png"></p>

<h6>Here the excellent use of white space creates a strong and elegant emphasis on this new product. There are a couple of principles put to work successfully, but white space is playing the strongest role to make this design work so well.</h6>

<p>Site with proper white space usually appear a bit lighter or more airy. In that regard, it also leads to a composition that is more digestable. Lesser whitespace can result in looking cheap—which caw be a desired effect of course. I’m sure you have seen displays of luxury products and realized that they focus your attention by applying a ton of whitespace. It’s not so much about luxury vs cheap, but often, higher priced or valued products make good use of this principle. Instead it’s another technique that you can use to lead a viewer from element to element. That way, white space is considered active.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/WhiteSpace/foundersuite.png"></p>

<h6>(<a href="https://foundersuite.com/investor_crm">Foundersuite</a>) When you investigate the sizes used to establish effective white space, you see that the measures used play off of each other. Let’s have a look below:</h6>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/WhiteSpace/foundersuite-color-blocks.png"></p>

<h6>As you can see, this application of white space is active. Although not perfect in execution—web browsers duh—you can easily see how little consideration it takes to play with this design principle. Doesn’t take much work to go beyond your gut feeling.</h6>

<p>To be most effective, white space must be active. It is a fuzzy description but it means that it should have relationships to elements around it. Active whitespace helps emphasize the composition or structure of your content and therefore affect the hierarchy positively. Passive whitespace is important as well since it can create small breathing rooms. But, too much inactive white space that is lacking relationships to surrounding elements and make your work look inconsiderate or even messy. It simply does not create the balance good design wants to achieve with that technique.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/WhiteSpace/ionic-white-space.png"></p>

<h6>Another nice application of white space on <a href="http://ionic.io/">ionic.io</a>. There is a relationship in size as well as macro and micro white space playing nicely together.</h6>

<p>When you read text, see the useful application of white space every day without thinking much about it. The space between words, sentences and paragraphs is all white space and helps us to visually digest the meaning of the letters being written. It guides the eye through the content and gives us cues how the eye is most effectively moving through it the text. Both give the eyes a chance to rest and support the overall balance.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/WhiteSpace/mighty-bell-white-space-blocks.png"></p>

<p>Keep in mind that you want to achieve differentiation though space. This lets you cut back on other elements to create distinctions or borders. If you like that clean look of your favorite designs then the conscious application of white space was most likely one major component of it. Nothing speaks elegance and sophistication than proper user of white space.</p>

<h2>Balance</h2>

<p>More often that not, you want all elements, or at least the most emphasised ones on page to have optical equilibrium. Avoid having elements that look heavier than the rest! Balance is all about keeping visual weight in check. We like to look at things that are balanced around a vertical axis—a Rohrschach test image basically. Nothing wrong with that. This is a safe pattern to follow—very formal and ordered. If you can break that balance masterfully though, create a bit of a tension or surprise, maybe to highlight some part, your design might appear more dynamic and interesting.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Balance/blockhead-balance-01.png"></p>

<h6>The site for the <a href="https://tenonedesign.com/blockhead.php">Blockhead</a> adapter has a few nice examples how they craftfully applied balance to their designs. Above, the image to the right and the text achieve a nice optical equilibrium. Same goes for the image below. Balance, hierarchy, whitespace and emphasis are all nicely applied.</h6>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Balance/blockhead-balance-02.png"></p>

<p>Lucky for us, symmetrical balance is easy to achieve. Might be a tad more boring but it’s mostly a save bet. The asymmetric approach is less rigid or static but expects a bit more craft to pull off successfully. You need to work on keeping the various non-mirrored parts in a perceived balance. The elements involved are different from each other. It is not so much about getting a ruler out and measuring all the lengths, distances or white spaces, but about creating a visual, perceived equilibrium. Not easy to do but it can result in very beautiful and elegant solutions. Good examples show the experience of a well considered and crafted design.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Balance/dropbox-balance-01.png"></p>

<h6>It doesn’t get any better than that. The <a href="https://www.dropbox.com/">Dropbox</a> landing page makes excellent use of visual balance all over the place. You can see that the images and the text achieve a nice asymmetrical balance–especially in reference to other sections around them. An boy, don’t get me started about how they used the Koi carp to imply responsiveness and multi-device operability. Genius!</h6>

<p>When you play with visual balance, all the design tools are at your disposal: size, color, position, shape, quantity, texture and so on can influence the perceived weight individually and play off of each other. Getting a good grip optical equilibrium is one of the harder skills to master I think.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Balance/dropbox-balance-02.png"></p>

<p>Asymetrcial balance is more friendly, less static or rigid and conveys a design that appears more playful and dynamic. Not that I’m a Dropbox fan boy or something, but in terms of design they are making skillful use of every design principle in the book and achieve an overall quality that can be admired.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Balance/dropbox-balance-03.png"></p>

<h5>Dropbox’s about page</h5>

<h2>Proximity</h2>

<p>Design elements that are placed closer to each other seem to appear being more related. The distance between elements has an effect on their perceived relatedness. The closer they are arranged together, the closer the relationship is implied. You can enforce that mental proximity through color and similarity of course. Handling proximity right can affect your designs positively by enabling you to leave off other elements that would help you achieve a visual unity—borders for example. Again, unity is what this is all about. Proximity can be so strong though that it overshadows similarity of color or form.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Proximity/proximity.png"></p>

<h6>On the site for <a href="https://yogrow.co/ecommerce-stack">YoGrow</a> you can see how they made use of proximity. Maybe they could have used less of the background color and borders and let proximity do its magic. There is not too much to explain I think but proximity is one Gestalt principle that you want to not overlook. In the example below, proximity was you need to imply the relationships of these color palettes. Borders or background colors can be left off and generates an elegant look (<a href="http://www.lolcolors.com/">LOL Colors</a>).</h6>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Proximity/color-drops.png"></p>

<h2>Closure</h2>

<p>Closure is a technique where the user who watches a composition fills in the blanks of your designs—that you deliberately planted—a form of suggestion I’d say. It’s sort of a illusion that completes the image that the designer wants you to see. Maybe you can also describe it as a design that leaves out all the stuff that is unnecessary to understand the image. For the human brain, it’s easier to see a pattern than to see disorganized pieces. Thereby you can create a possibly stronger visual imprint on the viewer I’d say. It’s like we dig a deliberate hole that is for the viewer to fill after they figure it out. This is sometimes the technique behind very clever logos. Have a look below.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Closure/closure-example-list.jpeg"></p>

<p>The pattern-seeking human brain seems to operate by filling in missing pieces into familiar forms. It does not work well with things that are unfamiliar to us. Experience is necessary to invoke this mental trigger. Supposedly our minds are doing this on a vast scale with our everyday perception. It might even be a vital mechanism of how we construct our realities. Because we can’t fully sense what is going on around us, we cope by interpolating what’s out there—sort of I guess. This filling of the blanks let’s us focus on what’s important and probably go on with our business without being too much distracted by everything going on. Visual design learned to “exploit” that mechanism of our brain via closures. I’m not a psychologist, but this is the best description that I can come up with to summarize all that I learned about this over time.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Closure/fedex.png"></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Closure/girl-scouts.png"></p>

<p>If that really leaves the viewer with a more ingrained impression or relationship to a brand or whatever, can be questioned of course. In general, you don’t want to make it too hard for viewers to fill in these blanks though. Very few people take the time to figure this stuff out, so they need to put it together quickly in order to be effective. If it’s taking them too long, you are wasting an opportunity to leave a positive impression—or worse any significant impression at all.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Closure/usa-network.gif"></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Design_101/Visual_Design/Closure/closure-v.png"></p>

<h2>Final thoughts</h2>

<p>Practice, practice, practice, there is no way around it! From now on, try to look for these principles when you take a look at other designs or art. Try to understand if the creators considered these principles and applied them actively or if they just followed their gut blindly or instinctively—which is not wrong by definition or anything but represents a limited tool set that is harder to rely on in your work. But most of all, have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slim Basics 02]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2016/02/25/Slim-Basics-02/"/>
    <updated>2016-02-25T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2016/02/25/Slim-Basics-02</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/Slim/slim-fishbowl-refined.png"></p>

<h2>Topics</h2>

<ul>
<li>Outputting Code</li>
<li>Text interpolation</li>
<li>Control Code</li>
<li>Inline HTML</li>
<li>Verbatim Text</li>
<li>Comments</li>
<li>Custom Shortcuts</li>
<li>Configuring Slim</li>
</ul>


<!---
+ Helpers
+ Safety
+ Logic-less Mode
+ Performance
+ Framework Support
+ Command Line Slim slimrb
+ Temple & Tilt
-->


<h3>Outputting Code</h3>

<p>You have already seen a bit how to use Ruby in your templates. This section gives you all you need to make use of this. In the first article, we have been using Ruby already in our templates. Let me remind you what I mean:</p>

<h4>Sim:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">html</span>
</span><span class='line'>  <span class="nt">head</span>
</span><span class='line'>    <span class="nt">title</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="ss">media</span><span class="p">:</span> <span class="s1">&#39;all&#39;</span><span class="p">,</span> <span class="s1">&#39;data-turbolinks-track&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="s1">&#39;data-turbolinks-track&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">csrf_meta_tags</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, inside this head tag, we already used a couple of methods from Rails to deal with styles and JavaScript stuff—nothing major. All you need to do to execute Ruby code is prepend it with an equals <code>=</code> sign. If your code needs to spread over multiple lines, just append a backslash <code>\</code> at the end of each line and keep going onto the next one. Should you end the line in a comma <code>,</code>, then you don’t need the backslash. Nice little touch if you ask me.</p>

<p>Let’s have a look at another, more concrete example. Writing forms is often a pain in the butt—lots of boilerplate code, lots of repetition and all these dreaded <code>&lt;%= %&gt;</code> signs in ERB. This can get messy in no time. Could be nicer huh?</p>

<p>ERB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="vi">@agent</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:licence_to_kill</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:licence_to_kill</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:gambler</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:gambler</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:womanizer</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:womanizer</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>A lot of stuff to write for creating a new <code>@agent</code> object, no? Slim lets you handle this a lot more succinct. We just keep the equals sign and get rid of most other stuff. Tadaa!</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="p">=</span> <span class="n">form_for</span> <span class="vi">@agent</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:name</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:number</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:number</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:licence_to_kill</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:licence_to_kill</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:gambler</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:gambler</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:womanizer</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:womanizer</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can clearly see why this project is called Slim. So much excess fat is gone. Don’t tell me you don’t like what you see, I know you’re digging it! Just an <code>=</code> sign and you can populate your markup with Ruby code—in this case from Rails of course. And when you compare it to the HTML rendered on the final page, it’s hard to ignore how compact Slim really is.</p>

<p>HTML Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/&quot;</span> <span class="na">accept-charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;utf8&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;&amp;#x2713;&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;authenticity_token&quot;</span> <span class="na">value=</span><span class="s">&quot;+P2I801EkEVBlsMgDo9g9/XgwwQfCBd1eoOBkFmgAHE4bxYi9HGUjEjsNwNMnEadV2tbDtYvQhFb4s/SNMXYtw==&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_name&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[name]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_name&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_number&quot;</span><span class="nt">&gt;</span>Number<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[number]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_number&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_licence_to_kill&quot;</span><span class="nt">&gt;</span>Licence to kill<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;agent[licence_to_kill]&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[licence_to_kill]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_licence_to_kill&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_gambler&quot;</span><span class="nt">&gt;</span>Gambler<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;agent[gambler]&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[gambler]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_gambler&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_womanizer&quot;</span><span class="nt">&gt;</span>Womanizer<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;agent[womanizer]&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[womanizer]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_womanizer&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">value=</span><span class="s">&quot;Save Agent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember the initial question that the Slim core team is guided by: “What&rsquo;s the minimum required to make this work?” When you look at the final HTML output, I guess it’s fair to say that Slim has answered that question quite successfully—no complaints on my end. I wanna throw in a couple more small examples to give you more opportunity to get used to how this looks in Slim.</p>

<p>This ERB snippet …</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">&quot;shared/agents&quot;</span><span class="p">,</span> <span class="ss">collection</span><span class="p">:</span> <span class="vi">@agents</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>… becomes this in Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="p">=</span> <span class="n">render</span> <span class="s2">&quot;shared/agents&quot;</span><span class="p">,</span> <span class="ss">collection</span><span class="p">:</span> <span class="vi">@agents</span>
</span></code></pre></td></tr></table></div></figure>


<p>ERB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;h2&gt;Agents&lt;/h2&gt;</span>
</span><span class='line'><span class="x">&lt;ul&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="vi">@agents</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">agent</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;li class=&#39;agent&#39;&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Name: </span><span class="cp">&lt;%=</span>            <span class="n">agent</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Number: </span><span class="cp">&lt;%=</span>          <span class="n">agent</span><span class="o">.</span><span class="n">number</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Licence to kill: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">licence_to_kill</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/li&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">h2</span> Agents
</span><span class='line'><span class="nt">ul</span>
</span><span class='line'>  <span class="p">-</span> <span class="vi">@agents</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">agent</span><span class="o">|</span>
</span><span class='line'>    <span class="nt">li</span><span class="nc">.agent</span>
</span><span class='line'>      <span class="nt">div</span>
</span><span class='line'>        | Name:
</span><span class='line'>        <span class="p">=</span> <span class="n">agent</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>      <span class="nt">div</span>
</span><span class='line'>        | Number:
</span><span class='line'>        <span class="p">=</span> <span class="n">agent</span><span class="o">.</span><span class="n">number</span>
</span><span class='line'>      <span class="nt">div</span>
</span><span class='line'>        | Licence to kill:
</span><span class='line'>        <span class="p">=</span> <span class="n">agent</span><span class="o">.</span><span class="n">licence_to_kill</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could also write this a bit more streamlined via interpolation. You don’t wanna go too crazy with that one though. This would look like this then:</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">h2</span> Agents
</span><span class='line'><span class="nt">ul</span>
</span><span class='line'>  <span class="p">-</span> <span class="vi">@agents</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">agent</span><span class="o">|</span>
</span><span class='line'>    <span class="nt">li</span><span class="nc">.agent</span>
</span><span class='line'>      <span class="nt">div</span> Name:            <span class="si">#{</span><span class="n">agent</span><span class="o">.</span><span class="n">name</span><span class="si">}</span>
</span><span class='line'>      <span class="nt">div</span> Number:          <span class="si">#{</span><span class="n">agent</span><span class="o">.</span><span class="n">number</span><span class="si">}</span>
</span><span class='line'>      <span class="nt">div</span> Licence to kill: <span class="si">#{</span><span class="n">agent</span><span class="o">.</span><span class="n">licence_to_kill</span><span class="si">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Text Interpolation</h3>

<p>I mentioned this before briefly but since it is a form of outputting Ruby code it belongs to this section as well. You can use standard text interpolation from Ruby in your Slim templates as well of course.</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'> <span class="nt">h2</span> Welcome Mr. <span class="si">#{</span><span class="n">misix_agent</span><span class="o">.</span><span class="n">surname</span><span class="si">}</span>! I expect you to die!
</span><span class='line'>
</span><span class='line'> <span class="nt">h2</span> Welcome Mr. \<span class="si">#{</span><span class="n">misix_agent</span><span class="o">.</span><span class="n">surname</span><span class="si">}</span>! I expect you to die!
</span></code></pre></td></tr></table></div></figure>


<p>HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2&gt;</span>
</span><span class='line'>  Welcome Mr. Bond! I expect you to die!
</span><span class='line'><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h2&gt;</span>
</span><span class='line'>  Welcome Mr. \#{misix_agent.surname}! I expect you to die!
</span><span class='line'><span class="nt">&lt;/h2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As seen above, a simple leading backslash <code>\</code> escapes the interpolation.</p>

<h3>Control Code</h3>

<p>One more for the road. Let’s say you want to use a couple of conditionals in your view. Similar to Haml, you signify Ruby code that is not supposed to be outputted onto the page by a simple dash <code>-</code>. You have seen this in the example above where we used that to iterate over <code>@agents</code> without displaying that particular part of the code. Although you should try to stay away from all kinds of conditionals in your views where possible and try to find better OOP solutions for such cases—which is a story for another time—they would look something like this:</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="p">-</span> <span class="k">if</span> <span class="n">current_user</span><span class="o">.</span><span class="n">role</span> <span class="o">==</span> <span class="s2">&quot;admin&quot;</span>
</span><span class='line'>  <span class="nt">p</span><span class="nf">#admintxt</span> | Welcome back my master!
</span><span class='line'>  <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Edit Profile&quot;</span><span class="p">,</span> <span class="n">edit_user_path</span><span class="p">(</span><span class="ss">:current</span><span class="p">)</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Logout&quot;</span><span class="p">,</span>       <span class="n">logout_path</span>
</span><span class='line'><span class="p">-</span> <span class="k">elsif</span> <span class="n">current_user</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Edit Profile&quot;</span><span class="p">,</span> <span class="n">edit_user_path</span><span class="p">(</span><span class="ss">:current</span><span class="p">)</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Logout&quot;</span><span class="p">,</span>       <span class="n">logout_path</span>
</span><span class='line'><span class="p">-</span> <span class="k">else</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Register&quot;</span><span class="p">,</span>     <span class="n">new_user_path</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Login&quot;</span><span class="p">,</span>        <span class="n">login_path</span>
</span></code></pre></td></tr></table></div></figure>


<p>ERB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">current_user</span><span class="o">.</span><span class="n">role</span> <span class="o">==</span> <span class="s2">&quot;admin&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;p id=&quot;admintxt&quot;&gt;Welcome back my master!&lt;/p&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Edit Profile&quot;</span><span class="p">,</span> <span class="n">edit_user_path</span><span class="p">(</span><span class="ss">:current</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Logout&quot;</span><span class="p">,</span>       <span class="n">logout_path</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">elsif</span> <span class="n">current_user</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Edit Profile&quot;</span><span class="p">,</span> <span class="n">edit_user_path</span><span class="p">(</span><span class="ss">:current</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Logout&quot;</span><span class="p">,</span>       <span class="n">logout_path</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Register&quot;</span><span class="p">,</span>     <span class="n">new_user_path</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Login&quot;</span><span class="p">,</span>        <span class="n">login_path</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to output code without HTML escaping in place, just use two equals sign <code>==</code>. That’s it!</p>

<p>Before we move on, I definitely should take the time to mention this: As you are hopefully aware of, tons of view code—aka tons of Ruby code in our context—is a serious smell and should be minimized at all times. Just because Slim makes it maybe even more enticing to plaster your templates with tons of logic, does not mean that you should. Practice constraint in that department! Done right on the other hand, Slim makes it really elegant to inject Ruby where needed.</p>

<h2>Inline HTML</h2>

<p>If you feel the need to write HTML in your Slim templates you have the option to. I haven’t used that feature nor would I care to use it but maybe during a transitional phase this could be helpful for newcomers. Let’s have a super quick look.</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">doctype</span> html
</span><span class='line'>&lt;html&gt;
</span><span class='line'>  <span class="nt">head</span>
</span><span class='line'>    <span class="nt">title</span><span class="p"> =</span> <span class="n">full_title</span><span class="p">(</span><span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">))</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="ss">media</span><span class="p">:</span> <span class="s1">&#39;all&#39;</span><span class="p">,</span> <span class="s1">&#39;data-turbolinks-track&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="s1">&#39;data-turbolinks-track&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">csrf_meta_tags</span>
</span><span class='line'>  &lt;body&gt;
</span><span class='line'>    <span class="nt">header</span><span class="nc">.navbar</span>
</span><span class='line'>      <span class="nc">.logo</span>
</span><span class='line'>        <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;sample app&quot;</span><span class="p">,</span> <span class="s1">&#39;root_path&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;logo&quot;</span>
</span><span class='line'>        &lt;nav&gt;
</span><span class='line'>          <span class="nt">ul</span><span class="nc">.navbar-right</span>
</span><span class='line'>            <span class="nt">li</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span>   <span class="s1">&#39;root_path&#39;</span>
</span><span class='line'>            <span class="nt">li</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span>   <span class="s1">&#39;help_path&#39;</span>
</span><span class='line'>            <span class="nt">li</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Log in&quot;</span><span class="p">,</span> <span class="s1">&#39;login_path&#39;</span>
</span><span class='line'>        &lt;/nav&gt;
</span><span class='line'>    <span class="nc">.main</span>
</span><span class='line'>      <span class="p">=</span> <span class="k">yield</span>
</span><span class='line'>  &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>


<p>When Slim encounters the left angle bracket <code>&lt;</code>, it knows that you want to mix in some HTML.</p>

<h2>Verbatim Text (Word for Word)</h2>

<p>The pipe character <code>|</code> signals Slim that you want to have plain text—word for word—and just copies the line. In effect, this let’s you avoid any kind of processing. The documentation says that if you want to write verbatim text over multiple lines, you have to indent the text with each line break.</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="nt">p</span>
</span><span class='line'>    |
</span><span class='line'>      Slim is my new best friend. Slim is my new best friend.
</span></code></pre></td></tr></table></div></figure>


<p>HTML Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    Slim is my new best friend. Slim is my new best friend.
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Screenshot:</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Slim/verbatim-text-screenshot.png"></p>

<p>If you put the text on the same line as the pipe character, you can set the left margin after the pipe plus one single space. Out of curiosity, I fooled a bit around with this and found the following results. Only the last example variation has a little obvious hiccup you should be aware of—it swallows the first word of the sentence.</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="nt">p</span>
</span><span class='line'>    |
</span><span class='line'>      This line is on the left margin.
</span><span class='line'>       This line will have one space in front of it.
</span><span class='line'>         This line will have two spaces in front of it.
</span><span class='line'>            And so on...
</span><span class='line'>
</span><span class='line'>  <span class="nt">p</span>
</span><span class='line'>    | This line is on the left margin.
</span><span class='line'>       This line will have one space in front of it.
</span><span class='line'>         This line will have two spaces in front of it.
</span><span class='line'>            And so on...
</span><span class='line'>
</span><span class='line'>  <span class="nt">p</span> This line is on the left margin.
</span><span class='line'>       <span class="nt">This</span> line will have one space in front of it.
</span><span class='line'>         <span class="nt">This</span> line will have two spaces in front of it.
</span><span class='line'>            <span class="nt">And</span> so on...
</span><span class='line'>
</span><span class='line'>  <span class="nt">p</span> This line is on the left margin.
</span><span class='line'>    <span class="nt">This</span> line will have one space in front of it.
</span><span class='line'>    <span class="nt">This</span> line will have two spaces in front of it.
</span><span class='line'>    <span class="nt">And</span> so on...
</span><span class='line'>
</span><span class='line'>  <span class="nt">p</span>
</span><span class='line'>    <span class="nt">This</span> line is on the left margin.
</span><span class='line'>    <span class="nt">This</span> line will have one space in front of it.
</span><span class='line'>    <span class="nt">This</span> line will have two spaces in front of it.
</span><span class='line'>    <span class="nt">And</span> so on...
</span></code></pre></td></tr></table></div></figure>


<p>Screenshot:</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Slim/multiple-verbatim-text-screenshot.png"></p>

<p>The output how it’s rendered into your HTML markup differs a bit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      This line is on the left margin.
</span><span class='line'>       This line will have one space in front of it.
</span><span class='line'>         This line will have two spaces in front of it.
</span><span class='line'>            And so on...
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      This line is on the left margin.
</span><span class='line'>       This line will have one space in front of it.
</span><span class='line'>         This line will have two spaces in front of it.
</span><span class='line'>           And so on...
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      This line is on the left margin.
</span><span class='line'>         This line will have one space in front of it.
</span><span class='line'>           This line will have two spaces in front of it.
</span><span class='line'>             And so on...
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      This line is on the left margin.
</span><span class='line'>      This line will have one space in front of it.
</span><span class='line'>      This line will have two spaces in front of it.
</span><span class='line'>      And so on...
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;This&gt;</span>line is on the left margin.<span class="nt">&lt;/This&gt;&lt;This&gt;</span>line will have one space in front of it.<span class="nt">&lt;/This&gt;&lt;This&gt;</span>line will have two spaces in front of it.<span class="nt">&lt;/This&gt;&lt;And&gt;</span>so on...<span class="nt">&lt;/And&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Comments</h2>

<p>Of course it’s necessary to comment out your code every once in a while. Don’t forget though that too many comments are a smell as well. Just try to keep it to an absolute minimum!
A forward slash <code>/</code> is all you need to comment out any code.</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="cp">/p</span>
</span><span class='line'>    <span class="cp">| This line is on the left margin.</span>
</span><span class='line'>       <span class="cp">This line will have one space in front of it.</span>
</span><span class='line'>         <span class="cp">This line will have two spaces in front of it.</span>
</span><span class='line'>           <span class="cp">And so on...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boom! And now this paragraph is gone from the page. This comment leaves no trace in the final HTML markup. You just need to apply it to the parent selector and all its children will be commented out as well. So, even comments are slim and minimal.</p>

<p>If on the other hand you want some HTML comment <code>&lt;!--  --&gt;</code> that shows up in the final output rendered, you just need to add an exclamation mark <code>!</code> after the slash.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="cp">/!p</span>
</span><span class='line'>    <span class="cp">| This line is on the left margin.</span>
</span><span class='line'>       <span class="cp">This line will have one space in front of it.</span>
</span><span class='line'>         <span class="cp">This line will have two spaces in front of it.</span>
</span><span class='line'>           <span class="cp">And so on...</span>
</span></code></pre></td></tr></table></div></figure>


<p>HTML Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--p</span>
</span><span class='line'><span class="c">      | This line is on the left margin.</span>
</span><span class='line'><span class="c">        This line will have one space in front of it.</span>
</span><span class='line'><span class="c">          This line will have two spaces in front of it.</span>
</span><span class='line'><span class="c">            And so on...--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Neat!</p>

<h2>Custom Shortcuts</h2>

<p>We have been using shortcuts all along. When you type a dot <code>.</code> or a hash symbol <code>#</code> you tell Slim that you want to use predefined shortcuts for classes and ids. That’s certainly a very nice default but what can you do to expand on that and create your own little snippety snippets. We can do this for tags and attributes alike. Welcome to the awesomeness of Slim!</p>

<p>In Rails we just need to set up an initializer with the following pattern:</p>

<h4>config/initializers/slim.rb</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Slim</span><span class="o">::</span><span class="no">Engine</span><span class="o">.</span><span class="n">set_options</span> <span class="ss">shortcut</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;c&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">tag</span><span class="p">:</span> <span class="s1">&#39;container&#39;</span><span class="p">},</span> <span class="s1">&#39;#&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="kp">attr</span><span class="p">:</span> <span class="s1">&#39;id&#39;</span><span class="p">},</span> <span class="s1">&#39;.&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="kp">attr</span><span class="p">:</span> <span class="s1">&#39;class&#39;</span><span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Sinatra apps, you simply add the same configuration anywhere below the line where you <code>require 'slim'</code>.</p>

<h5>your_sinatra_app.rb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;slim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Slim</span><span class="o">::</span><span class="no">Engine</span><span class="o">.</span><span class="n">set_options</span> <span class="ss">shortcut</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;c&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">tag</span><span class="p">:</span> <span class="s1">&#39;container&#39;</span><span class="p">},</span> <span class="s1">&#39;#&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="kp">attr</span><span class="p">:</span> <span class="s1">&#39;id&#39;</span><span class="p">},</span> <span class="s1">&#39;.&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="kp">attr</span><span class="p">:</span> <span class="s1">&#39;class&#39;</span><span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="n">slim</span> <span class="ss">:index</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">__END__</span>
</span><span class='line'>
</span><span class='line'><span class="cp">@@ index</span>
</span><span class='line'><span class="cp">doctype html</span>
</span><span class='line'><span class="cp">html</span>
</span><span class='line'><span class="cp">  head</span>
</span><span class='line'><span class="cp">    title Slim Templates</span>
</span><span class='line'><span class="cp">    body</span>
</span><span class='line'><span class="cp">      h1 Boss Level Templates With Slim</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can set options on the Slim::Engine by providing a hash with the shortcut you need. In the example above, we instrucuted Slim to use <code>c</code> as a shortcut for a <code>container</code> tag. You would use it like this in your Slim files:</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">c</span><span class="nc">.content</span> Now you have a container tag with a .content class.
</span></code></pre></td></tr></table></div></figure>


<p>And the rendered HTML would look like this of course:</p>

<p>HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;container</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Now you have a container tag with a .content class.
</span><span class='line'><span class="nt">&lt;/container&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty nice huh? But you didn’t think that’s where the music stops, did you? We can take this further than that. Let me give you an example that is a bit more involved:</p>

<h4>config/initializers/slim.rb</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Slim</span><span class="o">::</span><span class="no">Engine</span><span class="o">.</span><span class="n">set_options</span> <span class="ss">shortcut</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;#&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="kp">attr</span><span class="p">:</span> <span class="s1">&#39;id&#39;</span><span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;.&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="kp">attr</span><span class="p">:</span> <span class="s1">&#39;class&#39;</span><span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;c&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">tag</span><span class="p">:</span> <span class="s1">&#39;container&#39;</span><span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;&amp;&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">tag</span><span class="p">:</span> <span class="s1">&#39;input&#39;</span><span class="p">,</span> <span class="kp">attr</span><span class="p">:</span> <span class="s1">&#39;type&#39;</span><span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;@&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="kp">attr</span><span class="p">:</span> <span class="s1">&#39;role&#39;</span><span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;^&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="kp">attr</span><span class="p">:</span> <span class="sx">%w(data-role role)</span><span class="p">}</span>
</span><span class='line'>           <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example I did not only create a custom tags but also provided handy custom attributes. Let’s dissect this step by step. Btw, I broke the options hash over several lines to keep it readable and to avoid having a long line of code that nobody likes to stumble upon. Reads much nicer, don’t you think?</p>

<p>Via the ampersand symbol <code>&amp;</code>, we can now create an input tag and we just need to feed it a type—which immediately follows the ampersand. Btw, we can use any symbol that makes sense to use. No need to use the same that I did. Be careful though and try to make uncompromising decisions in that department.</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'>&amp;text name=&quot;user&quot;
</span><span class='line'>&amp;password name=&quot;pw&quot;
</span><span class='line'>&amp;submit
</span></code></pre></td></tr></table></div></figure>


<p>HTML Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;user&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;pw&quot;</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you make changes to this initializer with your custom shortcuts you shouldn’t forget to restart your local server. Without that your changes won’t be reflected during preprocessing.</p>

<p>Next, if I need a <code>role</code> attribute, I can now just prefix it with an <code>@</code> symbol.</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nc">.person</span>@admin Daniel Mendler
</span></code></pre></td></tr></table></div></figure>


<p>HTML Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;person&quot;</span> <span class="na">role=</span><span class="s">&quot;admin&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Daniel Mendler
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Refresher: The role attribute is a semantic approach to describe the role of the element in question—if you need to determine the purpose of the element.</p>

<p>See, via the dot we get a <code>class="person"</code> class and the <code>@admin</code> gave us a <code>role="admin"</code>. Pretty handy dandy but we can take this one little step further and use an array to specify multiple attributes that should get created via one single shortcut.</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nc">.nifty</span>^hacker CrackDoctor
</span></code></pre></td></tr></table></div></figure>


<p>HTML Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;nifty&quot;</span> <span class="na">data-role=</span><span class="s">&quot;hacker&quot;</span> <span class="na">role=</span><span class="s">&quot;hacker&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  CrackDoctor
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because we associated an array of attributes for our <code>^</code> shortcut, Slim creates <code>data-role</code> and <code>role</code> attributes simultaneously via a single symbol. That can come in pretty handy. Imagine if you want to output an element similar to the following and can do it concise with shortcut and some Ruby code.</p>

<p>HTML</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;source</span> <span class="na">src=</span><span class="s">&quot;track1.mp3&quot;</span> <span class="na">type=</span><span class="s">&quot;audio/mpeg&quot;</span> <span class="na">data-duration=</span><span class="s">&quot;1min5secs&quot;</span> <span class="na">data-tempo=</span><span class="s">&quot;125bpm&quot;</span> <span class="na">data-artist=</span><span class="s">&quot;The Beatles&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Writing all of this by hand seems not the best use of your time—we have code to do that job for us. Well, there you have it, that’s all you need to know to create your own set of awesome shortcuts—or to create a big mess when you don’t practice a bit of constraint. I would recommend to not go overboard with this—especially try to stay away from defining shortcuts that use symbols that Slim is already attached to.</p>

<p>Refresher: The data- attributes are used to have some private data on your page / application. Stuff that helps you filter content for example. They are custom attributes which can be used on all HTML elements. Using them for JavaScript purposes is another common practice. It is also very handy for testing elements on a page if you want to make sure that particular elements show up and you want to avoid that designers mess with your styles.</p>

<h2>Configuring Slim</h2>

<p>Before you leave, I wanted to show you a little sneak peek into the vast configuration options and how you apply them. For Rails, you’d create an enviromnent file like <code>config/environments/development.rb</code> and specify the options you need. You simply place your configuration some place inside the <code>Rails.application.configure</code> block.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Slim</span><span class="o">::</span><span class="no">Engine</span><span class="o">.</span><span class="n">set_options</span> <span class="ss">default_tag</span><span class="p">:</span> <span class="s1">&#39;p&#39;</span><span class="p">,</span>
</span><span class='line'>                           <span class="ss">tabsize</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                           <span class="ss">attr_list_delims</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;(&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;)&#39;</span><span class="p">,</span>
</span><span class='line'>                                              <span class="s1">&#39;[&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;]&#39;</span><span class="p">,</span>
</span><span class='line'>                                              <span class="s1">&#39;{&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;}&#39;</span><span class="p">,</span>
</span><span class='line'>                                              <span class="s1">&#39;«&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;»&#39;</span><span class="p">,</span>
</span><span class='line'>                                              <span class="s1">&#39;‹&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;›&#39;</span>
</span><span class='line'>                                              <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this configuration I made sure the default tag that gets created if a tag name is omitted is a <code>&lt;p&gt;</code> tag—not a <code>div</code> tag, which is the standard setting. Also, I adjusted the tabsize to use 2 white spaces and finally added two more delimiters for wrapping attributes of tags. Now I can use <code>‹ ›</code> and <code>« »</code> as well for that. Not terribly useful but good for demonstration purposes. In the example below, you can see that all delimiters for attribute wrappers create the same output—also that <code>.some-class</code> or <code>#some-id</code> creates <code>&lt;p&gt;</code> tags per default.</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="nf">#zeroth</span>
</span><span class='line'>  <span class="nt">a</span>{href=&quot;http://slim-lang.com&quot; title=&#39;Home page&#39;} Goto the home page
</span><span class='line'>
</span><span class='line'>  <span class="nc">.first</span>
</span><span class='line'>  <span class="nt">a</span>[href=&quot;http://slim-lang.com&quot; title=&#39;Home page&#39;] Goto the home page
</span><span class='line'>
</span><span class='line'>  <span class="nc">.second</span>
</span><span class='line'>  <span class="nt">a</span>(href=&quot;http://slim-lang.com&quot; title=&#39;Home page&#39;) Goto the home page
</span><span class='line'>
</span><span class='line'>  <span class="nc">.third</span>
</span><span class='line'>  <span class="nt">a</span>‹href=&quot;http://slim-lang.com&quot; title=&#39;Home page&#39;› Goto the home page
</span><span class='line'>
</span><span class='line'>  <span class="nc">.fourth</span>
</span><span class='line'>  <span class="nt">a</span>«href=&quot;http://slim-lang.com&quot; title=&#39;Home page&#39;» Goto the home page
</span></code></pre></td></tr></table></div></figure>


<p>HTML Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;zeroth&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://slim-lang.com&quot;</span> <span class="na">title=</span><span class="s">&quot;Home page&quot;</span><span class="nt">&gt;</span>Goto the home page<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;first&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://slim-lang.com&quot;</span> <span class="na">title=</span><span class="s">&quot;Home page&quot;</span><span class="nt">&gt;</span>Goto the home page<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;second&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://slim-lang.com&quot;</span> <span class="na">title=</span><span class="s">&quot;Home page&quot;</span><span class="nt">&gt;</span>Goto the home page<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;third&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://slim-lang.com&quot;</span> <span class="na">title=</span><span class="s">&quot;Home page&quot;</span><span class="nt">&gt;</span>Goto the home page<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;fourth&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://slim-lang.com&quot;</span> <span class="na">title=</span><span class="s">&quot;Home page&quot;</span><span class="nt">&gt;</span>Goto the home page<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively, you can also set this stuff in <code>config/initializers/slim.rb</code> as I showed you in the section about custom shortcuts. For Sinatra it’s the same drill as discussed in the shortcuts section as well. Just set your options somewhere below your <code>require 'slim'</code> statement and you are good to go. Take a look at the <a href="http://www.rubydoc.info/gems/slim/frames#Configuring_Slim">documentation</a> under “Available options” to read more about what is available for configuration. Slim gives you many options to play with.</p>

<h2>Final Thoughts</h2>

<p>That’s basically it. There are a one or two more advanced topics that you should dig into if needed but I thought they are mostly not beginner-friendly nor heavily used on a day-to-day basis. I wanted to keep things simple and show you all you need for quickly switching to this awesome, awesome templating engine. Have fun, hope it’s now also one of your favorite new toys!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AntiPatterns Basics Rails—Tests]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2016/02/10/AntiPattern-Basics-Rails-Tests/"/>
    <updated>2016-02-10T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2016/02/10/AntiPattern-Basics-Rails-Tests</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/AntiPatterns/Tests/electric-wiring.jpg" width="500"></p>

<h2>Heads Up</h2>

<p>Anti- what? It probably sounds a lot more complicated than it is. Over the last couple of decades, programmers were able to identify a useful selection of “design” patterns that frequently occurred throughout their code solutions. While solving similar problems, they were able to classify solutions that prevented them from reinventing the wheel for every project. It is important to note that these patterns should be seen more as discoveries than the inventions of a group of advanced developers.</p>

<p>AntiPatterns—as the name implies—on the other hand represent pretty much the opposite. They are discoveries of solutions to problems that you should definitely avoid. They often represent the work of inexperienced coders who don’t know what they don’t know yet. Worse, it could be the output of a lazy person who just ignores best practices for no good reason—or they think they don’t. What they might hope to gain in time savings in the beginning by hammering out quick, lazy or dirty solutions is gonna haunt them or some sorry successor later in the project’s life cycle. Do not underestimate the implications or these bad decisions, they’re gonna plague you like a curse—no matter what.</p>

<p>This one is exactly written for you if all this sounds rather new to you and you identify yourself as being more on the beginner side of all things Ruby / Rails. I think, it’s best if you approach these articles as quick skinny-dips into a much deeper topic whose mastery will not happen overnight. Nevertheless, I strongly believe that starting to get into this early will benefit beginners and their mentors tremendously.</p>

<h2>Topics</h2>

<ul>
<li>Let</li>
<li>Mystery Guests</li>
<li>Obscure Tests</li>
<li>Slow Tests</li>
<li>Fixtures</li>
<li>Brittle Tests</li>
<li>Data Atributes</li>
</ul>


<h2>Let</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Mission</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:james_bond</span><span class="p">)</span>   <span class="p">{</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:agent</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;James Bond&#39;</span><span class="p">,</span> <span class="ss">number</span><span class="p">:</span> <span class="s1">&#39;007&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:mission</span><span class="p">)</span>      <span class="p">{</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:mission</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Moonraker&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>let</code> helper method in RSpec is very frequently used for creating instance variables that are available between multiple tests. As an eager student of TDD practices, you have probably written your fair share of these but following this practice can easily lead to having lots of mystery guests showing up—see below—which is definitely not something we need to have crashing our party! This particular side effect of <code>let</code> has gained a bit of a reputation to be possibly causing increased test maintenance and inferior readability throughout your test suite. <code>let</code> sure sounds enticing because it’s lazily evaluated and aids adhering to the usually zero-defect concept of DRY and all. Therefore it seems too good not to use on a regular basis. Its close cousin <code>subject</code> should also be avoided most of the time.</p>

<p>It gets worse when you start nesting these things. An all-time favorite are let statements that are plastered all over nested <code>describe</code> blocks. I think it’s not unfair to call this a recipe for hanging yourself—quickly. More limited scope is generally easier to understand and follow. We don’t want to build a house of cards with semi-global let fixtures that obscure understanding and increase chances of breaking related tests. The odds of crafting quality code are stacked against us with such an approach. Extracting common object setup is also easier to do via plain old ruby methods or even classes if needed.</p>

<p>This <code>let</code> creature is a widely shared fixture which will often need to be deciphered first before you know exactly what business this object has in your tests. Also going back and forth to understand what exactly they are made of and which relationships they have via associations can be a time consuming pain. The clarity of these details in your test setup usually help a lot to tell other developers all they need to work with every particular part of your test suite—don’t forget your future self! In a world where you never have to revisit particular tests and even never refactor parts of your test suite that might not matter as much—but that is a pipe dream for now!</p>

<p>We want to have as few collaborators and as little data as possible for each test. <code>let</code> works not in your favor on that front as well. These let fixtures can amass a lot of attributes and methods that make them way too big as well. If you start going down the let road, you will often end up with pretty fat objects that try to make a lot of tests happy at the same time. Sure you can create lots of variations of these <code>let</code> thingies but that makes the whole idea of them a bit irrelevant I think. Why not go one step further, avoid let and rely on Ruby without RSpec DSL magic?</p>

<p>I’m more in the camp of being rather on the side of repeated setup code for each test than being overly DRY, obscure or cryptic in my test suite. I’d always go for more readability. The test method should make clear the cause and effect of its involved pieces—using object collaborators that are possibly defined far away from your test exercise is not in your best interest. If you need to extract stuff, use expressive methods that encapsulate that knowledge. These are pretty much always a save bet. That way you can also supply the setup that you actually need for each test and not cause slow tests because you have unnecessary data involved. Good old variables, methods and classes are often all you need to provide faster, stable tests that are easier to read.</p>

<h2>Mystery Guests</h2>

<p>Mystery Guests are RSpec DSL Puzzles really. For a while, the various objects defined via RSpec DSL <code>let</code> are not that hard to keep in check but soon when the test suite grows, you invite a lot of mysterious guests into your specs. This gives your future self and others unnecessary context puzzles to solve. The result will be obscure tests that require you to go into full Sherlock Holmes mode. I guess that sounds way more fun than it is. Bottom line, it’s a waste of everybody’s time.</p>

<p>Mystery Guests pose two problematic questions:</p>

<ul>
<li>Where is this object coming from?</li>
<li>What exactly is it composed of?</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Mission</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:agent_01</span><span class="p">)</span>   <span class="p">{</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:agent</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;James Bond&#39;</span><span class="p">,</span> <span class="ss">number</span><span class="p">:</span> <span class="s1">&#39;007&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:agent_02</span><span class="p">)</span>   <span class="p">{</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:agent</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Moneypenny&#39;</span><span class="p">,</span> <span class="ss">number</span><span class="p">:</span> <span class="s1">&#39;243&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span>   <span class="p">{</span> <span class="s1">&#39;Moonraker&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:mission</span><span class="p">)</span> <span class="p">{</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:mission</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="n">title</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">mission</span><span class="o">.</span><span class="n">agents</span> <span class="o">&lt;&lt;</span> <span class="n">agent_01</span> <span class="o">&lt;&lt;</span> <span class="n">agent_02</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="c1">#lots of other tests</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#top_agent&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns highest ranking agent associated to a mission&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">mission</span><span class="o">.</span><span class="n">top_agent</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s1">&#39;James Bond&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>This describe block for <code>#top_agent</code> lacks clarity and context. What agent is involved and what mission are we talking about here? This forces developers to go hunting for objects that are suddenly popping up in your tests. Classic example of a mystery guest. When we have lots of code between the relevant test and the origin of these objects, you increase the chances of obscuring what’s going on in our tests.</p>

<p>The solution is quite easy: You need fresh “fixtures” and build local versions of the objects with exactly the data that you need—and not more than that! Factory Girl is a good choice for handling this. This approach can be considered more verbose and you might be duplicating stuff sometimes—extracting stuff into a method is often a good idea—but it’s a lot more expressive and keeps tests focused while providing context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Mission</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="c1">#lots of other tests</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#top_agent&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns a list of all agents associated to a mission&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">agent_01</span> <span class="o">=</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:agent</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;James Bond&#39;</span><span class="p">,</span> <span class="n">number</span> <span class="s1">&#39;007&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">agent_02</span> <span class="o">=</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:agent</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Moneypenny&#39;</span><span class="p">,</span> <span class="n">number</span> <span class="s1">&#39;243&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mission</span>  <span class="o">=</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:mission</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Moonraker&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mission</span><span class="o">.</span><span class="n">agents</span> <span class="o">&lt;&lt;</span> <span class="n">agent_01</span> <span class="o">&lt;&lt;</span> <span class="n">agent_02</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">mission</span><span class="o">.</span><span class="n">top_agent</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s1">&#39;James Bond&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The example above builds all the objects needed for our tests in the actual test case and provides all the context wanted. The developer can stay focused on a particular test case and does not need to “download” another—possibly totally unrelated—test case for dealing with the situation at hand. No more obscurity!</p>

<p>Yes, you are right, this approach means that we are not achieving the lowest level of duplication possible, but clarity in these cases is much more important for the quality of your test suite and therefore for the robustness of your project. The speed in which you can effectively apply changes to your tests plays also a role in that regard. Another important aspect of testing is that your test suite can not only function as documentation but absolutely should! Zero duplication is not a goal that has a positive effect for specs documenting your app. Keeping unnecessary duplication in check is nevertheless an important goal to not loose sight of—balance is king here!</p>

<h2>Obscure Tests</h2>

<p>Below is another example that tries to setup everything you need locally in the test but also fails because it’s not telling us the full story.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">context</span> <span class="s2">&quot;agent status&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;returns the status of the mission’s agent&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">double_o_seven</span> <span class="o">=</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:agent</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mission</span> <span class="o">=</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:mission</span><span class="p">,</span> <span class="ss">agent</span><span class="p">:</span> <span class="n">double_o_seven</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">mission</span><span class="o">.</span><span class="n">agent_status</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">double_o_seven</span><span class="o">.</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are creating a generic agent. How do we know it’s 007? We are also testing for the agent’s status but it’s also nowhere to be found—neither in the setup nor explicitly during the verify phase in our <code>expect</code> statement. The relationship between the <code>double_o_seven.status</code> and the mission status could be confusing since it’s coming out of nowhere really. We can do better:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">context</span> <span class="s2">&quot;agent status&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;returns the status of the mission’s agent&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">double_o_seven</span> <span class="o">=</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:agent</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;James Bond&#39;</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="s1">&#39;Missing in action&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">mission</span> <span class="o">=</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:mission</span><span class="p">,</span> <span class="ss">agent</span><span class="p">:</span> <span class="n">double_o_seven</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">mission</span><span class="o">.</span><span class="n">agent_status</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s1">&#39;James Bond: Missing in action&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, here we have all we need to tell a story. All the data we need is right in front of us.</p>

<h2>Slow Tests</h2>

<p>So, you have started to get into Test-Driven-Development and you started to appreciate what if offers. Kudos, this is great! I’m sure, neither the decision to do it nor the learning curve to get there were exactly a piece of cake. But what often happens after this initial  step is that you try hard at having full test coverage and you start to realize that something is off when the speed of your specs start to annoy you. Why is your test suite getting slower and slower although you think you are doing all the right things? Feeling a bit punished for writing tests? Slow tests suck—big time! There are a couple of problems with them. The most important issue is that slow tests lead to skipping tests in the long run. Once you are at a point where your test suite takes forever to finish, you will be much more willing to think to yourself: “Screw this, I’ll run them later! I got better things to do than waiting for this stuff to finish.” And you are absolutely right, you have better things to do.</p>

<p>The thing is, slow tests are more likely to welcome in compromises in the quality of your code than maybe obvious at first. Slow tests also fuel people’s arguments against TDD—unfairly so I think. I don’t even want to know what non-technical product managers have to say if you regularly have to step outside for a nice long coffee break just to run your test suite before you can continue your work. Let’s not go down that road! When you only need little time to exercise your tests and as a result get super quick feedback cycles for developing each step of new features, practicing TDD becomes a lot more attractive and less of an argument. With a little bit of work and care along the way, we can avoid slow mo tests quite effectively. Slow tests are also a killer for getting into the “zone”. If you get taken out of the flow this frequently in your process, the quality of your overall work might also suffer by having to wait for slow tests to return from an expensive round trip. You want to get as much “in-the-zone time” as possible—unbearably slow tests are major flow killers.</p>

<p>Another issue worth mentioning in this context is that this might lead to having tests that cover your code, but because you won’t take time to finish exercising the whole suite, or write tests after the fact, your apps’ design won’t be driven by tests anymore. If you are not on the Test-Driven hype train this might not bother you much, but for TDD folks, that aspect is essential and should not be neglected. Bottom line, the faster your tests, the more you will be willing to exercise them—which is the best way to design apps as well as to catch bugs early and often. What can we do to speed up tests? There are two speeds that are important here:</p>

<ul>
<li>The speed in which your tests can really execute your suite.</li>
<li>The speed for getting feedback from your test suite to design your app.</li>
</ul>


<h3>Avoid writing to the database as much as you can.</h3>

<p>That does not mean that you should avoid it all costs. Often you don’t need to write tests that exercise the database and you can trim off a lot of time that your tests need to run. Using just <code>new</code> to instantiate an object is often sufficient for test setups. Faking out objects that are not directly under test is another viable option. Creating test doubles is a nice way to make your tests faster while keeping the collaborating objects you need for your setup super focused and lightweight. <a href="https://github.com/thoughtbot/factory_girl">Factory Girl</a> also gives you various options to smartly “create” your test data. But sometimes there is no way around to saving to the database (which is a lot less often than you might expect) and this is exactly where you should draw the line. Any other time, avoid it like hell and your test suite will stay fast and agile. In that regard you should also aim for a minimal amount of dependencies, which means the minimal amount of objects that you need collaborating to get your tests to pass—while saving as less as possible to the database along the way. Stubbing out objects—that are mere collaborators and not directly under test—often also make your setup easier to digest and simpler to create. A nice speed boost overall with very little effort.</p>

<h3>Build your tests with the testing pyramid in mind.</h3>

<p>This means that you want to have a majority of unit tests at the bottom of this hierarchy—which all focus on very specific parts of your application in isolation—and the smallest amount of integration tests at the top of this pyramid. Integration tests simulate a user going through your system while interacting with a bunch of components that are exercised around the same time. They are easy to write but not so easy to maintain—and the speed losses are not worth going the easy route. Integration tests are pretty much the opposite of unit tests in regard to being high level and sucking in a lot of components that you need to setup in your tests—which is one major reason why they are slower than unit tests. I guess this makes it clear why they should be at the top of your testing pyramid to avoid significant speed losses. Another important issue here is that you want to have as little overlap between these two test categories as possible—you ideally want to test things only once after all. You can’t expect to have perfect separation, but aiming for as little as possible is a reasonable and achievable goal.</p>

<p>In contrast to unit tests, you want to test as few details as possible with integration tests. The inner mechanics should already be covered by extensive unit tests. Focus instead only on the most essential parts that the interactions need to be capable of exercising! The other main reason is that a webdriver needs to simulate going through a browser and interacting with a page. This approach fakes out nothing or very little, saves the stuff to the database and really goes through the UI. That’s also one reason they can be called acceptance tests because these tests try to simulate a real user experience. This is another major speed bump that you want to exercise as little as possible. If you have a ton of these tests—I guess more than 10% from your overall number of tests—you should slow down and reduce that number to the minimum amount possible. Also, keep in mind that sometimes you don’t need to exercise the whole app—a smaller, focused view test often does the trick as well. You will be much faster if you rewrite a couple of your integration tests that just test a little bit of logic that does not necessitate a full integration check. But don’t get into writing a ton of them either, they offer the least bang for the buck. That being said, intergration tests are vital to the quality of your test suite and you need to find a balance of being too stingy applying them and not having too much of them around.</p>

<h3>Getting feedback from your app / tests fast.</h3>

<p>Quick feedback and fast iteration cycles are key to designing your objects. Once you start to avoid running these tests frequently, you are loosing this advantage—which is a big aid for designing objects. Don’t wait until your Continuous Intergration service of choice kicks in to test your whole application. So what’s a magic number we should keep in mind when running tests? Well, different people will tell you different benchmarks for this. I think that staying under 30 seconds is a very reasonable number that makes it very likely to exercise a full test on a regular basis. If you leave that benchmark more and more behind, some refactoring might be in order. It will be worth it and it will make you feel much more comfortable because you can check in more regularly. You will most likely move forward a lot faster too.</p>

<p>You want that dialog with your tests to be as fast as possible. Tightening this feedback cycle by using an editor that can also exercise your tests is not to be underestimated. Switching back and forth between your editor and your terminal is NOT the best solution to handle this. This gets old very quickly. If you like using Vim, you have one more reason to invest some time to become more efficient at using your editor. Lots of handy tools available for Vim peeps. I remember that Sublime Text also offers to run tests from within the editor but other than that, you need to do a little bit of research to find out what your editor of choice is capable of in that regard. The argument that you will hear frequently from TDD enthusiasts is that you don’t want to leave your editor because overall, you will be spending too much time doing that. You want to stay much more in the zone and not lose train of thought when you can do this sorta thing via a fast shortcut from inside your code editor.</p>

<p>Another thing to note is that you also want to be able to slice the tests that you want to run. If you don’t need to run the whole file, it’s nice to run a single test or a block that focuses just on what you need to get feedback on right now. Having shortcuts that help you run single tests, single files or just the last test again saves you a ton of time and keeps you in the zone—not to mention the high degree of convenience and feeling super dandy cool as well. It’s just amazing how awesome coding tools can be sometimes.</p>

<p>On last thing for the road. Use a preloader like <a href="https://github.com/rails/spring">Spring</a>. You will be surprised how much time you can shave off when you don’t have to load Rails for every test run. Your app will run in the background and does not need to boot all the time. DO it!</p>

<h2>Fixtures</h2>

<p>I’m not sure if fixtures are still an issue for newbies coming to Ruby / Rails land. In case nobody instructed you about them, I’ll try to get you up to speed in a jiffy on these dreaded things. ActiveRecord database fixtures are great examples of having tons of Mystery Guests in your test suite. In the early days of Rails and Ruby TDD, YAML fixtures were the de facto standard for setting up test data in your application. They played an important role and helped move the industry forward. Nowadays, they have a reasonable bad rep though.</p>

<h4>YAML Fixtures</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">Quartermaster</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Q</span>
</span><span class='line'>  <span class="l-Scalar-Plain">favorite_gadget</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Broom radio</span>
</span><span class='line'>  <span class="l-Scalar-Plain">skills</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Inventing gizmos and hacking</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">00 Agent</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">James Bond</span>
</span><span class='line'>  <span class="l-Scalar-Plain">favorite_gadget</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Submarine Lotus Esprit</span>
</span><span class='line'>  <span class="l-Scalar-Plain">skills</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Getting Bond Girls killed and covert infiltration</span>
</span></code></pre></td></tr></table></div></figure>


<p>The hash-like structure sure looks handy and easy to use. You can even reference other nodes if you want to simulate associations from your models. But that’s where the music stops and many say their pain begins. For data sets that are a bit more involved, YAML fixtures are difficult to maintain and hard to change without affecting other tests. I mean, you can make them work of course—after all, developers used them plenty in the past—but tons of developers will agree that the price to pay for managing fixtures is just a bit stingy.</p>

<p>One scenario we definitely want to avoid is changing little details on an existing fixture and causing tons of tests to fail. If these failing tests are unrelated, the situation is even worse—a good example of tests being too brittle. In order to “protect” existing tests from this scenario, this can also lead to growing your fixture set beyond any reasonable size—being DRY with fixtures is most likely not on the table anymore at that point. To avoid breaking your test data when the inevitable changes occur, developers where happy to adopt newer strategies that offered more flexibility and dynamic behaviour. That’s where <a href="https://github.com/thoughtbot/factory_girl">Factory Girl</a> came in and kissed the YAML days goodbye. Another issue is the heavy dependency between the test and the .yml fixture file. Since the fixtures are defined in a separte .yml file, mystery guests are also a major pain waiting to bite you due to being obscure. Did I mention that fixtures are imported into the test database without running through any validations and don’t adhere to the Active Record life cycle? Yeah, that’s not awesome as well—from whatever angle you wanna look at it!</p>

<p>Factory Girl let’s you avoid all that by creating objects relevant to the tests inline—and only with the data needed for that specific case. The motto is, only define the bare minimum in your factory definitions and add the rest on a test-by-test basis. Locally (in your tests) overriding default values defined in your factories is a much better approach than having tons of fixture unicorns waiting to be outdated in a fixture file. This approach is more scalable too. Factory Girl gives you plenty of tools to create all the data you need—as nuanced as you like—but also provides you tons of ammo to stay DRY where needed. The pros and cons are nicely balanced with this library I think. Not dealing with validations is also not a cause of concern anymore. I think using the factory pattern for test data is more than pretty reasonable and is one major cause why Factory Girl was so well received by the community. Complexity is a fast growing enemy that YAML fixtures are hardly equipped to take on effectively. In some way, I think of fixtures as <code>let</code> on steroids. You are not only placing them even further away—being in a separate file and all—you are also potentially preloading way more fixtures than you might actually need. RIP!</p>

<h2>Brittle Tests</h2>

<p>If changes in your specs lead to seemingly unrelated failures in other tests, you are likely looking at a test suite that has become fragile due to causes mentioned above. These often puzzle-like, mystery guest infested tests easily lead to an unstable house of cards. When objects necessary for tests are defined “far away” from the actual test scenario, it’s not that hard to overlook the relationships that these objects have with their tests. When code gets deleted, adjusted or simply the setup object in question gets accidentally overridden—unaware how this could influence other tests around—failing tests are not a rare encounter. They easily appear like totally unrelated failures. I think it’s fair to include such scenarios into the category of tightly coupled code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Mission</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:agent</span><span class="p">)</span>   <span class="p">{</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:agent</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;James Bond&#39;</span><span class="p">,</span> <span class="ss">number</span><span class="p">:</span> <span class="s1">&#39;007&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span>   <span class="p">{</span> <span class="s1">&#39;Moonraker&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:mission</span><span class="p">)</span> <span class="p">{</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:mission</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="n">title</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="c1">#lots of other tests</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#joint_operation_agent_name&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:agent</span><span class="p">)</span> <span class="p">{</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:agent</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Felix Leiter&#39;</span><span class="p">,</span> <span class="ss">agency</span><span class="p">:</span> <span class="s1">&#39;CIA&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mission</span><span class="o">.</span><span class="n">agents</span> <span class="o">&lt;&lt;</span> <span class="n">agent</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="err">“</span><span class="n">returns</span> <span class="n">mission</span><span class="err">’</span><span class="n">s</span> <span class="n">joint</span> <span class="n">operation</span><span class="err">’</span><span class="n">s</span> <span class="n">agent</span> <span class="nb">name</span><span class="err">”</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">mission</span><span class="o">.</span><span class="n">joint_operation_agent_name</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s1">&#39;Felix Leiter&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this scenario we have clearly modified locally an objects’s state which was defined in our setup. The <code>agent</code> in question is now a CIA operative and has a different name. <code>mission</code> comes again out of nowhere as well. Nasty stuff really. No surprise when other tests that possibly rely on a different version of <code>agent</code> start to blow up. Let’s get rid of the <code>let</code> nonsense and build the objects we need again right where we test them—with only the attributes we need for the test case of course.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Mission</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="c1">#lots of other tests</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#joint_operation_agent_name&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">agent</span>   <span class="o">=</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:agent</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Felix Leiter&#39;</span><span class="p">,</span> <span class="ss">agency</span><span class="p">:</span> <span class="s1">&#39;CIA&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mission</span> <span class="o">=</span> <span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:mission</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mission</span><span class="o">.</span><span class="n">agents</span> <span class="o">&lt;&lt;</span> <span class="n">agent</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="err">“</span><span class="n">returns</span> <span class="n">mission</span><span class="err">’</span><span class="n">s</span> <span class="n">joint</span> <span class="n">operation</span><span class="err">’</span><span class="n">s</span> <span class="n">agent</span> <span class="nb">name</span><span class="err">”</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">mission</span><span class="o">.</span><span class="n">joint_operation_agent_name</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s1">&#39;Felix Leiter&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is important to understand how objects are related—ideally with the minimum amount of setup code. You don’t want to send other developers on a wild goose chase to figure this stuff out when they stumble over your code. If it’s super hard to get a grasp quickly and a new feature needed to be implemented yesterday, these puzzles can not expect to be dealt with the highest priority. This in turn often means that new stuff get’s developed on top of that unclear context—which is a brittle basis for going forward and also super inviting for bugs down the road. The lesson to take away here is not to override stuff where possible.</p>

<h2>Data Attributes</h2>

<p>A final useful tip for avoiding brittle tests is to use data attributes in your HTML tags. Just do yourself a favor and use them—you can thank me later. This lets you decouple the needed elements under test from the styling information that your designers might touch frequently without your involvement. If you hard code a class like <code>class='mission-wrapper'</code> in your test and a smart designer decides to change this poor name, your test will be affected unnecessarily. And the designer is not to blame of course. How in the world would she know that this affects part of your test suite—very unlikely at least.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;div class=&#39;mission data-role=&#39;single-mission&#39;&gt;</span>
</span><span class='line'><span class="x">  &lt;h2&gt;</span><span class="cp">&lt;%</span> <span class="o">=</span> <span class="vi">@mission</span><span class="o">.</span><span class="n">agent_status</span> <span class="cp">%&gt;</span><span class="x">&lt;/h2&gt;</span>
</span><span class='line'><span class="x">  ...</span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">context</span> <span class="s2">&quot;mission’s agent status&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;does something with a mission&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_css</span> <span class="s1">&#39;[data-role=single-mission]&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We expect to see some HTML element on a page and marked it with  a <code>data-role</code>. Designers have no reason to touch that and you are protected against brittle tests that happen due to changes on the styling side of things. Pretty effective and useful strategy that basically costs you nothing in return. The only thing that might be necessary is to have a short conversation with designers. Piece of cake!</p>

<h2>Final Thoughts</h2>

<p>We want to avoid distracting people who will read our tests or even worse, confuse them. That is opening the door for bugs but can also be expensive because it can cost valuable time and brain power. When you create your tests, try hard not to override things—it does not aid in creating clarity. More likely it will lead to subtle, time-consuming bugs and won’t affect the aspect of documenting your code positively. This creates an unnecessary burden we can avoid. Mutating test data more than absolutely necessary is also worth being a bit paranoid about. Keep it as simple as possible! This really helps avoiding sending other developers or your future self on wild goose chases. There is still a lot to learn about things you should avoid while testing but I believe this is a good start. Folks who are rather new to all things TDD should be able to handle these few AntiPatterns right away without diving into more advanced waters.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slim Basics 01]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2016/02/08/Slim-Basics-01/"/>
    <updated>2016-02-08T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2016/02/08/Slim-Basics-01</id>
    <content type="html"><![CDATA[<p>Titles</p>

<p>Boss-level Ruby templates with Slim</p>

<p>Deluxe templating with Slim</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/Slim/slim-fishbowl-refined.png"></p>

<h2>Topics</h2>

<ul>
<li>Why Slim?</li>
<li>What are Templates?</li>
<li>What about ERB &amp; Haml?</li>
<li>Getting Started</li>
<li>Rails</li>
<li>Sinatra</li>
<li>Syntax</li>
<li>HTML Tags</li>
<li><p>Dynamic Content</p></li>
<li><p>Line Indicators</p></li>
<li>Helpers</li>
<li>Safety</li>
<li>Logic-less Mode</li>
<li>Performance</li>
<li>Framework Support</li>
<li>Command Line Slim slimrb</li>
<li>Temple &amp; Tilt</li>
</ul>


<h2>Why Slim?</h2>

<p>If you live and breathe in Ruby land and have given Haml a shot before, you’ll probably already know a couple of the arguments I’m gonna make. I think it’s nevertheless a good idea to follow along because you might have already decided to use a more minimalistic templating engine and I’d like you to see the advantages Slim offers as well.</p>

<p>Before we dive into why Slim is cool, I wanna answer real quick what Slim actually is and what it does for you. The documentation sums this up quite nicely: “Slim is a fast, lightweight templating engine with support for Rails 3 and 4”. You can also use it with Sinatra and even plain Rack. So, if you are a bit tired of using ERB for writing your templates or you are not super satisfied with what Haml has to offer, then Slim is exactly the right tree for barking up.</p>

<p>In regards to its syntax, the people behind Slim were trying to find an answer to the following question: “What&rsquo;s the minimum required to make this work?” For writing the minimal amount of front-end code possible, this sure sounds like the right question to ask imho. Does Slim offer a perfect solution to all your templating concerns? Probably not, but quite frankly, it might just offer the best! Is it easy to learn? I think so, but it’s hard to know what other people consider easy. I’d say this though, it takes a bit to get used to but it’s definitely no rocket science. So no need to feel intimidated if you are a bit new to the coding side of things. Will you have a good time with it? Absolutely!</p>

<p>So, why Slim? The answer is quite straightforward I think. Your markup should be as readable and beautiful as possible! You should have a good time working with it and the less time you need to spend wading through tons of tag matter the better. What is beautiful you might ask? Of course, that is not an answer I’ll try to tackle, but being minimal in that regard rarely hurts. What about becoming super cryptic because the templating engine tries to be super smart in being minimal? That is a fair concern and you’ll be happy to hear that the team behind Slim takes this very seriously. They want to remove as much as possible from plain old HTML and reveal only the essential parts—all without becoming too cryptic. They core team tries to go even a step beyond that, they are really concerned about the aesthetics of Slim code. Pretty good deal, don’t you think?</p>

<p>Isn’t it much nicer if you can just glance at a template and to be able to easily digest what’s going on? Templates can become a very ‘crowded’ place—even if you make intelligent use of partials—and as a consequence, you want to reduce the amount of noise to the absolute minimum. Have you maybe tried the indented Sass (.sass) syntax? I hope you did, it’s just plain dope! If so, you probably will have a similar appreciation for what Slim has to offer. It’s also whitespace sensitive which leads to really succinct and readable code. Let’s take this piece of HTML / ERB code and compare it to Slim.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span><span class="err">&lt;</span>%= full_title(yield(:title)) %&gt;<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39;, &#39;data-turbolinks-track&#39; =&gt; true %&gt;
</span><span class='line'>    <span class="err">&lt;</span>%= javascript_include_tag &#39;application&#39;, &#39;data-turbolinks-track&#39; =&gt; true %&gt;
</span><span class='line'>    <span class="err">&lt;</span>%= csrf_meta_tags %&gt;
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">&quot;navbar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;logo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="err">&lt;</span>%= link_to &quot;sample app&quot;, &#39;root_path&#39;, id: &quot;logo&quot; %&gt;
</span><span class='line'>        <span class="nt">&lt;nav&gt;</span>
</span><span class='line'>          <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;navbar-right&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &quot;Home&quot;,   &#39;root_path&#39; %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &quot;Help&quot;,   &#39;help_path&#39; %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &quot;Log in&quot;, &#39;login_path&#39; %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/nav&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/header&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>%= yield %&gt;
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s look at the Slim equivalent:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">doctype</span> html
</span><span class='line'><span class="nt">html</span>
</span><span class='line'>  <span class="nt">head</span>
</span><span class='line'>    <span class="nt">title</span><span class="p"> =</span> <span class="n">full_title</span><span class="p">(</span><span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">))</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="ss">media</span><span class="p">:</span> <span class="s1">&#39;all&#39;</span><span class="p">,</span> <span class="s1">&#39;data-turbolinks-track&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="s1">&#39;data-turbolinks-track&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">csrf_meta_tags</span>
</span><span class='line'>  <span class="nt">body</span>
</span><span class='line'>    <span class="nt">header</span><span class="nc">.navbar</span>
</span><span class='line'>      <span class="nc">.logo</span>
</span><span class='line'>        <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;sample app&quot;</span><span class="p">,</span> <span class="s1">&#39;root_path&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;logo&quot;</span>
</span><span class='line'>        <span class="nt">nav</span>
</span><span class='line'>          <span class="nt">ul</span><span class="nc">.navbar-right</span>
</span><span class='line'>            <span class="nt">li</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span>   <span class="s1">&#39;root_path&#39;</span>
</span><span class='line'>            <span class="nt">li</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span>   <span class="s1">&#39;help_path&#39;</span>
</span><span class='line'>            <span class="nt">li</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Log in&quot;</span><span class="p">,</span> <span class="s1">&#39;login_path&#39;</span>
</span><span class='line'>    <span class="nc">.main</span>
</span><span class='line'>      <span class="p">=</span> <span class="k">yield</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first thing people often recognize is “hey, no closing tags!” Cool? Sure, you are not used to the syntax yet so it might look a bit alien at first but I’m sure you can appreciate how succinct it reads. No left / right angle brackets, no need to write divs and minimalistic selectors—instead we can focus on the name the ids and classes have—it feels a lot less messy and more organized, don’t you think?</p>

<p>For comparison, here is the Haml version. It’s really not meant as an opportunity to bash Haml, it just shows you how similar it is but also that Slim goes a step further with its choice of minimal syntax. The result is that it’s even more elegant than Haml I think. Why go so minimal but still make me type the <code>%</code> sign all over the place. My index finger has no special motivation to grab shift-5 all the time. Can you customize that behaviour? Pretty sure, at least I hope so! But the design seems a bit flawed in that regard and less spartan compared to Slim. I realize that this is also a matter of taste though, so I’ll leave it at that.</p>

<h4>Haml</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nn">!!!</span>
</span><span class='line'><span class="nt">%html</span>
</span><span class='line'>  <span class="nt">%head</span>
</span><span class='line'>    <span class="nt">%title</span><span class="p">=</span> <span class="n">full_title</span><span class="p">(</span><span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">))</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="ss">media</span><span class="p">:</span> <span class="s1">&#39;all&#39;</span><span class="p">,</span> <span class="s1">&#39;data-turbolinks-track&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="s1">&#39;data-turbolinks-track&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">csrf_meta_tags</span>
</span><span class='line'>  <span class="nt">%body</span>
</span><span class='line'>    <span class="nt">%header</span><span class="nc">.navbar</span>
</span><span class='line'>      <span class="nc">.logo</span>
</span><span class='line'>        <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;sample app&quot;</span><span class="p">,</span> <span class="s1">&#39;root_path&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;logo&quot;</span>
</span><span class='line'>        <span class="nt">%nav</span>
</span><span class='line'>          <span class="nt">%ul</span><span class="nc">.navbar-right</span>
</span><span class='line'>            <span class="nt">%li</span><span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span>   <span class="s1">&#39;root_path&#39;</span>
</span><span class='line'>            <span class="nt">%li</span><span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span>   <span class="s1">&#39;help_path&#39;</span>
</span><span class='line'>            <span class="nt">%li</span><span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Log in&quot;</span><span class="p">,</span> <span class="s1">&#39;login_path&#39;</span>
</span><span class='line'>    <span class="nc">.main</span>
</span><span class='line'>      <span class="p">=</span> <span class="k">yield</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before we jump into the meaty parts, let me be puffy for a moment and sum up what I think makes learning Slim a worthy investment of your time:</p>

<ul>
<li>It’s speedy.</li>
<li>Super readable.</li>
<li>It has a smart syntax.</li>
<li>Its aesthetic is minimal.</li>
<li>It is highly configurable</li>
<li>It’s index finger friendly.</li>
<li>It’s boss-level templating.</li>
<li>It’s fun to write and looks dope.</li>
<li>Automatic HTML escaping by default.</li>
<li>Super nice Rails and Sinatra integration.</li>
<li>Very minimal templates that are easy to maintain.</li>
<li>Is extensive and allows you to write plugins and extensions.</li>
<li>There is a logic-less mode for times when you want to output HTML but have no reason to include Ruby code.</li>
<li>It has configurable shortcuts for tags—which is a pretty nice feature to customize the engine to your needs.</li>
<li>And finally, because Slim’s syntax is guided by one very cool motto: “What&rsquo;s the minimum required to make this work”. This is very hard not to like.</li>
</ul>


<h2>What Are Templates?</h2>

<p>In terms of programming experience, if you consider yourself to be more on the newbie side of things, I’ll try to give you a quick round trip before we start using Slim. When people talk about templates, they mostly mean plain HTML markup with dynamic code that is often used for flow control, object injection or partial template (partials) rendering. For example when a controller provides you with instance variables that can be used by the view via (instance)variable substitution to display attributes from that object. All this happens via the template processor of your choice—ERB, Haml, Slim and the likes—which combines all your web templates into a final web page. Templates can also be used to generate XML and RSS feeds as well as other forms of structured text files.</p>

<p>With templates, you can define various “layouts” that are handling particular parts of your website as well as the the data that needs to be displayed systematically with the smallest amount of repetition. When you started playing with Rails, you surely have been using ERB for exactly these kinds of scenarios. ERB takes the plain text portions, hands them to the final document and only processes code that is marked as such. I’m not going into details how ERB works and suppose you have a basic understanding before you dive into Slim. I would not recommend to use Slim if you are not already familiar with Rails’ default way of templating since you will have a much easier time to play with Slim understanding how this works out of the box in Rails.</p>

<p>Below is a basic ERB example of a template that displays a collection of missions that are associated with an <code>@agent</code> object. Directly below, it also uses a method from a Ruby Gem to paginate the <code>@missions</code> collection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@agent</span><span class="o">.</span><span class="n">missions</span><span class="o">.</span><span class="n">any?</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;h4&gt;Missions (</span><span class="cp">&lt;%=</span> <span class="vi">@agent</span><span class="o">.</span><span class="n">missions</span><span class="o">.</span><span class="n">count</span> <span class="cp">%&gt;</span><span class="x">)&lt;/h4&gt;</span>
</span><span class='line'><span class="x">  &lt;ul class=&quot;missions&quot;&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@missions</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/ul&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">will_paginate</span> <span class="vi">@missions</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a small section of a template that shows nicely that it’s nothing more than a static HTML part that has some dynamic injections from some Ruby code. If we wouldn’t use templates like this, we’d have to manually write code for every new object that we want to see displayed on a page. Not sure about you, but I can’t imagine a bigger nightmare or waste of time than that. Templates give us a handy tool for making our view layer smart and dynamic without repeating ourselves. As you can also see from this example, templates let us use partial templates that we can render where needed. Here we would have a <code>_mission.html.erb</code> partial somewhere which helps us to iterate over a collection of <code>@mission</code> objects which in turn get listed inside our <code>.missions</code> class.</p>

<p>As you can see, templates are nothing magic but are super handy to make developing web apps a lot more efficient and organized. I just wanted to make sure that we are all on the same page with this before diving into Slim.</p>

<h2>What about ERB &amp; Haml?</h2>

<p>If you like using these tools, it’s perfectly fine. Nothing wrong with that. The thing is, if you are looking for something smarter that is more minimalistic, it’s hard to find something that goes further than Slim. To me, it’s the most streamlined templating solution in Ruby land that I know of. They all work fine, it’s a matter of personal preference I guess.</p>

<h2>Getting Started</h2>

<h3>Slim With Rails</h3>

<p>No surprise, there is a gem for that.</p>

<h4>Gemfile</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;slim-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Shell</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>That’s it, we’re all set. Because you installed this gem, Slim will get loaded and initialized whenever your app loads. Also, for your convenience, when you generate controllers via <code>rails generate controller</code>, you will automatically get <code>.slim</code> view files for your view—<code>.html.erb</code> files no more. Works the same with scaffolds, but I hope you are not using them really!</p>

<p>To demonstrate this behaviour for folks who are new to using Rails’ generators, I’ll create a controller for secret service operatives that has all the standard REST controller actions:</p>

<h4>Shell</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate controller SecretServiceOperatives index new create show edit update destroy
</span></code></pre></td></tr></table></div></figure>


<p>Among other stuff, you’ll get all the <code>.slim</code> files you need. Rails puts an extra <code>.html</code> in there as well—you can get rid of that if it bothers you of course. All that matters is that the slim file extension is already there and that it’s ready for preprocessing your Slim code. Yay!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>
</span><span class='line'>invoke  slim
</span><span class='line'>     create    app/views/secret_service_operatives
</span><span class='line'>     create    app/views/secret_service_operatives/index.html.slim
</span><span class='line'>     create    app/views/secret_service_operatives/new.html.slim
</span><span class='line'>     create    app/views/secret_service_operatives/create.html.slim
</span><span class='line'>     create    app/views/secret_service_operatives/show.html.slim
</span><span class='line'>     create    app/views/secret_service_operatives/edit.html.slim
</span><span class='line'>     create    app/views/secret_service_operatives/update.html.slim
</span><span class='line'>     create    app/views/secret_service_operatives/destroy.html.slim
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>The next step would be to open your application layout and to replace boilerplate code with something Slim. Also, don’t forget to rename the <code>application.html.erb</code> file to <code>application.slim</code> (or <code>application.html.slim</code> if you want). We have already slimmed down a bit, even the file name has lost some weight.</p>

<h4>app/views/layouts/application.slim</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">doctype</span> html
</span><span class='line'><span class="nt">html</span>
</span><span class='line'>  <span class="nt">head</span>
</span><span class='line'>    <span class="nt">title</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="ss">media</span><span class="p">:</span> <span class="s1">&#39;all&#39;</span><span class="p">,</span> <span class="s1">&#39;data-turbolinks-track&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="s1">&#39;data-turbolinks-track&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">csrf_meta_tags</span>
</span><span class='line'>  <span class="nt">body</span>
</span><span class='line'>    <span class="nt">header</span><span class="nc">.navbar</span>
</span><span class='line'>      <span class="nc">.logo</span>
</span><span class='line'>        <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Spy app&quot;</span><span class="p">,</span> <span class="s1">&#39;root_path&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;logo&quot;</span>
</span><span class='line'>        <span class="nt">nav</span>
</span><span class='line'>          <span class="nt">ul</span><span class="nc">.navbar-right</span>
</span><span class='line'>            <span class="nt">li</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span>    <span class="s1">&#39;root_path&#39;</span>
</span><span class='line'>            <span class="nt">li</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span>    <span class="s1">&#39;help_path&#39;</span>
</span><span class='line'>            <span class="nt">li</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign up&quot;</span><span class="p">,</span> <span class="s1">&#39;sign_up_path&#39;</span>
</span><span class='line'>            <span class="nt">li</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">link_to</span> <span class="s2">&quot;Log in&quot;</span><span class="p">,</span>  <span class="s1">&#39;login_path&#39;</span>
</span><span class='line'>    <span class="nc">.main</span>
</span><span class='line'>      <span class="nt">h1</span><span class="nc">.welcome</span> Welcome to Boss Level Slim Templates!
</span><span class='line'>      <span class="p">=</span> <span class="k">yield</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing fancy, but a good start—and as easy as can be I think.</p>

<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octo-draft/images/Slim/boss-leve-slim-application-layout-welcome.png"></p>

<p>As a little side note, if you are ever curious which version of the gem you have installed, this little command will tell you—it’s handy for any gem as well of course:</p>

<h4>Shell</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle show <span class="s1">&#39;slim-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It tells you where it is stored and which version this gem currently has. The output looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/Library/Ruby/Gems/2.3.0/gems/slim-rails-3.0.1
</span></code></pre></td></tr></table></div></figure>


<h3>Slim With Sinatra</h3>

<p>For the Sinatra enthusiasts among you, I wanted to mention how to get started as well. First we need to install the gem of course.</p>

<h4>Shell</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install slim
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>And after that you are almost done. In your Sinatra app, you just need to require Slim and you are good to go.</p>

<h4>some_sinatra_app.rb</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;slim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="n">slim</span> <span class="ss">:index</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">__END__</span>
</span><span class='line'>
</span><span class='line'><span class="cp">@@ index</span>
</span><span class='line'><span class="cp">doctype html</span>
</span><span class='line'><span class="cp">html</span>
</span><span class='line'><span class="cp">  head</span>
</span><span class='line'><span class="cp">    title Slim Templates</span>
</span><span class='line'><span class="cp">    body</span>
</span><span class='line'><span class="cp">      h1 Boss Level Ruby Templates With Slim</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I used an inline template to write the Slim markup in the same file and told Sinatra that I want to use Slim for the index file when it makes a <code>get</code> request to the root path. I just needed to reference the inline template inside a curly braces block. What you see below the <code>@@ index</code>—which signifies the index template—is all whitespace sensitive Slim syntax.</p>

<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octo-draft/images/Slim/sinatra-setup.png"></p>

<p>Time to show you how to write some Slim.</p>

<h2>Syntax</h2>

<h3>HTML tags</h3>

<h4>HTML &lt;!DOCTYPE> Declaration</h4>

<p>Let’s start with the simplest one, the doctype declaration. As you probably know and already forgot, this must be declared on top of you HTML document—before the actual <code>&lt;html&gt;</code> tag. FYI, it’s not an HTML tag and instructs the browser about the version of the HTML page. Among the different versions for <code>&lt;!DOCTYPE&gt;</code>, there is only one for HTML5: <code>&lt;!DOCTYPE html&gt;</code>—thank god!—which is exactly what we get when we write <code>doctype html</code> or <code>doctype 5</code> in Slim.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">doctype</span> html
</span><span class='line'><span class="nt">html</span>
</span><span class='line'>  <span class="nt">head</span>
</span><span class='line'>
</span><span class='line'><span class="nt">doctype</span> 5
</span><span class='line'><span class="nt">html</span>
</span><span class='line'>  <span class="nt">head</span>
</span></code></pre></td></tr></table></div></figure>


<h4>ID shortcut # and class shortcut .</h4>

<p>Writing front-end code means a ton of classes and ever so few ids—I hope. To avoid writing these over and over again, Slim meets you more than halfway and let’s you short-circut the whole process bascically. Let me show you what I mean. The following Slim code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nf">#logo</span>
</span><span class='line'><span class="nt">h1</span><span class="nc">.header</span>
</span><span class='line'><span class="nc">.evil-wrapper</span>
</span><span class='line'>  <span class="nt">h2</span><span class="nf">#author-name</span>
</span><span class='line'>  <span class="nt">ul</span><span class="nc">.books</span>
</span></code></pre></td></tr></table></div></figure>


<p>gets compiled to this HTML output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;logo&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;evil-wrapper&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h2</span> <span class="na">id=</span><span class="s">&quot;author-name&quot;</span><span class="nt">&gt;&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;books&quot;</span><span class="nt">&gt;&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you cann see, the dot suggests to Slim that you want to use a class and the name that follows is what you want to name it. Same goes for ids—you just use the hash symbol (aka pound sign) which does the trick. Astute readers surely recognized that the versions without a leading tag trigger the creation of a div with the corresponding class or id—which can be seen for <code>&lt;div id="logo"&gt;&lt;/div&gt;</code> and <code>&lt;div class="evil-wrapper"&gt;&lt;/div&gt;</code>. Pretty handy, don’t you think?</p>

<p>You can also be more expressive in your Slim code if you want to. Nobody hinders you to write your good ol’ classes and ids by hand. If you somehow feel attached to that, go for it! I like the more succinct version because it also let’s me avoid typing quotes and repeated text all the time. Up to you, whatever makes you happy! The code below is a bit more verbose but renders the exact same HTML as above:</p>

<h4>Slim</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">div</span><span class="na"> id</span><span class="p">=</span><span class="s1">&#39;logo&#39;</span>
</span><span class='line'><span class="nt">h1</span><span class="na"> class</span><span class="p">=</span><span class="s1">&#39;header&#39;</span>
</span><span class='line'><span class="nt">div</span><span class="na"> class</span><span class="p">=</span><span class="s1">&#39;evil-wrapper&#39;</span>
</span><span class='line'>  <span class="nt">h2</span><span class="na"> id</span><span class="p">=</span><span class="s1">&#39;author-name&#39;</span>
</span><span class='line'>  <span class="nt">ul</span><span class="na"> class</span><span class="p">=</span><span class="s1">&#39;books&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, isn’t that a thing of beauty? Imagine all these dreaded HTML tags that you don’t need to write yourself, plus getting rid of all the excess enclosing angle brackets. Sure, your code editor can do a lot of this work for you as well, but does your editor also read the code for you? Exactly! When you come back to read your code, you also want a succinct document that is super easy to digest visually. I think this simple examples shows best what a tool like Slim has to offer. It’s these little things that add up to a great tool and timesaver in the long run. Even if you only use it for exactly that functionality and ignore the other more advanced features for now, making the switch to Slim would already pay off big time imho.</p>

<h4>Inline Tags</h4>

<p>Let’s say you have multiple tags that you want to have inline for being more compact or whatever. So instead of breaking to a new line, you can chain them by separating these tags with a colon <code>:</code>. Both examples below are rendering the exact same output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">ul</span>
</span><span class='line'>  <span class="nt">li</span><span class="nc">.first</span>
</span><span class='line'>    <span class="nt">a</span><span class="na"> href</span><span class="p">=</span><span class="s2">&quot;/a&quot;</span> A link
</span><span class='line'>  <span class="nt">li</span>
</span><span class='line'>    <span class="nt">a</span><span class="na"> href</span><span class="p">=</span><span class="s2">&quot;/b&quot;</span> B link
</span><span class='line'>
</span><span class='line'><span class="nt">ul</span>
</span><span class='line'>  <span class="nt">li</span><span class="nc">.first:</span> a href=&quot;/a&quot; A link
</span><span class='line'>  <span class="nt">li:</span> a href=&quot;/b&quot; B link
</span></code></pre></td></tr></table></div></figure>


<p>HTML Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;link&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/a&quot;</span><span class="nt">&gt;</span>A link<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/b&quot;</span><span class="nt">&gt;</span>B link<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second version is more minimal because of the inlined tags and would be my preference. After all, compact is good, no? I think this case shows nicely that Slim evenly balances between compact and cryptic. Yes, it takes a bit getting used to and in some cases additional attribute wrappers are helpful (see more about wrappers below). Call me crazy, but I’m pretty certain that you’ll read Slim like regular HTML markup in a jiffy.</p>

<h4>Text Content</h4>

<p>Writing text is as easy as you’d expect of course. Just add it on after your tags.</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">h1</span><span class="nf">#welcome-header</span> Your funky welcome message goes here!
</span></code></pre></td></tr></table></div></figure>


<p>HTML Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">&quot;welcome-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Your funky welcome message goes here!
</span><span class='line'><span class="nt">&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing more to add, easy as can be!</p>

<h4>Attributes</h4>

<p>HTML attributes, which provide additional info about the tags, can be included as follows:</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">a</span><span class="na"> href</span><span class="p">=</span><span class="s2">&quot;http://slim-lang.com&quot;</span><span class="na"> title</span><span class="p">=</span><span class="s1">&#39;Slim Homepage&#39;</span> Goto the Slim homepage
</span><span class='line'>
</span><span class='line'><span class="nt">img</span><span class="na"> alt</span><span class="p">=</span><span class="s2">&quot;James Bond posing together with M&quot;</span><span class="na"> src</span><span class="p">=</span><span class="s2">&quot;image.png&quot;</span><span class="na"> height</span><span class="p">=</span><span class="s2">&quot;90&quot;</span><span class="na"> width</span><span class="p">=</span><span class="s2">&quot;90&quot;</span>/
</span></code></pre></td></tr></table></div></figure>


<p>HTML Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://slim-lang.com&quot;</span> <span class="na">title=</span><span class="s">&quot;Slim Homepage&quot;</span><span class="nt">&gt;</span>Goto the Slim homepage<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;img</span> <span class="na">alt=</span><span class="s">&quot;James Bond posing together with M&quot;</span> <span class="na">height=</span><span class="s">&quot;90&quot;</span> <span class="na">src=</span><span class="s">&quot;image.png&quot;</span> <span class="na">width=</span><span class="s">&quot;90&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can basically chain them on and Slim will separate it from the text content—if present. If you look closely, you can see that our <code>img</code> tag has a trailing slash which explicitly closes tags in Slim. For images or more convoluted tags surely useful. FYI, HTML5 does not require you to write the attribute names in lower case nor to use quotes around attribute values. It is nevertheless recommended standard practice by the W3C.</p>

<h4>Attribute Merging</h4>

<p>Btw, if you have multiple selectors like classes or ids per tag, you can also write this more succinctly by daisy-chaining them. These selectors will be automatically delimited by whitespace.</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">h2</span><span class="nf">#big-header</span><span class="nc">.agent-header.tagline</span> Funky headline
</span><span class='line'>
</span><span class='line'><span class="nt">h3</span><span class="nc">.small-header.agent</span><span class="nf">#007</span><span class="nc">.tagline</span> Small funky headline
</span></code></pre></td></tr></table></div></figure>


<p>HTML Output</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;agent-header tagline&quot;</span> <span class="na">id=</span><span class="s">&quot;big-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Funky headline
</span><span class='line'><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;small-header agent tagline&quot;</span> <span class="na">id=</span><span class="s">&quot;007&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Small funky headline
</span><span class='line'><span class="nt">&lt;/h3&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not that all these ids and classes mixed up like this represents best practices or anything, but it’s easy to see how Slim works in such a convoluted example. Pretty cool huh? Careful though, spreading these selectors across multiple lines won’t work without attribute wrappers (see next section).</p>

<p>Another option would be to use an array with strings or just symbols to merge in attributes.</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">h2</span><span class="na"> class</span><span class="p">=</span><span class="err">[</span><span class="s2">&quot;agent-header&quot;</span>,&quot;tagline&quot;] Funky headline
</span><span class='line'>
</span><span class='line'><span class="nt">h3</span><span class="na"> class</span><span class="p">=</span><span class="err">:</span>agent,:double_o_seven,:tagline Small funky headline
</span></code></pre></td></tr></table></div></figure>


<p>HTML Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;agent-header tagline&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Funky headline
</span><span class='line'><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;agent double_o_seven tagline&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Small funky headline
</span><span class='line'><span class="nt">&lt;/h3&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In my book, I’d call this one a good-to-know but it’s not something I try to actively use. Might be handy if you want to interpolate something I suppose.</p>

<h4>Attribute Wrappers</h4>

<p>Slim offers you wrappers to make your attributes easier to read. Might not be necessary all the time, but it’s handy to know if a tag with lots of attributes needs some taming. You can use any of the following delimiters to wrap attributes: <code>{}</code>, <code>[]</code> and <code>()</code>.</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">a</span>{href=&quot;http://slim-lang.com&quot; title=&#39;Home page&#39;} Goto the home page
</span><span class='line'>
</span><span class='line'><span class="nt">a</span>{href=&quot;http://slim-lang.com/about.html&quot; title=&#39;About page&#39;
</span><span class='line'>  <span class="nt">class</span><span class="p">=</span><span class="s1">&#39;link&#39;</span> <span class="nb">id</span><span class="o">=</span><span class="s1">&#39;about&#39;</span><span class="p">}</span> <span class="no">Goto</span> <span class="n">the</span> <span class="n">about</span> <span class="n">page</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h2</span>[id=&quot;big-header&quot; class=&quot;agent-header tagline&quot;] Funky headline
</span><span class='line'>
</span><span class='line'><span class="nt">h3</span>(id=&quot;small-header&quot;
</span><span class='line'>   <span class="nt">class</span><span class="p">=</span><span class="s2">&quot;agent 007 tagline&quot;</span><span class="p">)</span> <span class="no">Some</span> <span class="n">other</span> <span class="n">funky</span> <span class="n">headline</span>
</span></code></pre></td></tr></table></div></figure>


<p>HTML Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://slim-lang.com&quot;</span> <span class="na">title=</span><span class="s">&quot;Home page&quot;</span><span class="nt">&gt;</span>Goto the home page<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;link&quot;</span> <span class="na">href=</span><span class="s">&quot;http://slim-lang.com/about.html&quot;</span> <span class="na">id=</span><span class="s">&quot;about&quot;</span> <span class="na">title=</span><span class="s">&quot;About page&quot;</span><span class="nt">&gt;</span>Goto the about page<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;agent-header tagline&quot;</span> <span class="na">id=</span><span class="s">&quot;big-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Funky headline
</span><span class='line'><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;agent 007 tagline&quot;</span> <span class="na">id=</span><span class="s">&quot;small-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Some other funky headline
</span><span class='line'><span class="nt">&lt;/h3&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If that’s easier for you to organize the markup, go for it! As illustrated by the second <code>a</code> and the <code>h3</code> tags, you can even spread attributes and selectors across multiple lines. Indentation seems to be enforced very forgivingly in regards whitespace sensitivity. My guess is though that not for long and you won’t need wrappers much. You‘ll get used to the barebones Slim syntax in no time and save them for special occasions—like you probably should.</p>

<p>For inlined tags, wrappers might come in handy every once in a while. As you can also observe in the example below, you can use spaces with the delimiters to make it even more readable—just a side note.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">ul</span>
</span><span class='line'>  <span class="nt">li</span><span class="nc">.long-link:</span> a{ href=&quot;http://slim-lang.com&quot; title=&#39;Home page&#39; } Goto the home page
</span><span class='line'>  <span class="nt">li</span><span class="nc">.long-link.class.with-id:</span> a[ href=&quot;http://slim-lang.com/about.html&quot; title=&#39;About page&#39;
</span><span class='line'>                                 <span class="nt">class</span><span class="p">=</span><span class="s1">&#39;link&#39;</span> <span class="nb">id</span><span class="o">=</span><span class="s1">&#39;about&#39;</span> <span class="o">]</span> <span class="no">Goto</span> <span class="n">the</span> <span class="n">about</span> <span class="n">page</span>
</span><span class='line'>  <span class="nt">li</span><span class="nc">.c-link:</span> a(href=&quot;/c&quot;) C link
</span><span class='line'>  <span class="nt">li:</span> a[href=&quot;/d&quot;] D link
</span></code></pre></td></tr></table></div></figure>


<p>HTML Output</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;long-link&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://slim-lang.com&quot;</span> <span class="na">title=</span><span class="s">&quot;Home page&quot;</span><span class="nt">&gt;</span>Goto the home page<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;long-link class with-id&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;link&quot;</span> <span class="na">href=</span><span class="s">&quot;http://slim-lang.com/about.html&quot;</span> <span class="na">id=</span><span class="s">&quot;about&quot;</span> <span class="na">title=</span><span class="s">&quot;About page&quot;</span><span class="nt">&gt;</span>Goto the about page<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;c-link&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/c&quot;</span><span class="nt">&gt;</span>C link<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/d&quot;</span><span class="nt">&gt;</span>D link<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Attribute Interpolation</h4>

<p>Did somebody say interpolation? Within quoted attributes, you can use Ruby to interpolate code if needed. A simple example should be enough to illustrate this behaviour:</p>

<p>Slim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">a</span><span class="na"> href</span><span class="p">=</span><span class="s2">&quot;http://</span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2">&quot;</span> Goto <span class="si">#{</span><span class="n">url</span><span class="si">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, not something you might use on a daily basis but it sure is good to know to have in your bag of tricks. The attribute values will be escaped by default btw. If you need that behaviour disabled, just use a <code>==</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">a</span><span class="na"> href</span><span class="p">==</span><span class="s2">&quot;http://</span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2">&quot;</span> Goto <span class="si">#{</span><span class="n">url</span><span class="si">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use full-on Ruby to play with your attributes as well. Just throw an equals sign in there where you want some Ruby code to be executed and you are ready to go. In the second article, you’ll find more info about outputting Ruby code in your Slim templates.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">ul</span>
</span><span class='line'>  <span class="nt">li</span><span class="na"> id</span><span class="p">=</span><span class="s2">&quot;agent_</span><span class="si">#{</span><span class="n">agent</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="na"> class</span><span class="p">=</span>agent<span class="nc">.role</span>
</span><span class='line'>    <span class="nt">a</span><span class="na"> href</span><span class="p">=</span><span class="err">(</span>path_to_agent agent) =agent.name
</span></code></pre></td></tr></table></div></figure>


<p>That of course also means that you can use simple booleans the same way in your attributes as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">input</span><span class="na"> type</span><span class="p">=</span><span class="s2">&quot;text&quot;</span><span class="na"> disabled</span><span class="p">=</span>false
</span><span class='line'><span class="nt">input</span><span class="na"> type</span><span class="p">=</span><span class="s2">&quot;text&quot;</span><span class="na"> disabled</span><span class="p">=</span>true
</span><span class='line'><span class="nt">input</span><span class="na"> type</span><span class="p">=</span><span class="s2">&quot;text&quot;</span><span class="na"> disabled</span><span class="p">=</span>nil
</span></code></pre></td></tr></table></div></figure>


<p>Groovy, let’s move on!</p>

<h2>Final Thoughts</h2>

<p>I hope you got a good sense why Slim is a good choice for all your templating needs in Ruby land. If you still prefer to use Haml or ERB at the moment you might grow an appetite for Slim over time though. I’m not saying it’s an aquired taste or anthing, just that it’s not something that many people pick up early in their careers—maybe because they haven’t yet felt the pain of writing all that excess markup over and over again. This article should provide you with the basics that you need to get started. Slim has more to offer of course—especially a few advanced features that you definitely want to take a look at. In the next article we’re gonna start with a more detailed section about outputting Ruby code into your templates—and much more of course. See you there!</p>

<h2>Output</h2>

<p>You have already seen a bit how to use Ruby in your templates. This section gives you all you need to make use of this &hellip;</p>

<p>Before we take a break, we should definitely look into ways to bring Ruby into this equation. As you are hopefully aware of, tons of view code—aka tons of Ruby code in our context—is a serious smell and should be minimized at all times. Just because Slim makes it maybe even more enticing to plaster your templates with tons of logic does not mean that you should not practice constraint in that department. Done right on the other hand, Slim makes it really elegant to inject Ruby where needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AntiPatterns Basics—Rails Controllers]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2016/01/25/AntiPatterns-Basics-Rails-Controllers/"/>
    <updated>2016-01-25T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2016/01/25/AntiPatterns-Basics-Rails-Controllers</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/AntiPatterns/Controllers/LomaPrieta-Marina.jpeg"></p>

<h2>Heads Up</h2>

<p>Anti- what? It probably sounds a lot more complicated than it is. Over the last couple of decades, programmers were able to identify a useful selection of “design” patterns that frequently occurred throughout their code solutions. While solving similar problems, they were able to classify solutions that prevented them from reinventing the wheel for every project. It is important to note that these patterns should be seen more as discoveries than the inventions of a group of advanced developers.</p>

<p>AntiPatterns—as the name implies—on the other hand represent pretty much the opposite. They are discoveries of solutions to problems that you should definitely avoid. They often represent the work of inexperienced coders who don’t know what they don’t know yet. Worse, it could be the output of a lazy person who just ignores best practices for no good reason—or they think they don’t. What they might hope to gain in time savings in the beginning by hammering out quick, lazy or dirty solutions is gonna haunt them or some sorry successor later in the project’s life cycle. Do not underestimate the implications or these bad decisions, they’re gonna plague you like a curse—no matter what.</p>

<p>This one is exactly written for you if all this sounds rather new to you and you identify yourself as being more on the beginner side of all things Ruby / Rails. I think, it’s best if you approach these articles as quick skinny-dips into a much deeper topic whose mastery will not happen overnight. Nevertheless, I strongly believe that starting to get into this early will benefit beginners and their mentors tremendously.</p>

<h2>Topics</h2>

<ul>
<li>Fat Controllers</li>
<li>Non-RESTful Controllers</li>
<li>Rat’s Nest Rsources</li>
</ul>


<h2>FAT Controllers</h2>

<p>Well, “fat models, skinny controllers”, right? In case you haven’t read the previous AntiPattern articles, I should mention that aiming for models and controllers that stay skinny is a better guideline—no matter what. All that excess fat is not good for your projects—“skinny everything” makes much more sense. (Maybe I should disclaim that I’m not associated with the fashion industry in any way and don’t want to repeat the impression that you can’t be considered beautiful without fitting a certain type of imaginary body). As with models, you want controllers that have single responsibilities. Controllers should be dumb really, managing traffic and not much else. Also, if possible, we want to make our templates as dumb as possible—presenters can be handy in that regard.</p>

<p>It is further important that you do not stray much from RESTful controller actions. Sure, every once in a while it can make sense to have additional methods in there, but most of the time, you should feel a little uneasy having them around. Controllers tend to get fat when they amass business logic that actually belongs into models or when inexperienced developers don’t make use of Rails’ conventions. You won’t be the first trying to reinvent the wheel and you certainly won’t be the last. Don’t feel bad about it, probably most of us have been there, but as a craftsman, you really should invest time and effort to know the conventions, benefits and limitations of the frameworks you work with—at least for commercial purposes where somebody pays for your expertise. Experiments are always fine of course.</p>

<p>Since controllers are in charge of the flow of your application as well as for gathering the information that your views need, they already have a pretty important responsibility. They really do not need added complexity from the realm of your models. Controllers are closely working with your views to display the data provided by the model layer. Their relationship is tighter than with models. The model layer can potentially be developed much more independent from the others. The good thing about that is that a clean controller layer often has a positive effect on how tidy your views can be.</p>

<p>What I want to get across is that fat controllers are super common in Rails land—especially among beginners and inexperienced developers—and with a little bit of love and care this can be optimized easily. The first step is straightforward. Ask yourself when a controller grows in size if the complexity comes from added business logic. If so, find a way to move it to the model layer where you have the added benefit of having a better home for testing complex code.</p>

<h3>Presenters</h3>

<p>To follow the above recommendation of moving aquired controller logic to models, presenters can be a handy technique. They can simulate a model while combining a couple of loosely related attributes together which can be useful for keeping controllers slim and sexy. On top of that, they are also good at keeping logic nastiness out of your views. Pretty good deal for crafting an extra object!</p>

<p>Presenters can “imitate” a model which represents the state that your view needs and combines the attributes that need to move through the controller. They can be more complex, but then I feel they are drifting into “Decorator” territory. Sometimes a controller is in charge of creating multiple models simultaneously and we want to avoid is handling multiple instance variables in there. Why is this important? Because it helps us to keep the maintainability of our apps in check. The presenter aggregates behaviour and attributes which makes it easy for our controllers to focus on small, dead-simple jobs—with a single object. Also, formatting data in your view or other similar small functions are frequent jobs that often occur. Having this contained in a presenter is not only great for clean views but also for having a dedicated place that makes testing this  behaviour straightforward—the model layer is easier to test. More “bang for the buck” and all that jazz.</p>

<p>If you stumble upon the Presenter Pattern and find multiple approaches or different ways to describe it, you are not going crazy. There is little clear cut agreement on what a presenter is I feel like. What is common knowledge though is that it sits between the MVC layers. We can use it to manage multiple model objects that need to be created at the same time. While combining these objects it imitates an ActiveRecord model.</p>

<p>A commonly cited scenario is some sort of form that inputs information for various different models. Like a new user account that also has input fields for credit cards and addresses or something or something. Going full wizard by stepping through a couple of forms in sequence is not that different . Since these parts of your application tend to be very important ones, it is definitely a good idea to keep things tidy while having the best possible option available for testing at the same time. The user experience on this one is key too. In the example below, we want to create a simple mission that <code>has_one</code> <code>agent</code> and one <code>quartermaster</code>. No rocket science, but it’s a good example to see how quickly things can get out of hands. The controller needs to juggle multiple objects that the view needs in a nested form to tie things together. You will soon see that all of this can be cured with a nice “Form Object” which presents the objects needed and weaves things together in one central class.</p>

<h5>app/models/mission.rb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Mission</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:agent</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:quartermaster</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:agent</span><span class="p">,</span> <span class="ss">:quartermaster</span><span class="p">,</span> <span class="ss">allow_destroy</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:mission_name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Agent</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:mission</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Quartermaster</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:mission</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I’m mentioning the models here just for completeness sake in case you never used <code>fields_for</code> before—a bit simplified but working. Below is the heart of the matter.</p>

<h4>Too many instance variables</h4>

<h5>app/controllers/missions_controller.rb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MissionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="vi">@mission</span> <span class="o">=</span> <span class="no">Mission</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@agent</span> <span class="o">=</span> <span class="no">Agent</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@quartermaster</span> <span class="o">=</span> <span class="no">Quartermaster</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@mission</span> <span class="o">=</span> <span class="no">Mission</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mission_params</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@agent</span> <span class="o">=</span> <span class="no">Agent</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">agent_params</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@quartermaster</span> <span class="o">=</span> <span class="no">Quartermaster</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">quartermaster_params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@mission</span><span class="o">.</span><span class="n">agent</span> <span class="o">=</span> <span class="vi">@agent</span>
</span><span class='line'>    <span class="vi">@mission</span><span class="o">.</span><span class="n">quartermaster</span> <span class="o">=</span> <span class="vi">@quartermaster</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@account</span><span class="o">.</span><span class="n">save</span> <span class="ow">and</span> <span class="vi">@agent</span><span class="o">.</span><span class="n">save</span> <span class="ow">and</span> <span class="vi">@quartermaster</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;Mission accepted&#39;</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">missions_path</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:alert</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;Mission not accepted&#39;</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mission_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:mission</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:mission_name</span><span class="p">,</span> <span class="ss">:objective</span><span class="p">,</span> <span class="ss">:enemy</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">agent_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:agent</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:number</span><span class="p">,</span> <span class="ss">:licence_to_kill</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quartermaster_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:quartermaster</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:number</span><span class="p">,</span> <span class="ss">:hacker</span><span class="p">,</span> <span class="ss">:expertise</span><span class="p">,</span> <span class="ss">:humor</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Overall, it’s easy to see that this is heading in the wrong direction. It already attracted quite a bit of mass and it only consists of <code>new</code> and <code>create</code> methods. Not good! The quickly growing amount of private methods are already piling up way too fast as well. <code>agent_params</code> and <code>quartermaster_params</code> in a <code>MissionsController</code> does not sound too slick to you I hope. A rare sight you think? I’m afraid not. “Single Responsibilities” in controllers truly are a golden guideline. You’ll see why in just a minute.</p>

<p>Even if you squint your eyes, this looks super nasty. And during saving in the <code>create</code> action, with validations in place, if we can’t save every object due to some mistake or something, we’ll end up with orphaned objects that nobody wants to deal with. Yikes! Sure we could put this into a <code>transaction</code> block which successfully completes saving only if all objects are in order, but this is a bit like surfing against the current—also, why do model level stuff like this in the controller really? There are more elegant ways to catch a wave.</p>

<p>Following this path, the view would have an accompanying <code>form_for</code> for <code>@mission</code> and the additional <code>fields_for</code> for <code>@agent</code> and <code>@quartermaster</code> of course.</p>

<h3>Messy Form With Multiple Objects</h3>

<h5>app/views/missions/new.html.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="vi">@mission</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">mission</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;h3&gt;Mission&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:mission_name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:mission_name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:objective</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:objective</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:enemy</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:enemy</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;h3&gt;Agent&lt;/h3&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">fields_for</span> <span class="vi">@agent</span> <span class="k">do</span> <span class="o">|</span><span class="n">agent</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:licence_to_kill</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:licence_to_kill</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;h3&gt;Quartermaster&lt;/h3&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">fields_for</span> <span class="vi">@quartermaster</span> <span class="k">do</span> <span class="o">|</span><span class="n">quartermaster</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">quartermaster</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">quartermaster</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">quartermaster</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">quartermaster</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">quartermaster</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:hacker</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">quartermaster</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:hacker</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">quartermaster</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:expertise</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">quartermaster</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:expertise</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">quartermaster</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:humor</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">quartermaster</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:humor</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">submit</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Sure, this works but I wouldn’t be too excited to stumble upon this. <code>fields_for</code> sure is handy and all but handling this with OOP is a lot more dope. For such a case, a presenter will also aid us in having a simpler view because the form will deal with just a single object. Nesting the form becomes unnecessary that way. Btw, I left out any wrappers for styling the form to make it easier to digest visually.</p>

<h3>Form Object Presenter</h3>

<h5>app/views/missions/new.html.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="vi">@mission_presenter</span><span class="p">,</span> <span class="ss">url</span><span class="p">:</span> <span class="n">missions_path</span> <span class="k">do</span> <span class="o">|</span><span class="n">mission</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;h3&gt;Mission&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:mission_name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:mission_name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:objective</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:objective</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:enemy</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:enemy</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;h3&gt;Agent&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:agent_name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:agent_name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:agent_number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:agent_number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:licence_to_kill</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:licence_to_kill</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;h3&gt;Quartermaster&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:quartermaster_name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:quartermaster_name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:quartermaster_number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:quartermaster_number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:hacker</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:hacker</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:expertise</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:expertise</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:humor</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:humor</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">mission</span><span class="o">.</span><span class="n">submit</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can easily see, our view has become much simpler—no nestings and it’s a lot more straightforward this flat. The part you need to be a bit careful is this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="vi">@mission_presenter</span><span class="p">,</span> <span class="ss">url</span><span class="p">:</span> <span class="n">missions_path</span> <span class="k">do</span> <span class="o">|</span><span class="n">mission</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You need to provide <code>form_for</code> with a path via <code>url</code> so that it can <code>post</code> the params from this form to its proper controller—here <code>MissionsController</code>. Without that additional argument, Rails would try to find the controller for our presenter object <code>@mission_presenter</code> through conventions—in this case <code>MissionFormPresentersController</code>—and blow up without one.</p>

<p>In general, we should try our best to keep controller actions mostly as simple as dealing with the CRUD manipulation of resources—that’s what a controller does for a living and is best equiped to do without muddying the MVC distinctions. As a nice side effect, the level of complexity in your controllers will go way down as well.</p>

<h5>app/controllers/missions_controller.rb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MissionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="vi">@mission_presenter</span> <span class="o">=</span> <span class="no">MissionFormPresenter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@mission_presenter</span> <span class="o">=</span> <span class="no">MissionFormPresenter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mission_params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span>
</span><span class='line'>      <span class="vi">@mission_presenter</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;Mission accepted&#39;</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">missions_path</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:alert</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;Mission not accepted&#39;</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mission_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:mission_form_presenter</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="n">whitelisted</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">whitelisted</span>
</span><span class='line'>    <span class="o">[</span><span class="ss">:mission_name</span><span class="p">,</span> <span class="ss">:objective</span><span class="p">,</span> <span class="ss">:enemy</span><span class="p">,</span> <span class="ss">:agent_name</span><span class="p">,</span> <span class="ss">:agent_number</span><span class="p">,</span> <span class="ss">:licence_to_kill</span><span class="p">,</span> <span class="ss">:quartermaster_name</span><span class="p">,</span> <span class="ss">:quartermaster_number</span><span class="p">,</span> <span class="ss">:hacker</span><span class="p">,</span> <span class="ss">:expertise</span><span class="p">,</span> <span class="ss">:humor</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The controller is also a lot easier on the eyes, isn’t it? Much cleaner and pretty much standard controller actions. We are dealing with a single object that has one job. We instantiate a single object, the presenter, and feed it the params as usual.</p>

<p>The only thing that bugged me was sending this long list of whitelisted strong parameters. I extracted them into a method called <code>whitelisted</code> which just returns an array with the complete list of parameters. Otherwise, <code>mission_params</code> would have looked like the following—which felt too nasty:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">mission_params</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:mission_form_presenter</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:mission_name</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="ss">:objective</span><span class="p">,</span> <span class="ss">:enemy</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="ss">:agent_name</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="ss">:agent_number</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="ss">:licence_to_kill</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="ss">:quartermaster_name</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="ss">:quartermaster_number</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="ss">:hacker</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="ss">:expertise</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="ss">:humor</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh, a word about the <code>:mission_form_presenter</code> argument for <code>params.require</code>. Although we named our instance variable for the presenter <code>@mission_presenter</code>, when we use it with <code>form_for</code>, Rails expects the key of the params hash for the form to be named after the object instantiated—not after the name given in a controller. I have seen newbies trip over this several times. That Rails is providing you with cryptic errors in such a case isn’t helping either. If you need a little refresher on params, this is a good place to dig in:</p>

<ul>
<li><a href="http://api.rubyonrails.org/classes/ActionController/Parameters.html">Documentation</a></li>
<li><a href="https://www.youtube.com/watch?v=y57OnWV6dRE">Free screencast</a></li>
</ul>


<p>In our <code>Mission</code> model, we now have no need for <code>accepts_nested_attributes</code> anymore and can get rid of that harmless looking, dreaded thing. The <code>validates</code> method is also irrelevant here because we add this responsibility to our form object. Same goes for our validations on <code>Agent</code> and <code>Quartermaster</code> of course.</p>

<h5>app/models/mission.rb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Mission</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:agent</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:quartermaster</span>
</span><span class='line'>  <span class="c1">#accepts_nested_attributes_for :agent, :quartermaster, allow_destroy: true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#validates :mission_name, presence: true</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Encapsulating this validation logic directly on our new object helps us keeping things clean and organized. In cases where you could also create these objects independently from each other, validations should stay where they currently are of course. This kind of duplication can also be dealt with—no worries. FYI, for example by using <code>validates_with</code> with a separate class for validation that inherits from <code>ActiveModel::Validator</code>.</p>

<p>Now we have a skinny controller with a single responsibility and a flat form for creating multiple objects in parallel. Awesome! How did we achieve all this?  Below is the presenter that does all the work—not implying this class does a lot of work though. We want to have some sort of intermediary model without a database that juggles multiple objects. Take a look at this plain old ruby object (PORO).</p>

<h5>app/presenters/mission_form_presenter.rb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MissionFormPresenter</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Model</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span>  <span class="ss">:mission_name</span><span class="p">,</span> <span class="ss">:objective</span><span class="p">,</span> <span class="ss">:enemy</span><span class="p">,</span> <span class="ss">:agent_name</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">:agent_number</span><span class="p">,</span> <span class="ss">:licence_to_kill</span><span class="p">,</span> <span class="ss">:quartermaster_name</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">:quartermaster_number</span><span class="p">,</span> <span class="ss">:hacker</span><span class="p">,</span> <span class="ss">:expertise</span><span class="p">,</span> <span class="ss">:humor</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:mission_name</span><span class="p">,</span> <span class="ss">:agent_name</span><span class="p">,</span> <span class="ss">:quartermaster_name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">save</span>
</span><span class='line'>    <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@mission</span> <span class="o">=</span> <span class="no">Mission</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="n">mission_attributes</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@mission</span><span class="o">.</span><span class="n">create_agent!</span><span class="p">(</span><span class="n">agent_attributes</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@mission</span><span class="o">.</span><span class="n">create_quartermaster!</span><span class="p">(</span><span class="n">quartermaster_attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mission_attributes</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">mission_name</span><span class="p">:</span> <span class="n">mission_name</span><span class="p">,</span> <span class="ss">objective</span><span class="p">:</span> <span class="n">objective</span><span class="p">,</span> <span class="ss">enemy</span><span class="p">:</span> <span class="n">enemy</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">agent_attributes</span>
</span><span class='line'>    <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="n">agent_name</span><span class="p">,</span> <span class="ss">number</span><span class="p">:</span> <span class="n">agent_number</span><span class="p">,</span> <span class="ss">licence_to_kill</span><span class="p">:</span> <span class="n">licence_to_kill</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quartermaster_attributes</span>
</span><span class='line'>    <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="n">quartermaster_name</span><span class="p">,</span> <span class="ss">number</span><span class="p">:</span> <span class="n">quartermaster_number</span><span class="p">,</span> <span class="ss">hacker</span><span class="p">:</span> <span class="n">hacker</span><span class="p">,</span> <span class="ss">expertise</span><span class="p">:</span> <span class="n">expertise</span><span class="p">,</span> <span class="ss">humor</span><span class="p">:</span> <span class="n">humor</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think it’s fair to say that it’s not very complicated. <code>MissionFormPresenter</code> is a form object that now encapsulates what made our controller unnecessarily fat. As a bonus, our view became flat and simple. What happens here is that we can aggregate all the info from our form and then we create all the objects we need sequentially.</p>

<p>The most important piece happens in our new <code>save</code> method. First we create the new <code>Mission</code> object. After that, we can create the two objects assoicated with it: <code>Agent</code> and <code>Quartermaster</code>. Through our <code>has_one</code> / <code>belongs_to</code> associations, we can make use of of a <code>create_x</code> method that adapts to the name of the associated object. For example, if we use <code>has_one :agent</code> we get a <code>create_agent</code> method. Easy, right? (FYI, actually we also get a <code>build_agent</code> method.) I decided to use the version with a bang(!) because it raises an <code>ActiveRecord::RecordInvalid</code> error if the record is invalid while attempting to save. Wrapped inside a <code>transaction</code> block, these bang methods take care that no ophaned object gets saved if some validation kicks in. The transaction block will roll back if something goes wrong during save.</p>

<p>How does this work with the attributes you might ask? We ask Rails for a little bit of love via <code>include ActiveModel::Model</code> (<a href="http://api.rubyonrails.org/classes/ActiveModel/Model.html">API</a>). This allows us to initialize objects with a hash of attributes—which is exactly what we do in the controller. After that, we can use our <code>attr_accessor</code> methods to extract our attributes to instantiate the objects we really need. <code>ActiveModel::Model</code> further enables us to interact with views and controllers. Among other goodies, you can also use this for validations in such classes. Putting these validations into such dedicated form objects is a good idea for organization and it also keeps your models a bit more tidy. I decided to extract the long list of parameters into private methods which feed the objects that get created in <code>save</code>. In such a presenter object, I have little concern of having a couple more private methods lying around. Why not? Feels cleaner!</p>

<p>Testing these kind of scenarios where multiple models come together should be treated with utmost care—the simpler the objects in question, the better the testing experience. No rocket science really. Presenters operate in your favor on this one. Having these tests potentially tied to the controller is not the best way to approach this. Remember, unit tests are fast and cheap.</p>

<p>A word of caution. Do not overuse presenters—they should not be your first choice. Usually, the need for a presenter grows over time. For me personally, they are best used when you have data represented by multiple models that need to come together in a single view. Without a presenter, you might more often than not prepare multiple instance variables in your controller for a single view. That alone can make them real fat real quick. A thing that you should consider and weigh is while presenters add objects to your codebase they can also reduce the number of objects a controller needs to deal with—less complexity and single responsibilities. It is probably a fairly advanced technique to lose some fat, but when you want to slim down, you need to put in the work.</p>

<h2>Non-RESTful Controllers</h2>

<p>Not trying to adhere to the standard controller actions is most likely a bad idea. Having tons of custom controller methods is an antipattern you can avoid pretty easily. Methods like <code>login_user</code>, <code>activate_admin</code>, <code>show_books</code>, and other funny business that stands in for <code>new</code>, <code>create</code>, <code>show</code> and so forth, should give you a reason to pause and to doubt your approach. Not following a REST-ful approach can easily lead to big, massive controllers, mostly likely because you’ll need to fight the framework or reinvent the wheel every once in a while. In short, not a good idea. Also, more often than not, it’s also a symptom of inexperience or carelessnes. Following the “Single Responsibility Principle” seems to be very hard under these circumstances as well—just an educated guess though.</p>

<p>Approaching resources in your controller in a  restful manner is making your life a lot less complicated and your apps are becoming easier to maintain as well—which adds to the overall stability of your app. Think about handling resources REST-fully from the perspective of an object’s life cycle. You create, update, show (single or collections), update and destroy them. For most cases, this will do the job. FYI, <code>new</code> and <code>edit</code> actions aren’t really part of REST—they are more like different versions of the <code>show</code> action, helping you present different stages in the resource’s life cycle. Put together, most of the time, these seven standard controller actions give you all you need to manage your resources in your controllers. Another big advantage is that other Rails developers working with your code will be able to navigate your controllers much faster.</p>

<p>Following that line of REST-ful cool aid, this also includes the way you name your controllers. The name of the resource you work on should be mirrored in the controller object. For example, having a <code>MissionsController</code> that handles other resources than <code>@mission</code> objects is a smell that something is off. The sheer size of a controller often is also a dead giveaway that REST was ignored. Should you encounter large controllers that implement tons of customized methods that break with conventions, it can be a very effective strategy to split them into multiple distinctive controllers that have focused responsibilities—and bascially manage only a single resource while adhering to a REST-ful style. Break them apart agressively and you will have an easier time to compose their methods the Rails way.</p>

<h2>Rat’s Nest Resources</h2>

<p>Look at the following example and ask yourself what’s wrong with this:</p>

<h4>Nested AgentsController</h4>

<h5>app/controllers/agents_controller.rb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AgentsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:mission_id</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@mission</span> <span class="o">=</span> <span class="no">Mission</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:mission_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@agents</span> <span class="o">=</span> <span class="vi">@mission</span><span class="o">.</span><span class="n">agents</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@agents</span> <span class="o">=</span> <span class="no">Agent</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we check if we have a nested route that provides us with the id for a possible <code>@mission</code> object. If so, we want to use the associated object to get the <code>agents</code> from it. Otherwise, we’ll fetch a list of all agents for the view. Looks harmless, especially because it’s still concise, but it’s the start of a potentially way larger rat’s nest.</p>

<h4>Nested Routes</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:agents</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:missions</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:agents</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing obtuse about the nested routes here. In general, there is nothing wrong about this approach. The thing we should be careful about is how the controller handles this business—and as a consequence, how the view needs to adapt to it. Not exactly squeaky clean as you can see below.</p>

<h4>View With Unnecessary Conditional</h4>

<h5>app/views/agents/index.html.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@mission</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;h2&gt;Mission&lt;/h2&gt;</span>
</span><span class='line'><span class="x">  &lt;div&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@mission</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">  &lt;div&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@mission</span><span class="o">.</span><span class="n">objective</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">  &lt;div&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@mission</span><span class="o">.</span><span class="n">enemy</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;h2&gt;Agents&lt;/h2&gt;</span>
</span><span class='line'><span class="x">&lt;ul&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="vi">@agents</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">agent</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;li class=&#39;agent&#39;&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Name:            </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Number:          </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">number</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Licence to kill: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">licence_to_kill</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Status:          </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">status</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/li&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Might also not look like a big deal, I get it. The level of complexity is not exactly real world though. Aside from that, the argument is more about dealing with resources in an object oriented way and about using Rails to your fullest advantage. I guess this is a little bit of an edge case regarding single responsibilities. It’s not exactly violating this idea too bad, even though we have a second object—@mission—for the association lingering around. But since we are using it for getting access to a specific set of agents, this is totally alright.</p>

<p>The branching is the part that is inelegant and will most likely lead to poor design decisions—both in views and controllers. Creating two versions of <code>@agents</code> in the same method is the perpetrator here. I’ll make it short, this can get out of hand really quickly. Once you start nesting resources like this, chances are good new rats are hanging around soon. And the view above also needs a conditional that adapts to the situation for when you have <code>@agents</code> associated with a <code>@mission</code>. As you can easily see, a little bit of sloppiness in your controller can lead to bloated views that have more code than needed. Let’s try another approach. Exterminator time!</p>

<h4>Separate Controllers</h4>

<p>Instead of nesting these resources, we should be giving each version of this resource its own distinctive, focused controller—one controller for “simple”, unnested agents and one for agents that are associated with a mission. We can achieve this via namespacing one of them under a <code>/missions</code> folder.</p>

<h5>app/controllers/missions/agents_controller.rb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Missions</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">AgentsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>      <span class="vi">@mission</span> <span class="o">=</span> <span class="no">Mission</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:mission_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@agents</span> <span class="o">=</span> <span class="vi">@mission</span><span class="o">.</span><span class="n">agents</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>By wrapping this controller inside a module, we can avoid that <code>AgentsController</code> inherits twice from <code>ApplicationController</code>. Without it, we would run into an error like this: <code>Unable to autoload constant Missions::AgentsController</code>. I think a module is a small price to pay for making Rails autoloading happy. The second <code>AgentsController</code> can stay in the same file as before. It now only deals with one possible resource in <code>index</code>—prepping all agents without missions that are around.</p>

<h5>app/controllers/agents_controller.rb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AgentsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@agents</span> <span class="o">=</span> <span class="no">Agent</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, we also need to instruct our routes to look for this new namespaced controller if agents are associated with a mission.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:agents</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:missions</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:agents</span><span class="p">,</span> <span class="ss">controller</span><span class="p">:</span> <span class="s1">&#39;missions/agents&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After we specified that our nested resource has a namespaced controller, we’re all set. When we do a <code>rake routes</code> check in the terminal, we’ll see that our new controller is namespaced and that we are good to go.</p>

<h4>New Routes</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> Prefix Verb   URI Pattern                                     Controller#Action
</span><span class='line'>              root GET    /                                               agents#index
</span><span class='line'>            agents GET    /agents<span class="o">(</span>.:format<span class="o">)</span>                               agents#index
</span><span class='line'>                   POST   /agents<span class="o">(</span>.:format<span class="o">)</span>                               agents#create
</span><span class='line'>         new_agent GET    /agents/new<span class="o">(</span>.:format<span class="o">)</span>                           agents#new
</span><span class='line'>        edit_agent GET    /agents/:id/edit<span class="o">(</span>.:format<span class="o">)</span>                      agents#edit
</span><span class='line'>             agent GET    /agents/:id<span class="o">(</span>.:format<span class="o">)</span>                           agents#show
</span><span class='line'>                   PATCH  /agents/:id<span class="o">(</span>.:format<span class="o">)</span>                           agents#update
</span><span class='line'>                   PUT    /agents/:id<span class="o">(</span>.:format<span class="o">)</span>                           agents#update
</span><span class='line'>                   DELETE /agents/:id<span class="o">(</span>.:format<span class="o">)</span>                           agents#destroy
</span><span class='line'>    mission_agents GET    /missions/:mission_id/agents<span class="o">(</span>.:format<span class="o">)</span>          missions/agents#index
</span><span class='line'>                   POST   /missions/:mission_id/agents<span class="o">(</span>.:format<span class="o">)</span>          missions/agents#create
</span><span class='line'> new_mission_agent GET    /missions/:mission_id/agents/new<span class="o">(</span>.:format<span class="o">)</span>      missions/agents#new
</span><span class='line'>edit_mission_agent GET    /missions/:mission_id/agents/:id/edit<span class="o">(</span>.:format<span class="o">)</span> missions/agents#edit
</span><span class='line'>     mission_agent GET    /missions/:mission_id/agents/:id<span class="o">(</span>.:format<span class="o">)</span>      missions/agents#show
</span><span class='line'>                   PATCH  /missions/:mission_id/agents/:id<span class="o">(</span>.:format<span class="o">)</span>      missions/agents#update
</span><span class='line'>                   PUT    /missions/:mission_id/agents/:id<span class="o">(</span>.:format<span class="o">)</span>      missions/agents#update
</span><span class='line'>                   DELETE /missions/:mission_id/agents/:id<span class="o">(</span>.:format<span class="o">)</span>      missions/agents#destroy
</span></code></pre></td></tr></table></div></figure>


<p>Our nested resource for <code>agents</code> is now properly redirected to <code>controllers/missions/agents_controller.rb</code> and each action can take care of agents that are part of a mission. For completeness sake, let’s have a look at our final views as well:</p>

<h4>Agents With Mission</h4>

<h5>app/views/missions/agents/index.html.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;h2&gt;Mission&lt;/h2&gt;</span>
</span><span class='line'><span class="x">&lt;div&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@mission</span><span class="o">.</span><span class="n">mission_name</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">&lt;div&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@mission</span><span class="o">.</span><span class="n">objective</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">&lt;div&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@mission</span><span class="o">.</span><span class="n">enemy</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;h2&gt;Agents&lt;/h2&gt;</span>
</span><span class='line'><span class="x">&lt;ul&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="vi">@agents</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">agent</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;li class=&#39;agent&#39;&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Name:            </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Number:          </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">number</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Licence to kill: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">licence_to_kill</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/li&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Agents Without Mission</h4>

<h5>app/views/agents/index.html</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;h2&gt;Agents&lt;/h2&gt;</span>
</span><span class='line'><span class="x">&lt;ul&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="vi">@agents</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">agent</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;li class=&#39;agent&#39;&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Name:            </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Number:          </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">number</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Licence to kill: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">licence_to_kill</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/li&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, let’s get rid of that little bit of duplication where we iterate over <code>@agents</code> also. I created a partial for rendering a list of agents and put it into a new <code>shared</code> directory under <code>views</code>.</p>

<h5>app/views/shared/_agents.html.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;h2&gt;Agents&lt;/h2&gt;</span>
</span><span class='line'><span class="x">&lt;ul&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="vi">@agents</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">agent</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;li class=&#39;agent&#39;&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Name: </span><span class="cp">&lt;%=</span>            <span class="n">agent</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Number: </span><span class="cp">&lt;%=</span>          <span class="n">agent</span><span class="o">.</span><span class="n">number</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;div&gt;Licence to kill: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">licence_to_kill</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/li&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing new or surprising here but our views are now more DRY.</p>

<h4>Agents With Mission</h4>

<h5>app/views/missions/agents/index.html.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;h2&gt;Mission&lt;/h2&gt;</span>
</span><span class='line'><span class="x">&lt;div&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@mission</span><span class="o">.</span><span class="n">mission_name</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">&lt;div&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@mission</span><span class="o">.</span><span class="n">objective</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="x">&lt;div&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@mission</span><span class="o">.</span><span class="n">enemy</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">&quot;shared/agents&quot;</span><span class="p">,</span> <span class="ss">collection</span><span class="p">:</span> <span class="vi">@agents</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Agents Without Mission</h4>

<h5>app/views/agents/index.html</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">&quot;shared/agents&quot;</span><span class="p">,</span> <span class="ss">collection</span><span class="p">:</span> <span class="vi">@agents</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Dope!</p>

<h2>Final Thoughts</h2>

<p>I think if you as a beginner can avoid these AntipPatterns in your controllers you are off to a very good start. There is still much left to learn for you in this regard but give it time, it’s nothing that comes too easy or overnight. On the other hand, if you you are hungry for more and like to explore more advanced techniques I’m all for it of course. Don’t let yourself be discouraged by the “advanced” name tag. Take your time, have fun and don’t get frustrated if you need to revisit the topic again because you don’t yet have all pieces of the puzzle in place yet. If you are early in the development game and started to play with design patterns, I believe you are way ahead of the game and made the right decision. Don’t wait and get out of your comfort zone to stretch your gray matter a bit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AntiPatterns Basics—Rails Views]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2016/01/03/AntiPatterns-Basics-Rails-Views/"/>
    <updated>2016-01-03T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2016/01/03/AntiPatterns-Basics-Rails-Views</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/AntiPatterns/Views/pisa-tower.1000x580.jpeg"></p>

<h2>Heads Up</h2>

<p>Anti- what? It probably sounds a lot more complicated than it is. Over the last couple of decades, programmers were able to identify a useful selection of “design” patterns that frequently occurred throughout their code solutions. While solving similar problems, they were able to classify solutions that prevented them from reinventing the wheel for every project. It is important to note that these patterns should be seen more as discoveries than the inventions of a group of advanced developers.</p>

<p>AntiPatterns—as the name implies—on the other hand represent pretty much the opposite. They are discoveries of solutions to problems that you should definitely avoid. They often represent the work of inexperienced coders who don’t know what they don’t know yet. Worse, it could be the output of a lazy person who just ignores best practices for no good reason—or they think they don’t. What they might hope to gain in time savings in the beginning by hammering out quick, lazy or dirty solutions is gonna haunt them or some sorry successor later in the project’s life cycle. Do not underestimate the implications or these bad decisions, they’re gonna plague you like a curse—no matter what.</p>

<p>This one is exactly written for you if all this sounds rather new to you and you identify yourself as being more on the beginner side of all things Ruby / Rails. I think, it’s best if you approach these articles as quick skinny-dips into a much deeper topic whose mastery will not happen overnight. Nevertheless, I strongly believe that starting to get into this early will benefit beginners and their mentors tremendously.</p>

<h2>Topics</h2>

<ul>
<li>Rails Views</li>
<li>PHPitis</li>
<li>Extracting Helpers</li>
<li>Helpful Helpers</li>
<li>Forms</li>
<li>Partials</li>
<li>Conditional Content</li>
<li>Semantic Markup</li>
</ul>


<h2>Rails Views</h2>

<p>Rails comes with ERb out of the box and I think it’s not necessary to throw in cool view-rendering engines like Slim for our examples for now. When you think “convention over configuration” mostly applies to the model and controller layers you are missing out on a lot of the goodies that makes working with Rails so speedy and progressive. Taking good care of the view layer includes not only the way you compose your markup but also CSS / Sass, JavaScript, view helpers and your layout templates. Viewed from that angle it becomes a bit deeper than you might think at first. Alone that number of technologies which can be involved in creating your views suggest that care should be taken to keep things neat, clear and flexible.</p>

<p>Since the way we write markup and styles is a lot less constrained than domain modeling, you want to be extra cautious to keep things as simple as possible. Maintenance should be pretty much your number one priority. Since redesigns or design iterations can be more frequent than extensive changes to your model layer, preparing for change gets a whole nother meaning when it comes to your user facing layer. My advice, don’t necessarily build for the future but also, by all means, do not underestimate the rate of change—especially if you have one of those “idea guys” who knows jack about implementations on the team. What I like about Rails’ approach towards views in MVC is that it is treated as equally important and the lessons learned from the model domain were incorporated into the view—whenever possible and useful. Other frameworks seem to agree since they integrated a lot of these ideas pioneered by Rails.</p>

<p>Since the last article was a bit more extensive I chose this topic as a small breather. The following articles about Rails controllers and testing are again bigger in size. The AntiPatterns for views are not that many but they are nevertheless equally important—at least. We’ll focus on the main one, PHPitis, and work through a couple of techniques to keep your views lean and mean. Since the view is your presentation layer, maybe you should be especially careful to not create a hazardous mess. Let’s get to it!</p>

<h2>PHPitis</h2>

<p>Why do we have MVC in the first place? Yes, because the separation of concerns seemed like the most reasonable thing to do. Sure the implementations of this idea vary a bit here and there but the overall concept of having distinct responsibilities for each layer is the core motivation for building robust applications. Having tons of code in your view layer might not be alien to developers coming from the PHP side of things—although I hear their frameworks have caught up already (heavily influenced by things like Rails?)—but in Ruby land these things have been a loudly voiced AntiPattern—since forever I feel like.</p>

<p>The obvious problems like mixing responsibilities and duplications aside, it simply feels nasty and lazy—a little stupid too to be frank. Sure, I get it, when you develop much within a framework, language or whatever ecosystem, it’s easy to become complicit or numb towards crap like that. What I like about the people pushing Ruby is that these things seem to have a lot less weight—might be a reason why innovating never seemed to be a problem within the community. Whatever works best wins the argument and we can move forward.</p>

<p>So is this a whole section dedicated to bash PHP? Not at all! In the past, PHP apps had the reputation of having weak separations between models, views and controllers (Maybe this was one of the core reasons why people felt writing apps with Rails was much more appealing). Having single files with code for all three layers didn’t seem that sexy. So when we stuff tons of Ruby / domain code into our views it starts to look like the dreaded PHP style of structuring things—PHPitis. Only a few things are as bad as this when it comes to developing web apps I feel. When you care about happy developers and your own future sanity, I can’t see why anyone would go down that road—only pain ahead it seems.</p>

<p>Rails offers a lot of goodies to minimize code in the view as much as possible. You must learn the ways of helpers, layouts and preprocessors in order to achieve a cleaner view. A simple rule of thumb is to keep domain logic out of your views—no shortcuts! The price to pay for being lazy on this is hard to overestimate. The Ruby code that must be in the presentation layer should be as little and as simple as possible as well as intelligently organized. Your reward will be code that is a joy to extend and to maintain—new team members will also have an easier time wrapping their heads around the new codebase. As a bonus, neat freak designers who code also won’t be angy and hide rotten food in your salad if you keep tons of Ruby code out of their markup.</p>

<h3>Helpful Helpers</h3>

<p>Knowing the myriad of helper methods in Rails will significantly improve the quality of your presentation layer. Not only will it clean things up and inject the occasional speed boost in productivity, but more importantly it helps you fight PHPitis. The thing that you should appreciate about these helpers is that they represent extractions from commonly needed code. Instead of reinventing the wheel, when in doubt, check if there isn’t already a helper around that solves your issue in the view—same goes for Models and Controllers as well of course.</p>

<p>Here’s a list of helpers you should look into pretty much right away:</p>

<ul>
<li><code>form_for</code></li>
<li>Other helpers for forms.</li>
<li><code>fields_for</code></li>
<li><code>link_to</code></li>
<li><code>content_for</code></li>
<li>And writing your very own of course.</li>
</ul>


<h3>Forms</h3>

<p>Let’s have a look at <code>form_for</code> first. I know forms are a little bit boring and not that sexy for a topic, but I highly encourage you to read up on them to familiarize yourself with the finer details. It’s important to understand how they work. I remember often just glancing over them without giving them much attention. Sure you can get them to work quite easily without understanding what’s going on under the hood. In the future, I might take the time to write a complete article on them. In the meantime, I highly recommend that you spend a little time checking the documentation–at least you‘ll appreciate how convenient Rails makes it to deal with form stuff.</p>

<h4>The Ugly</h4>

<p>The example below shows you the HTML of a little form we need for creating agents. It only accepts three parameters as input: <code>name</code>, <code>number</code> and <code>licence_to_kill</code>. A lot of code for this little task actually. The <code>authenticity_token</code> comes from Rails–it’s a security thing that protects the app from “cross-site request forgery”.</p>

<h6>some.html.erb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">&quot;new_agent&quot;</span> <span class="na">id=</span><span class="s">&quot;new_agent&quot;</span> <span class="na">action=</span><span class="s">&quot;/agents&quot;</span> <span class="na">accept-charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;utf8&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;&amp;#x2713;&quot;</span> <span class="nt">/&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;authenticity_token&quot;</span> <span class="na">value=</span><span class="s">&quot;8tD8G9mBt5l34TcN6Tnt/Mbto32itOuS1fWbc3Ez1vKinUmdexxUQlFp7mXIYoazQJjjSgryFIuL4dioxtJw/g==&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_name&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[name]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_name&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_number&quot;</span><span class="nt">&gt;</span>Number<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[number]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_number&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_licence_to_kill&quot;</span><span class="nt">&gt;</span>Licence to kill<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;agent[licence_to_kill]&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[licence_to_kill]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_licence_to_kill&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">value=</span><span class="s">&quot;Create Agent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Writing a form by hand is not only lengthy but error prone as well. Also, if we would approach it that way, we’d also have to solve the issue with the varying routes and  CSS classes that we might need for creating a new object and updating an existing one—in effect, we would need to duplicate forms to create and edit records. As you’ll see soon, Rails meets you more than halfway on that. Verdict, however you put it, the manual approach is nasty and lacks convenience.</p>

<h4>The Bad</h4>

<p>We could go down the following road which does not make perfect use of conventions in Rails. Heads up, don’t do it. It basically shows that you don’t handle the available tools to your advantage and you are duplicating the form for <code>new</code> and <code>edit</code> actions.</p>

<h6>some.html.erb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="ss">:agent</span><span class="p">,</span>
</span><span class='line'>             <span class="ss">url</span><span class="p">:</span> <span class="n">agents_path</span><span class="p">(</span><span class="vi">@agent</span><span class="p">),</span>
</span><span class='line'>             <span class="ss">html</span><span class="p">:</span> <span class="p">{</span><span class="nb">method</span><span class="p">:</span> <span class="ss">:post</span><span class="p">}</span> <span class="k">do</span> <span class="o">|</span><span class="n">form_object</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:licence_to_kill</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:licence_to_kill</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">submit</span> <span class="s1">&#39;Create New Agent&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens here is that the form builder carries the model you need for the form.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Behind the scences, the line above get’s expanded into the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">text_field</span> <span class="ss">:agent</span><span class="p">,</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>form_for</code> method takes a couple of arguments:</p>

<ul>
<li>A symbol or a string for specifying the object</li>
<li>A <code>url</code> hash</li>
<li>A <code>html</code> hash.</li>
<li>A <code>namespace</code> hash</li>
</ul>


<p>The url hash is for specifing the routing options. That means that you can manually specify to which routing path you submit the form to—named routes come in handy with this. This style is called the “generic way” because you need to manually configure the <code>form_for</code> call. Why is this solution suboptimal? Because we want to keep business logic out of our Views and Controllers as much as we can. A side effect of that is that we need to change fewer parts when needed.</p>

<h6>HTML</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/agents&quot;</span> <span class="na">accept-charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;utf8&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;&amp;#x2713;&quot;</span> <span class="nt">/&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;authenticity_token&quot;</span> <span class="na">value=</span><span class="s">&quot;FUjXyB+EKkwElmRNt//pUmzYa95qy+cBQWcUYJtOHIFFBWJOvRnJlyIevSWWpIId6q0r6cKNGBgfc1e7LK+6jQ==&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_name&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[name]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_name&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_number&quot;</span><span class="nt">&gt;</span>Number<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[number]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_number&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_licence_to_kill&quot;</span><span class="nt">&gt;</span>Licence to kill<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;agent[licence_to_kill]&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[licence_to_kill]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_licence_to_kill&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">value=</span><span class="s">&quot;Create New Agent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In case you missed it, this approach did not provide us with ids and classes for the <code>form</code> tag automatically. The ones for <code>input</code> tags however were generated for you. We’ll fix that in a minute. Just know what you can get for free and that you probably should use this to your advantage. If you need something different or an additional namespace, you can use the <code>html</code> hash or the <code>namespace</code> hash to specify things a bit more.</p>

<h6>some.html.erb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="ss">:agent</span><span class="p">,</span>
</span><span class='line'>             <span class="ss">url</span><span class="p">:</span> <span class="n">agents_path</span><span class="p">(</span><span class="vi">@agent</span><span class="p">),</span>
</span><span class='line'>             <span class="ss">html</span><span class="p">:</span> <span class="p">{</span><span class="nb">method</span><span class="p">:</span> <span class="ss">:post</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;create_agent&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;unique_agent&#39;</span><span class="p">},</span>
</span><span class='line'>             <span class="ss">namespace</span><span class="p">:</span> <span class="s1">&#39;mi6&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">form_object</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h6>HTML</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">&quot;create_agent&quot;</span> <span class="na">id=</span><span class="s">&quot;unique_agent&quot;</span> <span class="na">action=</span><span class="s">&quot;/agents&quot;</span> <span class="na">accept-charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;utf8&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;&amp;#x2713;&quot;</span> <span class="nt">/&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;authenticity_token&quot;</span> <span class="na">value=</span><span class="s">&quot;IAkMk58AJeTMbNHLf8wzYwf+seSpC8OfoHIJuu8M80FwRLkVPZ3GP+rkCKNel1gsgYvx0wFNPIb+ZkphWO1VTQ==&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;mi6_agent_name&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[name]&quot;</span> <span class="na">id=</span><span class="s">&quot;mi6_agent_name&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;mi6_agent_number&quot;</span><span class="nt">&gt;</span>Number<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[number]&quot;</span> <span class="na">id=</span><span class="s">&quot;mi6_agent_number&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;mi6_agent_licence_to_kill&quot;</span><span class="nt">&gt;</span>Licence to kill<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;agent[licence_to_kill]&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[licence_to_kill]&quot;</span> <span class="na">id=</span><span class="s">&quot;mi6_agent_licence_to_kill&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">value=</span><span class="s">&quot;Create New Agent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not bad! Now the <code>form</code> tag has the specified class and id—whatever makes your blood flow—and the <code>input</code> tags are namespaced with <code>mi6</code>. Almost there.</p>

<h4>The Good</h4>

<p>This one is called the “resource-oriented style” and has the least amount of Ruby you need to write in your views. With that approach we want to rely on automated resource identification. Rails figures out which routes it needs based on the object itself. Not only that, it gives you a different HTML output for creating a new object or for editing an existing one. Behind the scenes, Rails just asks the object if it already exits and acts accordingly. Creating forms this way is a clever use of conventions and helps avoid duplication. One line and all the heavy lifting is done for you.</p>

<h6>some.html.erb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="vi">@agent</span> <span class="k">do</span> <span class="o">|</span><span class="n">form_object</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:licence_to_kill</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:licence_to_kill</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">form_object</span><span class="o">.</span><span class="n">submit</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Much better, isn’t it? Now we get exactly what we need for both existing and new objects. Also, we didn’t need to add text to our submit button. Rails took care of that and also adapts to new or existing objects.</p>

<h6>HTML FOR NEW OBJECT</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">&quot;new_agent&quot;</span> <span class="na">id=</span><span class="s">&quot;new_agent&quot;</span> <span class="na">action=</span><span class="s">&quot;/agents&quot;</span> <span class="na">accept-charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;utf8&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;&amp;#x2713;&quot;</span> <span class="nt">/&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;authenticity_token&quot;</span> <span class="na">value=</span><span class="s">&quot;4BwAH2OkTvD0hOPOO7NB6rT94PoENUI4MazyoY8RN7+wUbWZwTmtK9IMOqYa6CqlMoigzaxzvSFvuLF6OPCRsw==&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_name&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[name]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_name&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_number&quot;</span><span class="nt">&gt;</span>Number<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[number]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_number&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;agent_licence_to_kill&quot;</span><span class="nt">&gt;</span>Licence to kill<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;agent[licence_to_kill]&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="na">name=</span><span class="s">&quot;agent[licence_to_kill]&quot;</span> <span class="na">id=</span><span class="s">&quot;agent_licence_to_kill&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">value=</span><span class="s">&quot;Create Agent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h6>HTML FOR EDITING OBJECTS</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">&quot;edit_agent&quot;</span> <span class="na">id=</span><span class="s">&quot;edit_agent_7&quot;</span> <span class="na">action=</span><span class="s">&quot;/agents/7&quot;</span> <span class="na">accept-charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;utf8&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;&amp;#x2713;&quot;</span> <span class="nt">/&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;authenticity_token&quot;</span> <span class="na">value=</span><span class="s">&quot;4BwAH2OkTvD0hOPOO7NB6rT94PoENUI4MazyoY8RN7+wUbWZwTmtK9IMOqYa6CqlMoigzaxzvSFvuLF6OPCRsw==&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>When editing objects, it is also reflected in the HTML output by adding the id to the form id and the route / action needed for updating a specific object.</p>

<p> A word about Rails magic. When people argue in exactly these situations that Rails is too magical for their taste, I often think that this could simply mean that they haven’t spent enough time learning the tools of their trade. Because once you take the time to master these tools, you’ll often understand not only why a simplification or an extraction was made but they also appear a lot more sober and straightforward.</p>

<h4>Attention!</h4>

<p>The code examples above used <code>form_object</code> as a block parameter. This is not recommended best practice but was done to remind you what this object represents and what gets yielded from <code>form_for</code>. Most people just use a plain <code>|f|</code> or <code>|form|</code>—which looks much nicer and concise. Btw, stuff like <code>label</code>, <code>text_field</code>, <code>check_box</code> and the likes are just helper methods that are called on the form builder object. There are a ton of them which cover pretty much any possible need you might encounter.</p>

<h6>some.html.erb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="vi">@agent</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:number</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span>      <span class="ss">:licence_to_kill</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">check_box</span>  <span class="ss">:licence_to_kill</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Concise and reads nice, right?</p>

<h3>Partials</h3>

<p>Collections are another thing we don’t want to be too verbose about. Rendering partials for individual objects of collections is so concise and straightforward—if done right—that I feel you have very little excuse not to make use of Rails’ conventions to reduce Ruby view code. Let’s turn things around with this one and start with an example that shows you how you are encouraged to approach this. Along they way, I’ll explain what you can leave out as well.</p>

<h4>The Good</h4>

<h6>app/views/agents/index.html.erb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@agents</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>render</code> method is quite smart. The line above is all you need to write for iterating over a collection. If you need to change something in this view, it will be a very small change—and therefore a small cause of error. What happens here is that the framework is able to determine which partial it needs. Through the name of the object, it knows where to look for the partial—given that you adhere to the conventional naming of things. The way I see it, this is a good example that Rails is not trying to impress you with wizardry. The Rails team works hard to make your lives easier by cutting through repetitive red tape of sorts.</p>

<h6>app/views/agents/_agent.erb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;h3&gt;Agent name: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x">&lt;/h3&gt;</span>
</span><span class='line'><span class="x">&lt;h4&gt;Licence to kill: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">licence_to_kill</span> <span class="cp">%&gt;</span><span class="x">&lt;/h4&gt;</span>
</span><span class='line'><span class="x">&lt;h4&gt;Number: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">number</span> <span class="cp">%&gt;</span><span class="x">&lt;/h4&gt;</span>
</span><span class='line'><span class="x">&lt;h4&gt;Gambler: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">gambler</span> <span class="cp">%&gt;</span><span class="x">&lt;/h4&gt;</span>
</span><span class='line'><span class="x">&lt;h4&gt;Womanizer: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">womanizer</span> <span class="cp">%&gt;</span><span class="x">&lt;/h4&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only other thing that is necessary to make this work is placing a partial template at the appropriate path in your objects’s directory and extract the attributes you need from the object. No need to write any loops on your own. Fast and easy, handy and pragmatic I’d say. This extraction was originally done because the name of the partial was most of the time the name of the iterated object anyway and so it was easy to create a convention that handles this common task more effectively.</p>

<h4>The Bad</h4>

<p>Ok, now that we know how to handle this, let’s look what you could do and should avoid. The example below is just a bad usage of Rails but I wouldn’t call it ugly this time.</p>

<h6>app/views/agents/index.html.erb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="vi">@agents</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">agent</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;h3&gt;Agent name: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x">&lt;/h3&gt;</span>
</span><span class='line'><span class="x">  &lt;h4&gt;Licence to kill: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">licence_to_kill</span> <span class="cp">%&gt;</span><span class="x">&lt;/h4&gt;</span>
</span><span class='line'><span class="x">  &lt;h4&gt;Number: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">number</span> <span class="cp">%&gt;</span><span class="x">&lt;/h4&gt;</span>
</span><span class='line'><span class="x">  &lt;h4&gt;Gambler: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">gambler</span> <span class="cp">%&gt;</span><span class="x">&lt;/h4&gt;</span>
</span><span class='line'><span class="x">  &lt;h4&gt;Womanizer: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">womanizer</span> <span class="cp">%&gt;</span><span class="x">&lt;/h4&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You get the same result as above but it’s definitely more verbose. Iterating over the collection in the view is not necessary anymore. When you use <code>render</code> as above, the block parameter <code>agent</code> is implied and you can just use it without the <code>each</code> loop. So, stay away from code like this—it does not make you look particularly good (but nobody will collect your head for it either). It’s just not elegant and adds to the PHPitis.</p>

<h3>Extracting Helpers</h3>

<p>The most obvious solution to clean up code from your views is avoiding to write any or extracting them intelligently. Let’s say we want to scramble the names of our agents in the index list. We should not put this code directly in our views. If we decide that the model is also not the appropriate layer to place this, then a custom helper in the <code>app/helpers</code> directory might be the right choice.</p>

<h5>app/helpers/agents_helper.rb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">AgentsHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">scramble</span><span class="p">(</span><span class="n">agent</span><span class="p">)</span>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">shuffle</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>By packaging this in a module inside the helpers directory we now have access to this method in our views. Please give specific helpers their own home and don’t put everything on <code>ApplicationHelper</code> (<code>app/helpers/application_helper.rb</code>) which is really meant for more “global” stuff.</p>

<p>Now I can access this little fellow in my partial template—or any view—for rendering my collection of agents.</p>

<h5>app/views/agents/_agent.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;h3&gt;Agent name: </span><span class="cp">&lt;%=</span> <span class="n">scramble</span><span class="p">(</span><span class="n">agent</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/h3&gt;</span>
</span><span class='line'><span class="x">&lt;h4&gt;Licence to kill: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">licence_to_kill</span> <span class="cp">%&gt;</span><span class="x">&lt;/h4&gt;</span>
</span><span class='line'><span class="x">&lt;h4&gt;Number: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">number</span> <span class="cp">%&gt;</span><span class="x">&lt;/h4&gt;</span>
</span><span class='line'><span class="x">&lt;h4&gt;Gambler: </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">gambler</span> <span class="cp">%&gt;</span><span class="x">&lt;/h4&gt;</span>
</span><span class='line'><span class="x">&lt;h4&gt;Womanizer : </span><span class="cp">&lt;%=</span> <span class="n">agent</span><span class="o">.</span><span class="n">womanizer</span> <span class="cp">%&gt;</span><span class="x">&lt;/h4&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your own custom helpers are a great way to keep your views clean and healthy. And as you have seen, it’s so quick and easy that there’s little excuse to be too lazy and not extract them for battling PHPitis.</p>

<h2>Conditional Content</h2>

<p>The helper method <code>content_for</code> is a handy tool for extracting content that doesn’t really fit the bill for a partial but needs a bit of encapsulation. It’s a way to store a bit of markup that you can apply on a page per page basis—you yield it into the layout where needed. In size, it should be a lot smaller than partials or even layouts.</p>

<p>This technique can also save you the step to create your own method for it. Navigational menues or sidebars are often examples where this helper becomes useful. Let’s say you want to have a spot in your menu that is only for admins but don’t need to adjust the whole layout. Or you have pages where the sidebar is not needed. With <code>content_for</code> you inject what you need where you need it on a page per page basis. Duplication no more!</p>

<h6>app/views/agents/index.html.erb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="n">content_for</span> <span class="ss">:double_o_navbar</span> <span class="k">do</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Operations&#39;</span><span class="p">,</span> <span class="n">operations_path</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">  &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Agents&#39;</span><span class="p">,</span> <span class="n">agents_path</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">  &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Messages&#39;</span><span class="p">,</span> <span class="n">messages_path</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@agents</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h6>app/views/layouts/application.html.erb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">...</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;body&gt; </span>
</span><span class='line'><span class="x">  &lt;header&gt;</span>
</span><span class='line'><span class="x">    &lt;ul class=&#39;navbar&#39;&gt;</span>
</span><span class='line'><span class="x">      &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Home&#39;</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">      &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;About&#39;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="ss">:double_o_navbar</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/ul&gt;</span>
</span><span class='line'><span class="x">  &lt;/header&gt;</span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;/body&gt;</span>
</span><span class='line'><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aside from that fact that this <code>header</code> is a good candidate for extraction into a partial, look at the <code>yield :double_o_navbar</code> section. This is a yielding region that inserts code from a <code>content_for</code> block. It will only insert code if the symbol names match. Here we want only double-o agents to have access to certain links in the navbar. Everyone else sees just <code>Home</code> and <code>About</code>. Think about the special links an admin needs to see that should never face a public interface.</p>

<p>You can also use this helper to insert <code>id</code> or <code>class</code> attributes on HTML tags if needed. Every once in a while this comes in handy.</p>

<p>Another common use is populating the <code>&lt;title&gt;</code> of a page dynamically with a <code>content_for</code> block.</p>

<h6>app/views/layouts/application.html.erb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;title&gt;</span>
</span><span class='line'><span class="x">  Spectre – </span><span class="cp">&lt;%=</span> <span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span><span class="o">.</span><span class="n">presence</span> <span class="o">||</span> <span class="s2">&quot;Default&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/title&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h6>some.html.erb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="n">content_for</span> <span class="ss">:title</span> <span class="k">do</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Some funky title</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You just place the title you want in a <code>content_for</code> block and the application layout will insert it for you. You can get more clever with it but that should suffice for now. Should you have no need for a title or forget to add one then the logical <code>||</code> will kick in and yield a default of your choice. In the example above we need to check for the presence of a title or the default won’t work.</p>

<p>What you definitely don’t wanna do is create instance variables for that kinda thing. Single responsibilities, remember?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Some page title&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>One more thing, you can ask if pages have a <code>content_for</code> block.</p>

<h6>app/views/layouts/application.html.erb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">content_for?</span><span class="p">(</span><span class="ss">:q_navbar</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="ss">:q_navbar</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This can help you avoid duplicating markup that is relevant to styling a page which adapts if elements are present on a page or not.</p>

<h2>Semantic Markup</h2>

<p>This is stuff you definitely want to avoid.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;container&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;col-lg-6&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;col-md-4 col-md-offset-2&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The markup above is from the <a href="http://getbootstrap.com">bootstrap</a> documentation and specifies how the columns are supposed to &lsquo;look'—information that has no semantic meaning and actually belongs into your stylesheets. That’s the stuff designers have nightmares about.</p>

<p>So what’s the deal with that? This is important because—besides the questionable naming of classes—unsemantic markup violates <strong>separation of concerns</strong>. Your markup should not be bothered with styling information, instead both should stand on their own and enable you to <strong>switch out styles effortlessly</strong>—without touching your HTML. It’s not as difficult as it might sound at first. It takes a bit of discipline though.</p>

<p>When you are able to keep that styling information out of your markup you have effectively achieved reducing PHPitis on another front—for designers an essential one! Also, the use of <strong>generic divs</strong> without inherent meaning is another example of poor markup. <strong>HTML5</strong> gives you lots of useful elements that convey more information to your <strong>future self</strong>, <strong>other developers and search engines</strong>. Naming is supposedly hard, but HTML5 provides you with lots of <strong>semantic elements</strong> that make your options much easier in that regard.</p>

<h2>Final Thoughts</h2>

<p>I hope you have seen that Rails Views don’t need much love to shine. Developers can be a bit snobby about the frontend layer. Dealing with Markup sometimes seems to be a little beneath them—writing HTML, DUH! Well, I shouldn’t throw any stones, but I came to appreciate a fine tuned, well honed presentation layer. It makes it much more fun to work with and when done right, much faster to make the inevitable changes. Parsing tons of Ruby code mixed with badly written markup is not a fun experience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Middleman Basics 06-Podcast Site (Part 04)]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2016/01/02/Middleman-Basics-06-Podcast-04/"/>
    <updated>2016-01-02T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2016/01/02/Middleman-Basics-06-Podcast-04</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_03_build/Middleman_Bourbon_Banner.png"></p>

<h2>Topics</h2>

<ul>
<li>Hero Section</li>
<li>Navigation</li>
<li>Title</li>
<li>Pagination</li>
</ul>


<h2>Hero Section</h2>

<p>Why don’t we add a small hero section on top of the index site? I want something that gives us an opportunity to brand the podcast site without going full-splashy-marketing-page-apeshit. I strongly trust in “less is more” and moreover, in “don’t insult your users by bombarding them with bs”. Let’s keep it nice and simple.</p>

<p>In this last article we will make use of another part of the Bourbon family and implement a couple of patterns from <a href="http://refills.bourbon.io/">Refills</a>—which provides a pattern / components library (styled and unstyled) and is built with Bourbon and Neat. Why reinvent the wheel when we can now and then adjust existing ones to our needs. Btw, this project is also maintained by designers at <a href="https://thoughtbot.com/">thoughtbot</a>—so it’s in very good hands qualitywise.</p>

<p>Go to <a href="http://refills.bourbon.io/">http://refills.bourbon.io/</a> and copy the markup for the “Hero Unit”. The provided markup is placed in our index file—right above the part where we iterate over our <code>page_articles</code>.</p>

<h5>source/index.html.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hero&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hero-inner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">class=</span><span class="s">&quot;hero-logo&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/placeholder_logo_1.png</span>
</span><span class='line'><span class="s">&quot;</span> <span class="na">alt=</span><span class="s">&quot;Logo Image&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hero-copy&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>Short description of Product<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>A few reasons why this product is worth using, who it&#39;s for and why they need it.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;posts&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% page_articles.each_with_index do |article, i| %&gt;
</span><span class='line'>    <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&#39;post-title&#39;</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">&#39;post-date&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= article.date.strftime(&#39;%b %e&#39;) %&gt;<span class="nt">&lt;/span&gt;</span> <span class="err">&lt;</span>%= link_to article.title, article %&gt;<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>I copied the styles from Refills’ pattern section as well and placed them into a new file dedicated to this banner section. The provided styles are in the <code>.scss</code> syntax and so I go with the flow—see no need to convert this into <code>.sass</code> really.</p>

<h5>source/stylesheets/_hero_banner.scss</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.hero</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$base-border-radius</span><span class="o">:</span> <span class="mi">3</span><span class="kt">px</span> <span class="nv">!default</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$action-color</span><span class="o">:</span> <span class="mh">#477DCA</span> <span class="nv">!default</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$large-screen</span><span class="o">:</span> <span class="nf">em</span><span class="p">(</span><span class="mi">860</span><span class="p">)</span> <span class="nv">!default</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$hero-background-top</span><span class="o">:</span> <span class="mh">#7F99BE</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$hero-background-bottom</span><span class="o">:</span> <span class="mh">#20392B</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$hero-color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$gradient-angle</span><span class="o">:</span> <span class="mi">10</span><span class="kt">deg</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$hero-image</span><span class="o">:</span> <span class="s1">&#39;</span><span class="s2">https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/mountains.png&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> background</span><span class="p">(</span><span class="sx">url($hero-image)</span><span class="o">,</span> <span class="nf">linear-gradient</span><span class="p">(</span><span class="nv">$gradient-angle</span><span class="o">,</span> <span class="nv">$hero-background-bottom</span><span class="o">,</span> <span class="nv">$hero-background-top</span><span class="p">)</span><span class="o">,</span> <span class="no">no-repeat</span> <span class="nv">$hero-background-top</span> <span class="no">scroll</span><span class="p">);</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="mh">#324766</span><span class="p">;</span>
</span><span class='line'>  <span class="na">background-position</span><span class="o">:</span> <span class="no">top</span><span class="p">;</span>
</span><span class='line'>  <span class="na">background-repeat</span><span class="o">:</span> <span class="no">no-repeat</span><span class="p">;</span>
</span><span class='line'>  <span class="na">background-size</span><span class="o">:</span> <span class="n">cover</span><span class="p">;</span>
</span><span class='line'>  <span class="na">padding-bottom</span><span class="o">:</span> <span class="mi">3</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">.hero-logo</span> <span class="nt">img</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">height</span><span class="o">:</span> <span class="mi">4</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>    <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">.hero-inner</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> outer-container</span><span class="p">;</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> clearfix</span><span class="p">;</span>
</span><span class='line'>    <span class="na">margin</span><span class="o">:</span> <span class="no">auto</span><span class="p">;</span>
</span><span class='line'>    <span class="na">padding</span><span class="o">:</span> <span class="mi">3</span><span class="mf">.5</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>    <span class="na">text-align</span><span class="o">:</span> <span class="no">center</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.hero-copy</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">text-align</span><span class="o">:</span> <span class="no">center</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>        <span class="na">color</span><span class="o">:</span> <span class="nv">$hero-color</span><span class="p">;</span>
</span><span class='line'>        <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.6</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>        <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">@include</span><span class="nd"> media</span><span class="p">(</span><span class="nv">$large-screen</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.8</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">p</span> <span class="p">{</span>
</span><span class='line'>        <span class="na">color</span><span class="o">:</span> <span class="nv">$hero-color</span><span class="p">;</span>
</span><span class='line'>        <span class="na">line-height</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.4</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>        <span class="na">margin</span><span class="o">:</span> <span class="mi">0</span> <span class="no">auto</span> <span class="mi">3</span><span class="kt">em</span> <span class="no">auto</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">@include</span><span class="nd"> media</span><span class="p">(</span><span class="nv">$large-screen</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.1</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>          <span class="na">max-width</span><span class="o">:</span> <span class="mi">40</span><span class="kt">%</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will adjust this in a second but let’s take a peek first:</p>

<h5>Screenshot</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_06_build/hero-unit-copy.png"></p>

<p>Fits right in—that’s how I like it! Let’s tweak this to our needs by getting rid of the image and icon. But let’s start with the text.</p>

<h5>source/index.html.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hero&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hero-inner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">class=</span><span class="s">&quot;hero-logo&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/placeholder_logo_1.png</span>
</span><span class='line'><span class="s">&quot;</span> <span class="na">alt=</span><span class="s">&quot;Logo Image&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hero-copy&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>MATCHA NERDZ<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>Podcast for green tea connoisseurs<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can tweak this any way you like. I wanna make this quick and just increase the size of the <code>h1</code> for both large screens and smaller devices. The hero unit header is now <code>2em</code> and <code>3em</code> respectively—not too much. The padding on <code>.hero-inner</code> also needs to move a nudge.</p>

<h5>source/stylesheets</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.hero-inner</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//padding: 3.5em;</span>
</span><span class='line'>  <span class="na">padding-top</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.2</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.hero-copy</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">text-align</span><span class="o">:</span> <span class="no">center</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nv">$hero-color</span><span class="p">;</span>
</span><span class='line'>    <span class="na">font-size</span><span class="o">:</span> <span class="mi">2</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>    <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> media</span><span class="p">(</span><span class="nv">$large-screen</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">font-size</span><span class="o">:</span> <span class="mi">3</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next let’s kill the logo placeholder. I find this things often a bit annoying.</p>

<h5>source/index.html.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hero&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hero-inner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hero-copy&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>MATCHA NERDZ<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>Podcast for green tea connoisseurs<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s all we need really. Since we don’t use the hero logo, let’s get rid of their styles—dead weight.</p>

<h5>source/stylesheets/_hero_banner.scss</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">//.hero-logo img {</span>
</span><span class='line'><span class="c1">//  height: 4em;</span>
</span><span class='line'><span class="c1">//  margin-bottom: 1em;</span>
</span><span class='line'><span class="c1">//}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The generic background image also has to go. I’ll show you fist how I want it to look and explain then how to get there.</p>

<h5>Screenshot</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_06_build/hero-unit-preview.png"></p>

<p>Ignore the typography for now. You can adjust this later. I replaced the image and put a slight gradient on top of it. Since the type is white, I needed a bit more contrast for a better reading experience. If you choose an image that does not need an additional gradient, go for it!</p>

<p>I adjusted the Refills code with a couple of changes. First, I added an image to <code>source/images</code> and saved this image in the variable <code>$hero-image</code>. Then I reused this variable in the <code>background</code> mixin from Bourbon and reorder the image and the <code>linear-gradient</code> (a Bourbon mixin as well). Because the gradient comes first, it is overlayed on top of the <code>Matcha_Nerdz.png</code>.</p>

<h5>source/stylesheets/_hero_banner.scss</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.hero</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$hero-image</span><span class="o">:</span> <span class="s1">&#39;</span><span class="s2">../images/Matcha_Nerdz.png&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$hero-background-top</span><span class="o">:</span> <span class="nf">darken</span><span class="p">(</span><span class="nv">$matcha-green</span><span class="o">,</span> <span class="mi">65</span><span class="kt">%</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$hero-background-bottom</span><span class="o">:</span> <span class="nf">rgba</span><span class="p">(</span><span class="nf">lighten</span><span class="p">(</span><span class="nv">$matcha-green</span><span class="o">,</span> <span class="mi">10</span><span class="kt">%</span><span class="p">)</span><span class="o">,</span> <span class="mf">.3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> background</span><span class="p">(</span><span class="nf">linear-gradient</span><span class="p">(</span><span class="nv">$gradient-angle</span><span class="o">,</span> <span class="nv">$hero-background-bottom</span><span class="o">,</span> <span class="nv">$hero-background-top</span><span class="p">)</span><span class="o">,</span> <span class="sx">url($hero-image)</span><span class="o">,</span> <span class="no">no-repeat</span> <span class="nv">$hero-background-top</span> <span class="no">scroll</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">2</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//background-color: #324766;</span>
</span><span class='line'>  <span class="c1">//background-size: cover;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the gradient itself, I reused our <code>$matcha-green</code> that we stored in <code>source/stylesheets/base/_variables.scss</code>. The top color is darkend by 65 percent with a Sass function the other one is lightened by 10 percent and also made transparent via another Sass function called <code>rgba</code>. We then reuse these variables in our <code>background</code> mixin. The <code>gradient-angle</code> stayed the same. I also added a small margin of <code>2em</code> to push the index list down a bit. The styles I commented out for you are dead weight and so I deleted them.</p>

<p>You can play with such a gradient directly in Photoshop as well of course. Wanted to show you how you can use them in Sass. Below is a screenshot that has no linear gradient added to the hero unit. Up to you what you prefer. As a little exercise, I’ll leave the cleanup of the styles we copied to you. If you find duplications or unused styles, I recommend you fix this before moving on.</p>

<h5>Screenshot</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_06_build/hero-unit-preview-no-gradient.png"></p>

<p>Time for another commit and deploy.</p>

<h5>Shell</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Adds hero unit to index.html.erb</span>
</span><span class='line'><span class="s1">               Adds hero image with gradient</span>
</span><span class='line'><span class="s1">               Adds _hero_banner Sass partial</span>
</span><span class='line'><span class="s1">               Imports Sass partial&#39;</span>
</span><span class='line'>
</span><span class='line'>middleman deploy
</span></code></pre></td></tr></table></div></figure>


<h5>Screenshot</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_06_build/hero-unit-preview-no-grid.png"></p>

<p>Without the visual grid, it doesn’t look you have much work left to adjust this page for your podcasting needs. A few things I’d recommend to do is find a typeface that communicates your project distinctively without being too exotic and adjust the size and spacing of your text so that it fits your hero unit background image. Since this is part of your branding, I suggest you take your time and have some fun!</p>

<h2>Navigation</h2>

<p>It’s a good time to add a navbar. We will also use a pattern from Refills and adapt it for our own needs. I chose the “Centered Navigation” which you will find under “Patterns”. For this one, we need to copy the HTML, SCSS and the CoffeeScript code. I’ll start first by adding the markup to our global <code>layout.erb</code> file</p>

<h3>source/layouts/layout.erb</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;head&gt;</span>
</span><span class='line'><span class="x">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span>
</span><span class='line'><span class="x">    &lt;meta http-equiv=&#39;X-UA-Compatible&#39; content=&#39;IE=edge;chrome=1&#39; /&gt;</span>
</span><span class='line'><span class="x">       &lt;meta content=&quot;IE=edge,chrome=1&quot; http-equiv=&quot;X-UA-Compatible&quot;&gt;</span>
</span><span class='line'><span class="x">    &lt;title&gt;Blog Title</span><span class="cp">&lt;%=</span> <span class="s1">&#39; - &#39;</span> <span class="o">+</span> <span class="n">current_article</span><span class="o">.</span><span class="n">title</span> <span class="k">unless</span> <span class="n">current_article</span><span class="o">.</span><span class="n">nil?</span> <span class="cp">%&gt;</span><span class="x">&lt;/title&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">feed_tag</span> <span class="ss">:atom</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">blog</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">prefix</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">/feed.xml&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Atom Feed&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s2">&quot;all&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span>  <span class="s2">&quot;all&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    &lt;header class=&quot;centered-navigation&quot; role=&quot;banner&quot;&gt;</span>
</span><span class='line'><span class="x">      &lt;div class=&quot;centered-navigation-wrapper&quot;&gt;</span>
</span><span class='line'><span class="x">        &lt;a href=&quot;javascript:void(0)&quot; class=&quot;mobile-logo&quot;&gt;</span>
</span><span class='line'><span class="x">          &lt;img src=&quot;https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/placeholder_logo_3_dark.png&quot; alt=&quot;Logo image&quot;&gt;</span>
</span><span class='line'><span class="x">        &lt;/a&gt;</span>
</span><span class='line'><span class="x">        &lt;a href=&quot;javascript:void(0)&quot; id=&quot;js-centered-navigation-mobile-menu&quot; class=&quot;centered-navigation-mobile-menu&quot;&gt;MENU&lt;/a&gt;</span>
</span><span class='line'><span class="x">        &lt;nav role=&quot;navigation&quot;&gt;</span>
</span><span class='line'><span class="x">          &lt;ul id=&quot;js-centered-navigation-menu&quot; class=&quot;centered-navigation-menu show&quot;&gt;</span>
</span><span class='line'><span class="x">            &lt;li class=&quot;nav-link&quot;&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;Products&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">            &lt;li class=&quot;nav-link&quot;&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;About Us&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">            &lt;li class=&quot;nav-link&quot;&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">            &lt;li class=&quot;nav-link logo&quot;&gt;</span>
</span><span class='line'><span class="x">              &lt;a href=&quot;javascript:void(0)&quot; class=&quot;logo&quot;&gt;</span>
</span><span class='line'><span class="x">                &lt;img src=&quot;https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/placeholder_logo_3_dark.png&quot; alt=&quot;Logo image&quot;&gt;</span>
</span><span class='line'><span class="x">              &lt;/a&gt;</span>
</span><span class='line'><span class="x">            &lt;/li&gt;</span>
</span><span class='line'><span class="x">            &lt;li class=&quot;nav-link&quot;&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;Testimonials&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">            &lt;li class=&quot;nav-link more&quot;&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;More&lt;/a&gt;</span>
</span><span class='line'><span class="x">              &lt;ul class=&quot;submenu&quot;&gt;</span>
</span><span class='line'><span class="x">                &lt;li&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;Submenu Item&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">                &lt;li&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;Another Item&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">                &lt;li class=&quot;more&quot;&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;Item with submenu&lt;/a&gt;</span>
</span><span class='line'><span class="x">                  &lt;ul class=&quot;submenu&quot;&gt;</span>
</span><span class='line'><span class="x">                    &lt;li&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;Sub-submenu Item&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">                    &lt;li&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;Another Item&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">                  &lt;/ul&gt;</span>
</span><span class='line'><span class="x">                &lt;/li&gt;</span>
</span><span class='line'><span class="x">                &lt;li class=&quot;more&quot;&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;Another submenu&lt;/a&gt;</span>
</span><span class='line'><span class="x">                  &lt;ul class=&quot;submenu&quot;&gt;</span>
</span><span class='line'><span class="x">                    &lt;li&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;Sub-submenu&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">                    &lt;li&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;An Item&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">                  &lt;/ul&gt;</span>
</span><span class='line'><span class="x">                &lt;/li&gt;</span>
</span><span class='line'><span class="x">              &lt;/ul&gt;</span>
</span><span class='line'><span class="x">            &lt;/li&gt;</span>
</span><span class='line'><span class="x">            &lt;li class=&quot;nav-link&quot;&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;Sign up&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">          &lt;/ul&gt;</span>
</span><span class='line'><span class="x">        &lt;/nav&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/header&gt;</span>
</span><span class='line'><span class="x">    </span>
</span><span class='line'><span class="x">    &lt;div id=&quot;main&quot; role=&quot;main&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">partial</span> <span class="s2">&quot;partials/footer&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span>
</span><span class='line'><span class="x">  &lt;/body&gt;</span>
</span><span class='line'><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whoa! That’s quite a chunk of code. Are you thinking the same as me? This looks nasty, right? Let’s put this into a partial.</p>

<h5>source/layouts/layout.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">...</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">partial</span> <span class="s2">&quot;partials/navbar&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span>
</span><span class='line'><span class="x">    &lt;div id=&quot;main&quot; role=&quot;main&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">partial</span> <span class="s2">&quot;partials/footer&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span>
</span><span class='line'><span class="x">  &lt;/body&gt;</span>
</span><span class='line'><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>source/partials/_navbar.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;header class=&quot;centered-navigation&quot; role=&quot;banner&quot;&gt;</span>
</span><span class='line'><span class="x">  &lt;div class=&quot;centered-navigation-wrapper&quot;&gt;</span>
</span><span class='line'><span class="x">    &lt;a href=&quot;javascript:void(0)&quot; class=&quot;mobile-logo&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">image_tag</span> <span class="s2">&quot;matcha_nerdz_logo.png&quot;</span><span class="p">,</span> <span class="ss">alt</span><span class="p">:</span> <span class="s2">&quot;Logo image&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/a&gt;</span>
</span><span class='line'><span class="x">    &lt;a href=&quot;javascript:void(0)&quot; id=&quot;js-centered-navigation-mobile-menu&quot; class=&quot;centered-navigation-mobile-menu&quot;&gt;MENU&lt;/a&gt;</span>
</span><span class='line'><span class="x">    &lt;nav role=&quot;navigation&quot;&gt;</span>
</span><span class='line'><span class="x">      &lt;ul id=&quot;js-centered-navigation-menu&quot; class=&quot;centered-navigation-menu show&quot;&gt;</span>
</span><span class='line'><span class="x">        &lt;li class=&quot;nav-link&quot;&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Home&#39;</span><span class="p">,</span> <span class="s1">&#39;/matcha-nerdz&#39;</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">        &lt;li class=&quot;nav-link logo&quot;&gt;</span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;%=</span> <span class="n">image_tag</span> <span class="s2">&quot;matcha_nerdz_logo.png&quot;</span><span class="p">,</span> <span class="ss">alt</span><span class="p">:</span> <span class="s2">&quot;Logo image&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;/li&gt;</span>
</span><span class='line'><span class="x">        &lt;li class=&quot;nav-link&quot;&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;About&#39;</span><span class="p">,</span> <span class="s1">&#39;/pages/about.html&#39;</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">      &lt;/ul&gt;</span>
</span><span class='line'><span class="x">    &lt;/nav&gt;</span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'><span class="x">&lt;/header&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I’ve removed a bunch of stuff that I don’t need and only end up with my logo that I stored in <code>/images</code> and two links for home and about pages. For the two links I used the <code>link_to</code> helper method. It takes two arguments: The string you want users to click on and the location you want to link to. I’m sure people who have played a bit with Rails or Sinatra are familiar with this. Handy, but no big deal. The link for “Home” (/matcha-nerd) will break for your local host but it is working on GitHub Pages where we need the namespace.</p>

<p>The avid reader might also have discovered that our about link links to a simple HTML page that I placed in a new directory named <code>pages</code>. I suggest you put HTML pages like contact, faq or whatever also in this directory. If you put these static pages in there you should have no problems customizing them to your needs. Just have some fun and apply what you’ve learned so far with these pages. From here on you are on your own with these but you now know everything you need. Samo, samo!</p>

<p>A word about the image tags and the asset path on GitHub Pages. I decided to replace the plain <code>img</code> tags for the logo with a Middleman helper called <code>image_tag</code>. It’s not only pretty concise and readable, but also fixes an issue you will run into with the <code>img</code> tag when you build the site and deploy it to GitHub Pages. The url for the asset link on individual articles gets all screwed up and this is the simplest solution to fix that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/images/matcha_nerdz_logo.png&quot;</span> <span class="na">alt=</span><span class="s">&quot;Logo image&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before using <code>image_tag</code>, the url for the logo looked like this: <code>http://your_username.github.io/images/matcha_nerdz_logo-hash_numbers.png</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">image_tag</span> <span class="s2">&quot;matcha_nerdz_logo.png&quot;</span><span class="p">,</span> <span class="ss">alt</span><span class="p">:</span> <span class="s2">&quot;Logo image&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This Middleman helper provided the url with the app name <code>matcha-nerdz</code>—it correctly namespaced the asset and gives GitHub Pages access to this image file (<code>http://your_username.github.io/matcha-nerdz/images/matcha_nerdz_logo-hash_numbers.png</code>).</p>

<p>The styles I copied from Refills are in a new Sass partial of course.</p>

<h5>source/stylesheets/all.sass</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&#39;header_navbar&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>source/stylesheets/_header_navbar.scss</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.centered-navigation</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$base-border-radius</span><span class="o">:</span> <span class="mi">3</span><span class="kt">px</span> <span class="nv">!default</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$dark-gray</span><span class="o">:</span> <span class="mh">#333</span> <span class="nv">!default</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$large-screen</span><span class="o">:</span> <span class="nf">em</span><span class="p">(</span><span class="mi">860</span><span class="p">)</span> <span class="nv">!default</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$base-font-color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$centered-navigation-padding</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$centered-navigation-logo-height</span><span class="o">:</span> <span class="mi">2</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$centered-navigation-background</span><span class="o">:</span> <span class="mh">#E7F1EC</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$centered-navigation-color</span><span class="o">:</span> <span class="nv">$base-font-color</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$centered-navigation-color-hover</span><span class="o">:</span> <span class="nv">$text-color</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$centered-navigation-height</span><span class="o">:</span> <span class="mi">60</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$centered-navigation-item-padding</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$centered-navigation-submenu-padding</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$centered-navigation-item-nudge</span><span class="o">:</span> <span class="mi">2</span><span class="mf">.2</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$horizontal-bar-mode</span><span class="o">:</span> <span class="nv">$large-screen</span><span class="p">;</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nv">$matcha-green</span><span class="p">;</span>
</span><span class='line'>  <span class="na">border-bottom</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nf">darken</span><span class="p">(</span><span class="nv">$matcha-green</span><span class="o">,</span> <span class="mi">5</span><span class="kt">%</span><span class="p">);</span>
</span><span class='line'>  <span class="na">min-height</span><span class="o">:</span> <span class="nv">$centered-navigation-height</span><span class="p">;</span>
</span><span class='line'>  <span class="na">width</span><span class="o">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
</span><span class='line'>  <span class="na">z-index</span><span class="o">:</span> <span class="mi">9999</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Mobile view</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">.mobile-logo</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="p">;</span>
</span><span class='line'>    <span class="na">float</span><span class="o">:</span> <span class="no">left</span><span class="p">;</span>
</span><span class='line'>    <span class="na">max-height</span><span class="o">:</span> <span class="nv">$centered-navigation-height</span><span class="p">;</span>
</span><span class='line'>    <span class="na">padding-left</span><span class="o">:</span> <span class="nv">$centered-navigation-padding</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">img</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">max-height</span><span class="o">:</span> <span class="nv">$centered-navigation-height</span><span class="p">;</span>
</span><span class='line'>      <span class="na">padding</span><span class="o">:</span> <span class="mf">.8</span><span class="kt">em</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> media</span><span class="p">(</span><span class="nv">$horizontal-bar-mode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">display</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">.centered-navigation-mobile-menu</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nv">$centered-navigation-color</span><span class="p">;</span>
</span><span class='line'>    <span class="na">display</span><span class="o">:</span> <span class="no">block</span><span class="p">;</span>
</span><span class='line'>    <span class="na">float</span><span class="o">:</span> <span class="no">right</span><span class="p">;</span>
</span><span class='line'>    <span class="na">line-height</span><span class="o">:</span> <span class="nv">$centered-navigation-height</span><span class="p">;</span>
</span><span class='line'>    <span class="na">margin</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="na">padding-right</span><span class="o">:</span> <span class="nv">$centered-navigation-submenu-padding</span><span class="p">;</span>
</span><span class='line'>    <span class="na">text-decoration</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>    <span class="na">text-transform</span><span class="o">:</span> <span class="no">uppercase</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> media</span> <span class="p">(</span><span class="nv">$horizontal-bar-mode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">display</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">&amp;</span><span class="nd">:focus</span><span class="o">,</span>
</span><span class='line'>    <span class="k">&amp;</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">color</span><span class="o">:</span> <span class="nv">$centered-navigation-color-hover</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Nav menu</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">.centered-navigation-wrapper</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> outer-container</span><span class="p">;</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> clearfix</span><span class="p">;</span>
</span><span class='line'>    <span class="na">position</span><span class="o">:</span> <span class="no">relative</span><span class="p">;</span>
</span><span class='line'>    <span class="na">z-index</span><span class="o">:</span> <span class="mi">999</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">ul</span><span class="nc">.centered-navigation-menu</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">-webkit-transform-style</span><span class="o">:</span> <span class="n">preserve-3d</span><span class="p">;</span> <span class="c1">// stop webkit flicker</span>
</span><span class='line'>    <span class="na">clear</span><span class="o">:</span> <span class="no">both</span><span class="p">;</span>
</span><span class='line'>    <span class="na">display</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>    <span class="na">margin</span><span class="o">:</span> <span class="mi">0</span> <span class="no">auto</span><span class="p">;</span>
</span><span class='line'>    <span class="na">overflow</span><span class="o">:</span> <span class="no">visible</span><span class="p">;</span>
</span><span class='line'>    <span class="na">padding</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="na">width</span><span class="o">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
</span><span class='line'>    <span class="na">z-index</span><span class="o">:</span> <span class="mi">99999</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">&amp;</span><span class="nc">.show</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">display</span><span class="o">:</span> <span class="no">block</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> media</span> <span class="p">(</span><span class="nv">$horizontal-bar-mode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">display</span><span class="o">:</span> <span class="no">block</span><span class="p">;</span>
</span><span class='line'>      <span class="na">text-align</span><span class="o">:</span> <span class="no">center</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The nav items</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">.nav-link</span><span class="nd">:first-child</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> media</span><span class="p">(</span><span class="nv">$horizontal-bar-mode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">margin-left</span><span class="o">:</span> <span class="nv">$centered-navigation-item-nudge</span><span class="p">;</span>
</span><span class='line'>      <span class="na">padding-right</span><span class="o">:</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">ul</span> <span class="nt">li</span><span class="nc">.nav-link</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">background</span><span class="o">:</span> <span class="nf">lighten</span><span class="p">(</span><span class="nv">$matcha-green</span><span class="o">,</span> <span class="mi">8</span><span class="kt">%</span><span class="p">);</span>
</span><span class='line'>    <span class="na">display</span><span class="o">:</span> <span class="no">block</span><span class="p">;</span>
</span><span class='line'>    <span class="na">line-height</span><span class="o">:</span> <span class="nv">$centered-navigation-height</span><span class="p">;</span>
</span><span class='line'>    <span class="na">overflow</span><span class="o">:</span> <span class="no">hidden</span><span class="p">;</span>
</span><span class='line'>    <span class="na">padding-right</span><span class="o">:</span> <span class="nv">$centered-navigation-submenu-padding</span><span class="p">;</span>
</span><span class='line'>    <span class="na">text-align</span><span class="o">:</span> <span class="no">right</span><span class="p">;</span>
</span><span class='line'>    <span class="na">width</span><span class="o">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
</span><span class='line'>    <span class="na">z-index</span><span class="o">:</span> <span class="mi">9999</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">color</span><span class="o">:</span> <span class="nv">$centered-navigation-color</span><span class="p">;</span>
</span><span class='line'>      <span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="o">-</span><span class="no">block</span><span class="p">;</span>
</span><span class='line'>      <span class="na">outline</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>      <span class="na">text-decoration</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">&amp;</span><span class="nd">:focus</span><span class="o">,</span>
</span><span class='line'>      <span class="k">&amp;</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>        <span class="na">color</span><span class="o">:</span> <span class="nv">$centered-navigation-color-hover</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> media</span><span class="p">(</span><span class="nv">$horizontal-bar-mode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">background</span><span class="o">:</span> <span class="no">transparent</span><span class="p">;</span>
</span><span class='line'>      <span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="p">;</span>
</span><span class='line'>      <span class="na">line-height</span><span class="o">:</span> <span class="nv">$centered-navigation-height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>        <span class="na">padding-right</span><span class="o">:</span> <span class="nv">$centered-navigation-item-padding</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">li</span><span class="nc">.logo.nav-link</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">display</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>    <span class="na">line-height</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> media</span><span class="p">(</span><span class="nv">$large-screen</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">.logo</span> <span class="nt">img</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">margin-bottom</span><span class="o">:</span> <span class="o">-</span><span class="nv">$centered-navigation-logo-height</span> <span class="o">/</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="na">max-height</span><span class="o">:</span> <span class="nv">$centered-navigation-logo-height</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I put the CoffeeScript code from Refills into <code>all.coffee</code>. As soon as I had to add more code than that, I’d put it into its own designated place.</p>

<h5>source/javascripts/all.coffee</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require jquery</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">menuToggle</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#js-centered-navigation-mobile-menu&#39;</span><span class="p">).</span><span class="nx">unbind</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#js-centered-navigation-menu&#39;</span><span class="p">).</span><span class="nx">removeClass</span> <span class="s1">&#39;show&#39;</span>
</span><span class='line'>  <span class="nx">menuToggle</span><span class="p">.</span><span class="nx">on</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#js-centered-navigation-menu&#39;</span><span class="p">).</span><span class="nx">slideToggle</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#js-centered-navigation-menu&#39;</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="s1">&#39;:hidden&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#js-centered-navigation-menu&#39;</span><span class="p">).</span><span class="nx">removeAttr</span> <span class="s1">&#39;style&#39;</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<p>This snippet is responsible for toggling the menu for smaller screens.</p>

<h5>Screenshot Toggle Menu</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_06_build/coffeescript-menu-toggle.png"></p>

<p>Because I deleted a bunch of stuff I didn’t need from the navbar markup—like the submenu—I was able to get rid of a significant chunk of the relevant styles in this file. Since I don’t know if you need a more elaborate navbar and wanna take the code right from these examples, I suggest you copy the original code if you have bigger plans for the navbar. Play with the Sass to fit your style, remove dead code and duplications. I simply adjusted the background color and link colors, played with the transparency of the logo, changed the border and moved on. Have fun and go crazy if you like. I just wanted to use a super simple navbar with the brand color and a centered logo. Turned out pretty good for this little work I’d say.</p>

<h5>Screenshot Index Page</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_06_build/navbar-screenshot.png"></p>

<h5>Screenshot Detail Page</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_06_build/detail-page-with-navbar.png"></p>

<p>Time to package this into a git commit and for deploying the site.</p>

<h5>Shell</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Implements a header with navbar</span>
</span><span class='line'><span class="s1">               Adds header partial to layout</span>
</span><span class='line'><span class="s1">               Takes care of deployed asset url for logo</span>
</span><span class='line'><span class="s1">               Imports Sass partial for navbar</span>
</span><span class='line'><span class="s1">               Adds logo</span>
</span><span class='line'><span class="s1">               Adds CoffeeScript code</span>
</span><span class='line'><span class="s1">               Adjusts Refills styles</span>
</span><span class='line'><span class="s1">               Adjusts Refills markup&#39;</span>
</span><span class='line'>
</span><span class='line'>middleman deploy
</span></code></pre></td></tr></table></div></figure>


<h2>Title</h2>

<p>The next change is just a small one, just a touch really. We need to update the title tag in our layout.</p>

<h5>source/layouts/layout.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;title&gt;Matcha Nerdz</span><span class="cp">&lt;%=</span> <span class="s1">&#39; - &#39;</span> <span class="o">+</span> <span class="n">current_article</span><span class="o">.</span><span class="n">title</span> <span class="k">unless</span> <span class="n">current_article</span><span class="o">.</span><span class="n">nil?</span> <span class="cp">%&gt;</span><span class="x">&lt;/title&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us a dynamic title that always starts with our site’s name and attaches the article’s title if available.</p>

<h5>Shell</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Adjusts site’s title&#39;</span>
</span><span class='line'>
</span><span class='line'>middleman deploy
</span></code></pre></td></tr></table></div></figure>


<h2>Pagination</h2>

<p>When you look at the bottom of the index list of articles you’ll see something essential missing—navigating our list of posts.</p>

<h5>Screenshot</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_06_build/index-list-no-pagination.png"></p>

<p>I’m not a fan of overly clever pagination links—bulky ones are also not winning any awards with me. Let’s keep it simple and provide two links for next and previous pages. Middleman makes this incredibly convenient. We just need to adjust our <code>config.rb</code> and tell the frontmatter of our index page to fine tune it.</p>

<h5>config.rb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">blog</span><span class="o">.</span><span class="n">paginate</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>First uncomment the line above. After that you just tell the index page how many articles you want to see. I think 10 posts per page are enough.</p>

<h5>source/index.html.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">---</span>
</span><span class='line'>
</span><span class='line'><span class="x">per_page: 10</span>
</span><span class='line'><span class="x">pageable: true</span>
</span><span class='line'>
</span><span class='line'><span class="x">---</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final step before we apply some styling is to place both links conveniently at the bottom of the list. First we need to get rid of these lines of code below that I commented out. They were placed at the very top of your index page.</p>

<h5>source/index.html.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--</span>
</span><span class='line'><span class="c">&lt;% if paginate &amp;&amp; num_pages &gt; 1 %&gt;</span>
</span><span class='line'><span class="c">  &lt;p&gt;Page &lt;%= page_number %&gt; of &lt;%= num_pages %&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">  &lt;% if prev_page %&gt;</span>
</span><span class='line'><span class="c">    &lt;p&gt;&lt;%= link_to &#39;Previous page&#39;, prev_page %&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="c">  &lt;% end %&gt;</span>
</span><span class='line'><span class="c">&lt;% end %&gt;</span>
</span><span class='line'><span class="c">--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then place this at the very bottom of this page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">paginate</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">prev_page</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;p class=&#39;pagination-link&#39;&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;&lt;&lt; Previous page&#39;</span><span class="p">,</span> <span class="n">prev_page</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">next_page</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;p class=&#39;pagination-link&#39;&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Next page &gt;&gt;&#39;</span><span class="p">,</span> <span class="n">next_page</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us the navigational links we need side by side and supplies us with a class to tweak a few things. I decided to go with a partial for the Sass code because it didn’t fit either in the footer nor the index post styles—plus it deserves a partial of its own, especially should it grow more in size.</p>

<h5>source/stylesheets/all.sass</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&#39;pagination&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>source/stylesheets/_pagination.sass</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.pagination-link</span>
</span><span class='line'>  <span class="nd">+shift</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">4</span><span class="kt">em</span>
</span><span class='line'>  <span class="k">&amp;</span><span class="nd">:first-of-type</span>
</span><span class='line'>    <span class="na">float</span><span class="o">:</span> <span class="no">left</span>
</span><span class='line'>    <span class="na">margin-right</span><span class="o">:</span> <span class="mi">4</span><span class="kt">em</span>
</span><span class='line'>  <span class="nt">a</span>
</span><span class='line'>    <span class="nd">+transition</span><span class="p">(</span><span class="no">color</span> <span class="mi">0</span><span class="mf">.25</span><span class="kt">s</span> <span class="n">ease-in-out</span><span class="p">)</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color</span>
</span><span class='line'>    <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.1</span><span class="kt">em</span>
</span><span class='line'>    <span class="k">&amp;</span><span class="nd">:hover</span>
</span><span class='line'>      <span class="na">color</span><span class="o">:</span> <span class="nv">$matcha-green</span>
</span></code></pre></td></tr></table></div></figure>


<p>It’s nothing tricky I think. We shift the links a bit to the right, arrange them to float next to each other—default would be block behaviour being stacked on top of each other—and apply a little transitional effect when the user hovers over the link. That’s all we need right now. Let’s have a look.</p>

<h5>Screenshot: Next Page</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_06_build/index-pagination-next.png"></p>

<h5>Screenshot: Previous Page / Next Page</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_06_build/index-pagination-next-previous.png"></p>

<p>Alrighty, time for another commit.</p>

<h5>Shell</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add -all
</span><span class='line'>git commit -m <span class="s1">&#39;Adds Pagination to index list of posts</span>
</span><span class='line'><span class="s1">               Adjusts config.rb</span>
</span><span class='line'><span class="s1">               Adjusts markup on index page</span>
</span><span class='line'><span class="s1">               Adds styles in _pagination Sass partial&#39;</span>
</span><span class='line'>
</span><span class='line'>middleman deploy
</span></code></pre></td></tr></table></div></figure>


<h2>Final Thoughts</h2>

<p>I guess that should suffice for version 01—also, I ran out of space a little over the last six articles. As a next step, you should play with media queries to make the layout responsive to various screen sizes. The typography could need some serious love as well. Pick a typface or two that best goes with the theme of your podcast—just don’t forget to keep it super readable. Also, should you decide to do a podcast for real, I can only congratulate you. It’s a great way to learn from experts and also to increase your network significantly. Doing something of value for the community is always a good idea and tends to pay off big time. One last tip, try to learn by doing and experiement as much as you can! Reading alone just doesn’t cut it—been there, done that! If you like to share the lessions learned by writing about it, you will deepen your understanding of the topic even more. Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Middleman Basics 05-Podcast Site (Part 03)]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/12/28/Middleman-Basics-05-Podcast-03/"/>
    <updated>2015-12-28T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/12/28/Middleman-Basics-05-Podcast-03</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_03_build/Middleman_Bourbon_Banner.png"></p>

<h3>Topics</h3>

<ul>
<li>Posts Detail Page</li>
<li>Style Duplications</li>
<li>Relative Links</li>
<li>Index List Player</li>
<li>Why SoundCloud? (Optional)</li>
</ul>


<h2>Posts Detail Page</h2>

<p>I think we should shift our attention and give our details page a little bit of basic love before we adjust the app to display our podcast episodes. We are not entirely done with the index page, if we have some room left in this tutorial I’ll probably add a couple of media queries to deal with different screen resolutions. For now I’d say let’s move on though. What’s the status quo?</p>

<h5>Screenshot</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_05_build/detail_page_initial_state.png"></p>

<p>Yikes, doesn’t look too good! Our text is all over the place. Let’s fix that one first. Think it’s a good idea to activate the visual grid again.</p>

<h5>source/stylesheets/base/_grid-settings.scss</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nv">$visual-grid</span><span class="o">:</span> <span class="n-Pseudo">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to create a separate layout for our detail pages of our posts. The layout will be flexible so that you can use them for pure blog posts and for posting podcast episodes as well—a little conditional will help us out with that. More on that later though. Let’s open <code>config.rb</code> and add this line.</p>

<h5>config.rb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">activate</span> <span class="ss">:blog</span> <span class="k">do</span> <span class="o">|</span><span class="n">blog</span><span class="o">|</span>
</span><span class='line'>  <span class="n">blog</span><span class="o">.</span><span class="n">layout</span> <span class="o">=</span> <span class="s2">&quot;layouts/blog-layout&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will tell Middleman that we have a separate layout for detail pages and that it can be found in <code>layouts/blog-layout</code>. Next we need to create <code>layouts/blog-layout.erb</code>. Remember that the <code>.erb</code> is necessary without the <code>.html</code> extension to make this work properly.</p>

<h5>layouts/blog-layout.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="n">wrap_layout</span> <span class="ss">:layout</span> <span class="k">do</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;article class=&#39;article-detail&#39;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    &lt;h2 class=&#39;detail-post-title&#39;&gt;</span><span class="cp">&lt;%=</span> <span class="n">current_article</span><span class="o">.</span><span class="n">title</span> <span class="cp">%&gt;</span><span class="x">&lt;/h2&gt;</span>
</span><span class='line'><span class="x">    &lt;h3 class=&#39;detail-post-date&#39;&gt;</span><span class="cp">&lt;%=</span> <span class="n">current_article</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%b %e&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/h3&gt;</span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">current_page</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">soundcloud_id</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;section class=&#39;soundclould-player-big&#39;&gt;</span>
</span><span class='line'><span class="x">        &lt;iframe </span>
</span><span class='line'><span class="x">          width=&quot;100%&quot; </span>
</span><span class='line'><span class="x">          height=&quot;450&quot; </span>
</span><span class='line'><span class="x">          scrolling=&quot;no&quot; </span>
</span><span class='line'><span class="x">          frameborder=&quot;no&quot; </span>
</span><span class='line'><span class="x">          src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/</span><span class="cp">&lt;%=</span> <span class="n">current_page</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">soundcloud_id</span> <span class="cp">%&gt;</span><span class="x">&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;</span>
</span><span class='line'><span class="x">        &lt;/iframe&gt;</span>
</span><span class='line'><span class="x">      &lt;/section&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">current_article</span><span class="o">.</span><span class="n">body</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">  &lt;/article&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>So let’s talk about what’s going on here. First of all, we need to wrap this <code>blog-layout</code> inside our general <code>layout</code>. Or, put differently, we wrap our application layout around the blog-layout.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="n">wrap_layout</span> <span class="ss">:layout</span> <span class="k">do</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  ...</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Why? Simply because we want to reuse a lot of the stuff from the original layout and not duplicate things like the <code>footer</code> partial or the asset links in <code>head</code>. I’m sure newbies will wrap their head around this quickly. Just give it a minute or two to sink in if this looks weird to you at first. The layout we used previously was more of a global thing. Now we need a bit more specificity to fit our needs.</p>

<p>Inside the <code>article</code> tag container, we manually build what we need to template our post. It has a title, a date, an optional SoundCloud embedded widget and of course the article body itself. Inside our layouts, we have access to each individual <code>BlogArticle</code>. We can use <code>current_article</code> to get the info for each article to build up our custom template. <code>title</code>, <code>date</code> and <code>body</code> are just methods to extract the attributes from the individual article. We also used <code>strftime</code> to format the date like we did previously on the index page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">current_article</span><span class="o">.</span><span class="n">title</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">current_article</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%b %e&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">current_article</span><span class="o">.</span><span class="n">body</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>As already mentioned, a simple conditional is in charge of handling data that’s provided optionally for each individual post via its frontmatter—which is delimited by three dashes. Here we are looking out if the page has an id of a SoundCloud track and display the widget if so.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">current_page</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">soundcloud_id</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  ...</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>In case you need a refresher, we get access to the data via the <code>current_page</code> object and ask its <code>data</code> for the value we stored in the frontmatter via its key. In our example, the key we need is <code>soundcloud_id</code>. If our template finds this key via the conditional, it displays the widget and interpolates the SoundCloud id for that track to find the right one. If it’s just a plain blog post, we don’t need to provide the <code>soundcloud_id</code> in the frontmatter and the SoundCloud widget won’t get embedded. Doesn’t get any more simple than that.</p>

<h5>Example frontmatter for a podcast post with a SoundCloud widget</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">---                                                                                                                                 </span>
</span><span class='line'><span class="x">title: My super awesome eleventh long assed titled post that breaks into another line                                               </span>
</span><span class='line'><span class="x">date: 2015-11-30 22:14 UTC                                                                                                          </span>
</span><span class='line'><span class="x">soundcloud_id: 138095821                                                                                                            </span>
</span><span class='line'><span class="x">tags:                                                                                                                               </span>
</span><span class='line'><span class="x">---                                                                                                                                 </span>
</span><span class='line'><span class="x">Your awesome podcast episode description …</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">lorem</span><span class="o">.</span><span class="n">sentences</span> <span class="mi">10</span> <span class="cp">%&gt;</span><span class="x"> </span>
</span><span class='line'>
</span><span class='line'><span class="x">– Question #01</span>
</span><span class='line'>
</span><span class='line'><span class="x">– Question #02</span>
</span><span class='line'>
</span><span class='line'><span class="x">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you click on “share” on any of the SoundCloud tracks, you get the option to embed an <code>iframe</code> for that track and just need to copy paste it somewhere in your code. We use this iframe as a basis and use the id for the track we need to interpolate it into the url. There are two options, a big and a small widget—I chose the big one. The other has the advantage of being a bit more customizeable—you can adjust the color for the play button for example. Up to you…</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;section class=&#39;soundclould-player-big&#39;&gt;</span>
</span><span class='line'><span class="x">  &lt;iframe </span>
</span><span class='line'><span class="x">    width=&quot;100%&quot; </span>
</span><span class='line'><span class="x">    height=&quot;450&quot; </span>
</span><span class='line'><span class="x">    scrolling=&quot;no&quot; </span>
</span><span class='line'><span class="x">    frameborder=&quot;no&quot; </span>
</span><span class='line'><span class="x">    src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/</span><span class="cp">&lt;%=</span> <span class="n">current_page</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">soundcloud_id</span> <span class="cp">%&gt;</span><span class="x">&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;</span>
</span><span class='line'><span class="x">  &lt;/iframe&gt;</span>
</span><span class='line'><span class="x">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The magic happens at this part.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">...api.soundcloud.com/tracks/</span><span class="cp">&lt;%=</span> <span class="n">current_page</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">soundcloud_id</span> <span class="cp">%&gt;</span><span class="x">&amp;amp;auto_play=...</span>
</span></code></pre></td></tr></table></div></figure>


<p>After we asked if this data is available to us via the conditional, we use the fronmatter data to inject the id to display the track we want. Pretty neat and as straightforward as it gets. Let’s have another look how things turned out so far:</p>

<h5>Screenshot</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_05_build/detail_page_widget_no_styles.png"></p>

<p>Makes you wanna throw up huh? Me too. Maybe not if you just arrived from the 90s via a time machine—didn’t think so. On the bright side, we have all the structure and data we need. And see, because we nested the <code>blog-layout</code> inside the <code>layout</code> layout, we get the benefit of having the footer already there at the bottom. No need to duplicate things—cool! With just a little bit of styling, we might turn things around and make this look a bit more decent.</p>

<h5>source/stylesheets/all.sass</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&#39;posts_detail&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>source/stylesheets/_posts_detail.sass</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nn">#main</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>
</span><span class='line'><span class="nt">article</span><span class="nc">.article-detail</span>
</span><span class='line'>  <span class="nd">+shift</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.detail-post-title</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nv">$matcha-green</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.7</span><span class="kt">em</span>
</span><span class='line'>  <span class="na">margin-top</span><span class="o">:</span> <span class="mi">40</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.detail-post-date</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.1</span><span class="kt">em</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.article-detail</span> <span class="nt">p</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.05</span><span class="kt">em</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">4</span><span class="kt">em</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color</span>
</span><span class='line'>  <span class="na">line-height</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.35</span><span class="kt">em</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.soundclould-player-big</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">50</span><span class="kt">px</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s have another quick peak.</p>

<h5>Screenshot</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_05_build/detail_page_widget_with_styles.png"></p>

<p>Well, it’s getting there. Let’s commit for now, and do some housekeeping after that.</p>

<h5>Shell</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;1st attempt at post detail page w/ podcast option</span>
</span><span class='line'><span class="s1">               Adds blog-layout</span>
</span><span class='line'><span class="s1">               Adjusts config for blog-layout</span>
</span><span class='line'><span class="s1">               Adds styles for detail page</span>
</span><span class='line'><span class="s1">               Adds Sass partial</span>
</span><span class='line'><span class="s1">               Imports Sass partial</span>
</span><span class='line'><span class="s1">               Updates blog post’s frontmatter&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Style Duplications</h2>

<p>The avid reader might have already spotted what we should clean up next. There is a bit of duplication in <code>_posts_detail.sass</code> and <code>_index_posts.sass</code>. I’d like to extract the duplicated styles into a separate Sass file called <code>_blog_post_extractions.sass</code>. I’m experimenting with this technique lately—an idea that I got from Object Oriented Programming. Things like BEM or SMACSS can be great, especially for bigger projects with bigger teams if they have settled for following conventions, but for smaller projects I’m always looking for frictionless, dead simple solutions. I’ll give this a try until the next new shiny thing convinces me of a better approach.</p>

<h5>source/stylesheets/all.sass</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&#39;bourbon&#39;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;base/base&#39;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;neat&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;blog_post_extractions&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;footer&#39;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;index_posts&#39;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;posts_detail&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>source/stylesheets/_blog_post_extractions.sass</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nn">#main</span><span class="o">,</span> <span class="nc">.posts</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.posts</span> <span class="nt">p</span><span class="o">,</span> <span class="nc">.post-title</span><span class="o">,</span> <span class="nt">article</span><span class="nc">.article-detail</span>
</span><span class='line'>  <span class="nd">+shift</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.post-title</span> <span class="nt">a</span><span class="o">,</span> <span class="nc">.detail-post-title</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nv">$matcha-green</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.post-title</span><span class="o">,</span> <span class="nc">.detail-post-title</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.7</span><span class="kt">em</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.posts</span> <span class="nt">p</span><span class="o">,</span> <span class="nc">.article-detail</span> <span class="nt">p</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.05</span><span class="kt">em</span>
</span><span class='line'>  <span class="na">line-height</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.35</span><span class="kt">em</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.posts</span> <span class="nt">p</span><span class="o">,</span> <span class="nc">.article-detail</span> <span class="nt">p</span><span class="o">,</span> <span class="nc">.detail-post-date</span><span class="o">,</span> <span class="nc">.post-date</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.posts</span> <span class="nt">p</span><span class="o">,</span> <span class="nc">.article-detail</span> <span class="nt">p</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">4</span><span class="kt">em</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you compare the above with the original files, you can see that we got rid of a nice chunk of duplication. It is also easy to understand and find because I import such extracted files right on top in <code>all.sass</code>. It’s easy to spot these extractions for people new to the code base. In this case, I use these files to collect extracted styles that apply to blog posts. A similar approach could work for duplications across different appearances of sidebars, devices or similar—there should be a common thread though.</p>

<h5>source/stylesheets/_index_posts.sass</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.post-title</span>
</span><span class='line'>  <span class="nt">a</span>
</span><span class='line'>    <span class="nd">+transition</span><span class="p">(</span><span class="no">color</span> <span class="mf">.4</span><span class="kt">s</span> <span class="n">ease-in-out</span><span class="p">)</span>
</span><span class='line'>    <span class="k">&amp;</span><span class="nd">:hover</span>
</span><span class='line'>      <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.post-date</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.7</span><span class="kt">em</span>
</span><span class='line'>  <span class="na">margin</span><span class="o">:</span>
</span><span class='line'>    <span class="na">left</span><span class="o">:</span> <span class="nf">em</span><span class="p">(</span><span class="mi">-80</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>    <span class="na">right</span><span class="o">:</span> <span class="nf">em</span><span class="p">(</span><span class="mi">20</span><span class="kt">px</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5>source/stylesheets/_posts_detail.sass</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.detail-post-title</span>
</span><span class='line'>  <span class="na">margin-top</span><span class="o">:</span> <span class="mi">40</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.detail-post-date</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.1</span><span class="kt">em</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.soundclould-player-big</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">50</span><span class="kt">px</span>
</span></code></pre></td></tr></table></div></figure>


<p>The previous files are now a lot smaller, nice and tidy—exactly how I like them. Files are cheap so I don’t care if I have lots of them that all do their specific little job. A separation of concerns kinda thing. It’s not a perfect solution, but it’s so dead simple for small stuff that I like experimenting more with that approach. I’m not sure how much scaleable this is though. For a small podcast site it should be O.K. though I feel.</p>

<p>Over time, one of my favorite parts of working with any code is sitting down to find duplication and erradicate it as much as possible. Not only in OOP, any form of duplication is enemy number one in killing projects—or in nastyfying them over time at least. I encourage you to learn all kinds of approaches to deal with that and also—even more importantly— to find your own strategies that work best for you and your team. This part of frontend development is a lot less guarded by programming principles, design patterns and so forth and therefore a lot more “Alice in Wonderland wandering down rabbit holes”-like and since a lot of people are cooking their own secret sauce, it can leave new team members or colleagues tripping out of their minds. Anyway…</p>

<p>We should also comment out our visual grid in <code>source/stylesheets/base/_grid-settings.scss</code> and see how it looks:</p>

<h5>Screenshot</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_05_build/detail_page_widget_with_styles-no-grid.png"></p>

<p>Same as before but with much cleaner styles. Me likey! Time to commit and for deploying our changes.</p>

<h5>Shell</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Extracts styles into _blog_post_extractions</span>
</span><span class='line'><span class="s1">               Extracts duplications from</span>
</span><span class='line'><span class="s1">                 _index_posts.sass</span>
</span><span class='line'><span class="s1">                 _posts_detail.sass</span>
</span><span class='line'><span class="s1">               Imports styles&#39;</span>
</span><span class='line'>
</span><span class='line'>middleman deploy
</span></code></pre></td></tr></table></div></figure>


<p>Let’s go to our GitHub Pages page and check if everything works as expected. Ups! On the first glance it looks fine, but if we try to go to the detail page from index, we get a <code>404</code> error message. GitHub can’t find what we need.</p>

<h5>Screenshot</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_05_build/404.png"></p>

<h2>Relative Links</h2>

<p>If you have looked closely, you might have seen that we are missing some info in our url. Now it says something like <code>http://your_username.github.io/2015/11/30/my-super-awesome-post.html</code>. What it should say is something like <code>http://your_username.github.io/matcha-nerdz/2015/11/30/my-super-awesome-post.html</code>. The <code>matcha-nerdz</code> part was completely missing. Don’t worry, this is an easy fix though. We need to activate relative links in our config file.</p>

<h5>config.rb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:relative_links</span><span class="p">,</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having absolute links on GitHub Pages will point in the wrong direction. With this little change, your links are namespaced relative to your app’s root. As you can see from this little example, deploying early and often is nice to catch things like that. Finding these things out of context when you are already working on something completely different and you have to dig deep where bugs might come from can mess with your flow tremendously.</p>

<h5>Shell</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git commit --all
</span><span class='line'>git commit -m <span class="s1">&#39;Set relative_links in config.rb&#39;</span>
</span><span class='line'>
</span><span class='line'>middleman deploy
</span></code></pre></td></tr></table></div></figure>


<p>Everything should work fine now. The typography is not perfect yet but I’d like to move on and you can fine tune these things once the site is set up the way we need it. Let’s have a look:</p>

<h5>Screenshot</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_05_build/index-list-long-no-podcast.png"></p>

<h2>Index List Player</h2>

<p>As you can see, were are missing the audio widget and the length of the displayed post is not ideal for an index list. Let’s fix that next. I want to use the smaller SoundCloud player to display the podcast episode in the index list. Therefore it does not make sense to extract a partial for the player for both the index and the detail page—each page needs their own widget. If you like to use only one of the players for both layouts you should definitely extract a partial for it. I’ll leave that step to you since you already learned how this is done.</p>

<h5>source/index.html.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">...</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;div class=&#39;posts&#39;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="n">page_articles</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;h2 class=&#39;post-title&#39;&gt;&lt;span class=&#39;post-date&#39;&gt;</span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%b %e&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/span&gt; </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">article</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="n">article</span> <span class="cp">%&gt;</span><span class="x">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">article</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">soundcloud_id</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;section class=&#39;soundclould-player-small&#39;&gt;  </span>
</span><span class='line'><span class="x">      &lt;iframe </span>
</span><span class='line'><span class="x">        width=&quot;100%&quot;</span>
</span><span class='line'><span class="x">        height=&quot;166&quot; </span>
</span><span class='line'><span class="x">        scrolling=&quot;no&quot; </span>
</span><span class='line'><span class="x">        frameborder=&quot;no&quot; </span>
</span><span class='line'><span class="x">        src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/</span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">soundcloud_id</span> <span class="cp">%&gt;</span><span class="x">&amp;amp;color=ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&quot;&gt;&lt;/iframe&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/section&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="o">.</span><span class="n">body</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code example is focused on the section where we iterate over <code>page_articles</code>. I added a conditional that only displays the audio widget if the article has a <code>sound_cloud_id</code> in the frontmatter of the article—which we access via its data attribute. It’s very similar to the way we solved this previously. In this case we used the block parameter <code>article</code> to access the info we need.</p>

<h5>Screenshot</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_05_build/index-list-long-with-small-podcast.png"></p>

<p>Next I wanna shorten the displayed text as well before we apply a few styles. In the index list, we only want to see something like a 300 character summary—not too much but definitely also not too little text. Experiment on your own and see what works best for your needs.</p>

<p>First we need to add the gem <code>Nokogiri</code> to our <code>Gemfile</code>, bundle it and adjust <code>source/index.html.erb</code> a bit.</p>

<h5>Gemfile</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Shell</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>In index we need to change only one line. I left a comment for what needs to be replaced. We use the summary method and supply it with the number of characters we want to see per article in the index list.</p>

<h5>source/index.html.erb</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%#</span><span class="c"> article.body </span><span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">article</span><span class="o">.</span><span class="n">summary</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h5>source/stylesheets/_index_posts.sass</h5>

<p>And we should add the styles for the small SC player on <code>.soundcloud-player-small</code> to our extracted file.</p>

<h5>source/stylesheets/_blog_post_extractions.sass</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.posts</span> <span class="nt">p</span><span class="o">,</span> <span class="nc">.post-title</span><span class="o">,</span> <span class="nt">article</span><span class="nc">.article-detail</span><span class="o">,</span> <span class="nc">.soundclould-player-small</span>
</span><span class='line'>  <span class="nd">+shift</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nudge the spacing a bit and we’re dont.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.soundclould-player-small</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Screenshot</h5>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_05_build/index-list-long-with-small-podcast-summary.png"></p>

<p>Alright, getting there. Now we have an index list that displays both text-only and podcast episode articles—uncomplicated, without any fuzz. If you have a bit better dummy text, this should look quite decent by now. Let’s commit!</p>

<h5>Shell</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Adds Article Summary &amp; Small Widget to Index</span>
</span><span class='line'><span class="s1">               Adds styles for index list SC widget</span>
</span><span class='line'><span class="s1">               Adds Nokogiri</span>
</span><span class='line'><span class="s1">               Adds optional SC widget to index</span>
</span><span class='line'><span class="s1">               Adds 300 character summary&#39;</span>
</span><span class='line'>
</span><span class='line'>middleman deploy
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Break</h2>

<p>I think you earned yourself a cool beverage at this point and we can leave it at that for now. In the next and final article we’ll tweak it a bit further and also add a little something for navigating the site.</p>

<h2>Why SoundCloud? (Optional)</h2>

<p>“Why host the podcast on SoundCloud?”, you might ask. Well, my reasoning was simple: First of all, it will quite certainly be around for a long time—something that you can’t necessarily expect from a lot of projects that offer to host your podcast audio files. I don’t wanna get myself in the situation of dealing with migrating tons of already published audio tracks to another service just because someone got acquihired or went bust. Second, it’s dead cheap to host a ton of tracks and they even have a free option for folks who publish tracks only occasionally. The player and its options are alright too—hadn’t any reason to complain about speed or anything so far. The stats are useful as well and there are already people on the platform who are into podcasts and stuff—which is good for the discovery factor. Don’t get me wrong, there are plenty of reasons why I wanted to hug somebody gently around the neck when dealing with uploading and silly UX things, but compared to the downsides of bigger headaches with other hosting options, SoundCloud seemed like the most reasonable choice overall. Lastly, I don’t like the custom sites these podcast sites offer. They look super generic and I like to build my own stuff that fits my needs and let’s me also create my own visual identity. This is just my own personal opinion and I’m not affiliated to SC in any way—atm at least. Don’t plan on changing that also.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AntiPatterns Basics—Rails Models]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/12/13/AntiPatterns-Basics-Rails-Models/"/>
    <updated>2015-12-13T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/12/13/AntiPatterns-Basics-Rails-Models</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/AntiPatterns/Models/wheelchair-construction-fail.jpg"></p>

<h3>Heads Up</h3>

<p>Anti- what? It probably sounds a lot more complicated than it is. Over the last couple of decades, programmers were able to identify a useful selection of “design” patterns that frequently occurred throughout their code solutions. While solving similar problems, they were able to “classify” solutions that prevented them from reinventing the wheel all the time. It’s important to note that these patterns should be seen more as discoveries than the inventions of a group of advanced developers. If this is rather new to you and you see yourself as being more on the beginner side of all things Ruby / Rails, then this one is exactly written for you. I think it’s best if you think of it as a quick skinny-dip into a much deeper topic whose mastery will not happen overnight.Nevertheless, I strongly believe that starting to get into this early will benefit beginners and their mentors tremendously.</p>

<p>AntiPatterns—as the name implies—on the other hand represent pretty much the opposite. They are discoveries of solutions to problems that you should definitely avoid. They often represent the work of inexperienced coders who don’t know what they don’t know yet. Worse, it could be the output of a lazy person who just ignores best practices and tools frameworks provide for no good reason—or they think they don’t. What they might hope to gain in time savings in the beginning by hammering out quick, lazy or dirty solutions is gonna haunt them or some sorry successor later in the project’s life cycle. Do not underestimate the implications or these bad decisions, they’re gonna plague you like a curse—no matter what.</p>

<h3>Topics</h3>

<ul>
<li>Fat Models</li>
<li>Missing Test Suite</li>
<li>Voyeuristic Models</li>
<li>Law of Demeter</li>
<li><p>Spaghetti SQL</p></li>
<li><h3>Fat Models</h3></li>
</ul>


<p>I’m sure you have heard the “Fat models, skinny controllers” sing-song tons of times when you first started out with Rails. OK, now forget that! Sure, the business logic needs to be solved in the model layer but you shouldn’t feel inclined to stuff everything in there senselessly just to avoid crossing the lines into controller territory. Here’s a new target you should aim for: “Skinny models, skinny controllers”. You might ask, “well, how should we arrange code to achieve that—after all it’s a zero-sum game?” Good point! The name of the game is composition and Ruby is well equipped to give you lots of options to avoid model obesity.</p>

<p>In most (Rails) web applications that are database backed, the majority of your attention and work will be centered around the model layer—given that you work with compentent designers who are able to implement their own stuff in the view I mean. Inherently your models will have more “gravity” and attract more complexity. The questions is just how you intend to manage that complexity. Active Record definitely gives you plenty of rope to hang yourself while making your lives incredibly easy. It is a tempting approach to design your model layer by just following the path of highest immediate convenience. Nevertheless, a future proof architecture takes a lot more consideration than cultivating huge classes and stuffing everything into Active Record objects.</p>

<p>The real problem that you deal with here is complexity—unnecessarily so I’d say. Classes that amass tons of code become complex just by their size alone. They are more difficult to maintain, difficult to parse and understand as well as increasingly harder to change because their composition probably lacks decoupling. These models often exceed their recommended capacity of handling one single responsibility and are rather all over the place. Worst case they become like garbage trucks, handling every trash that is lazily thrown at them. We can do better! If you think complexity is not a big deal—after all you are special, smart and all—think again! Complexity is the most notorious serial project killer out there—not your friendly neighborhood “Dark Defender”.</p>

<p>“Skinnier models” achieve one thing advanced folks in the coding business (probably a lot more professions than code and design) appreciate and what we all should absolutely strive for—simplicity! Or at least more of it which is a fair compromise if complexity is hard to eradicate. What tools does Ruby offer to make our lives easier in that regard and let’s us trim the fat out of our models? Simple, other classes and modules. You identify coherent code that you could extract into another object and thereby build a model layer that consists of reasonably sized agents that have their own unique, distinctive responsibilities. Think about it in terms of a talented performer. In real life, such a person might be able to rap, break, write lyrics and produce her own tunes. In programming, you prefer the dynamics of a band—here with at least four distinctive members—where each person is in charge of as few things as possible. You wanna build an orchestra of classes that can handle the complexity of the composer—not a micromanaging genius maestro class of all trades.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/AntiPatterns/Models/genuis-maestro.png"></p>

<p>Let’s look at an example of a fat model and play with a couple of options to handle its obesity. The example is a dummy one of course and by telling this goofy little story I hope it will be easier to digest and follow for newbies. We have a Spectre class that has too many responsibilities and has therefore grown unnecessarily. Besides these methods, I think it’s easy to imagine that such a specimen already accumulated lots of other stuff as well—represented by the three little dots. Spectre is well under way to become a <a href="https://robots.thoughtbot.com/how-much-should-i-refactor">god class</a>. (Chances are pretty low to sensibly formulate such a sentence again anytime soon;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Spectre</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:spectre_members</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:spectre_agents</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:enemy_agents</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:operations</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">turn_mi6_agent</span><span class="p">(</span><span class="n">enemy_agent</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;MI6 agent </span><span class="si">#{</span><span class="n">enemy_agent</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> turned over to Spectre&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">turn_cia_agent</span><span class="p">(</span><span class="n">enemy_agent</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;CIA agent </span><span class="si">#{</span><span class="n">enemy_agent</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> turned over to Spectre&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">turn_mossad_agent</span><span class="p">(</span><span class="n">enemy_agent</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Mossad agent </span><span class="si">#{</span><span class="n">enemy_agent</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> turned over to Spectre&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">kill_double_o_seven</span><span class="p">(</span><span class="n">spectre_agent</span><span class="p">)</span>
</span><span class='line'>    <span class="n">spectre_agent</span><span class="o">.</span><span class="n">kill_james_bond</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">dispose_of_cabinet_member</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>    <span class="n">spectre_member</span> <span class="o">=</span> <span class="no">SpectreMember</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;A certain culprit has failed the absolute integrity of this fraternity. The appropriate act is to smoke number </span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2"> in his chair. His services won’t be greatly missed&quot;</span>
</span><span class='line'>    <span class="n">spectre_member</span><span class="o">.</span><span class="n">die</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_assignment</span><span class="p">(</span><span class="n">operation</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Operation </span><span class="si">#{</span><span class="n">operation</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">’s objective is to </span><span class="si">#{</span><span class="n">operation</span><span class="o">.</span><span class="n">objective</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enemy_agent</span>
</span><span class='line'>    <span class="c1">#clever code</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">spectre_agent</span>
</span><span class='line'>    <span class="c1">#clever code</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">operation</span>
</span><span class='line'>    <span class="c1">#clever code</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Spectre turns various kinds of enemy agents, delegates killing 007, grills Spectre’s cabinet member when they fail and also prints out operational assignments. A clear case of micromanagement and definitely a violation of the “Single Responsibility Principle”. Private methods are also stashing up fast. This class doesn’t need to know most of the stuff that’s currently in it. We will split this functionality into a couple of classes and see if the complexity of having a couple more classes/objects is worth the liposuction.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Spectre</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:spectre_members</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:spectre_agents</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:enemy_agents</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:operations</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">turn_enemy_agent</span>
</span><span class='line'>    <span class="no">Interrogator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">enemy_agent</span><span class="p">)</span><span class="o">.</span><span class="n">turn</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enemy_agent</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">enemy_agents</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Interrogator</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:enemy_agent</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">enemy_agent</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@enemy_agent</span> <span class="o">=</span> <span class="n">enemy_agent</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">turn</span>
</span><span class='line'>    <span class="n">enemy_agent</span><span class="o">.</span><span class="n">turn</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">EnemyAgent</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:spectre</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:agency</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">turn</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;After extensive brainwashing, torture and hoards of cash…&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MI6Agent</span> <span class="o">&lt;</span> <span class="no">EnemyAgent</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">turn</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;MI6 agent </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> turned over to Spectre&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CiaAgent</span> <span class="o">&lt;</span> <span class="no">EnemyAgent</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">turn</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;CIA agent </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> turned over to Spectre&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MossadAgent</span> <span class="o">&lt;</span> <span class="no">EnemyAgent</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">turn</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Mossad agent </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> turned over to Spectre&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NumberOne</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">dispose_of_cabinet_member</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>    <span class="n">spectre_member</span> <span class="o">=</span> <span class="no">SpectreMember</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;A certain culprit has failed the absolute integrity of this fraternity. The appropriate act is to smoke number </span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2"> in his chair. His services won’t be greatly missed&quot;</span>
</span><span class='line'>    <span class="n">spectre_member</span><span class="o">.</span><span class="n">die</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Operation</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:spectre_agents</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:spectre</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_assignment</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Operation </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">’s objective is to </span><span class="si">#{</span><span class="n">objective</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SpectreAgent</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:operation</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:spectre</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">kill_james_bond</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Mr. Bond, I expect you to die!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SpectreMember</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:spectre</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">die</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Nooo, nooo, it wasn’t meeeeeeeee! ZCHUNK!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think the most important part that you should pay attention to is how we used a plain Ruby class like <code>Interrogator</code> to handle the turning of agents from different agencies. Real world examples could represent a converter that, say, transforms a HTML document into pdf and vice versa. If you don’t need the full functionality of Active Record classes, why use them if a simple Ruby class can do the trick as well? A little less rope to hang ourselves.</p>

<p>The Spectre class leaves the nasty business of turning agents to the <code>Interrogator</code> class and just delegates to it. This one has now the single responsibility of torturing and brainwashing captured agents. So far so good. But why did we create separate classes for each agent? Simple. Instead of just directly extracting the various turn methods like <code>turn_mi6_agent</code> over to <code>Interrogator</code> we gave them a better home in their own respective class. As a result, we can make effective use of polymorphism and don’t care about individual cases for turning agents. We just tell these different agent objects to turn and each of them knows what to do. The <code>Interrogator</code> doesn’t need to know the specifics about how each agent turns.</p>

<p>Since all these agents are Active Record objects, we created a generic one, <code>EnemyAgent</code>, that has a general sense of what turning an agent means and we encapsulate that bit for all agents in one place by subclassing it. We make use of this inheritance by supplying the <code>turn</code> methods of the various agents with <code>super</code> and get therefore access to the brainwashing and torture business—without duplication. Single responsibilities and no duplication is a good starting point for moving on.</p>

<p>The other Active Record classes take on various responsibilities that Spectre doesn’t need to care about. “Number One” usually does the grilling of failed Spectre cabinet members himself so why not let a dedicated object handle electrocution. On the other hand, failing Spectre members know how to die themselves when being smoked in their chair by <code>NumberOne</code>. <code>Operation</code> now prints its assignments itself as well—no need to waste the time of Spectre with peanuts like that. Last but not least, killing James Bond is usually attempted by an agent in the field, so <code>kill_james_bond</code> is now a method on <code>SpectreAgent</code>. Goldfinger would have handled that differently of course—gotta play with that laser thingie if you have one I guess.</p>

<p>As you can clearly see, we basically have now ten classes where we previously had only one. Isn’t that too much? It can be for sure. It’s an issue you’ll need to wrestle with most of the time you when split up such responsibilities. You can definitely overdue this. But looking at this from anther angle might help:</p>

<ul>
<li><p>Have we separated concerns? Absolutely!</p></li>
<li><p>Do we have lightweight, skinny classes that are better suited to handle singular responsibilities. Pretty sure!</p></li>
<li><p>Do we tell a “story”, are we painting a clearer picture of who is involved and is in charge for certain actions? I hope so!</p></li>
<li><p>Is it easier to digest what each class is doing? For sure!</p></li>
<li><p>Have we cut down on the number of private methods? Yup!</p></li>
<li><p>Does this represent a better quality of object oriented programming? Since we used composition and referred to inheritance only where needed for setting up these objects, you bet!</p></li>
<li><p>Does it feel more clean? Yes!</p></li>
<li><p>Are we better equipped to change our code without making a mess? Sure thing!</p></li>
<li><p>Was it worth it? What do you think?</p></li>
</ul>


<p>I’m not implying that these questions need to be checked off your list every time but these are the things you probably should start asking yourself while slimming down your models. Designing skinny models can be hard but it’s an essential measure to keep your applications healthy and agile. These are also not the only constructive ways to deal with fat models but it’s a good start, especially for newbies.</p>

<ul>
<li><h3>Missing Test Suite</h3></li>
</ul>


<p>That is probably the most obvious AntiPattern. Coming from the test-driven side of things, touching a mature app that has no test coverage can be one of the most painful experiences to encounter. If you wanna hate the world and your own profession more than anything, just spend six months on such a project and you’ll learn how much of a misanthrope is potentially in you. Kidding of course, but I doubt it will make you happier and that you wanna do it again—ever. Maybe a week will do as well. I’m pretty sure, the word torture will pop into your mind more often than you think. If testing was not part of your process so far and that kinda pain feels normal to your work, maybe you should consider that testing is not that bad nor your enemy. When your code related joy levels are more or less constantly above zero and you can fearlessly change your code then the overall quality of your work will be a lot higher compared to output that is tainted by anxiety and suffering.</p>

<p>Am I overestimating? I really don’t think so! You want to have a very extensive test coverage, not only because it is a great design tool for only writing code that you actually need but also you will need to change your code at some point in the future. You will be a lot better equipped to engage with your codebase—and a lot more confident—if you have a test harness that aides and guides refactorings, maintenance and extensions. They will occur for sure down the road, zero doubts about that. This is also the point where a test suite starts to pay off the second round of dividends because the increased speed with which you can securely make these quality changes can not be achieved by a long shot in apps that are made by people who think writing tests is nonsense or cost too much time.</p>

<ul>
<li><h3>Voyeuristic Models</h3></li>
</ul>


<p>These are models that are super nosy and want to gather too much information about other objects / models. That is in stark contrast to one of the most fundamental ideas in Object Oriented Programming—encapsulation. We rather want to strive for self-contained classes / models that manage their internal affairs themselves as much as possible. In terms of programming concepts, these voyeuristic models basically violate the “Principle of Least Knowledge”, aka the “Law of Demeter”—however you wanna pronounce it.</p>

<h3>Law of Demeter</h3>

<p>Why is this a problem? It is a form of duplication—a subtle one—and also leads to code that is a lot more brittle than anticipated. The Law of Demeter is pretty much the most reliable code smell that you can always attack without being worried about the possible downsides. I guess calling this one a “law” was not as pretentious as it might sound at first. Dig into this smell, you will need it a lot in your projects. It basically states that in terms of objects, you can call methods on your objects friend but not on your friend’s friend. This is a common way to explain it and it all boils down to using not more than a single dot for your method calls. Btw, it is totally fine to use more dots or methods calls when you deal with a single object that does not try to reach further than that. Something like <code>@weapons.find_by_name('Poison dart').formula</code>. is just fine. Finders can pile up quite a few dots sometimes. Btw, encapsulating them in dedicated methods is nevertheless a good idea.</p>

<h4>Law of Demeter violations</h4>

<p>Let’s look at a couple of bad examples from the classes above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@operation</span><span class="o">.</span><span class="n">spectre_agents</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">kill_james_bond</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@spectre</span><span class="o">.</span><span class="n">operations</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">spectre_agents</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@spectre</span><span class="o">.</span><span class="n">enemy_agents</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">agency</span><span class="o">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get the hang of it, here are a few more fictional ones.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@quartermaster</span><span class="o">.</span><span class="n">gizmos</span><span class="o">.</span><span class="n">non_lethal</span><span class="o">.</span><span class="n">favorite</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@mi6</span><span class="o">.</span><span class="n">operation</span><span class="o">.</span><span class="n">agent</span><span class="o">.</span><span class="n">favorite_weapon</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@mission</span><span class="o">.</span><span class="n">agent</span><span class="o">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bananas, right? Doesn’t look good, does it? As you can see, these method calls peek too much into the business of other objects. The most important and obvious negative consequence is changing a bunch of these method calls all over the place if the structure of these objects need to change—which they will eventually because the only constant in software development is—you guessed it—change (maybe feeling stupid every now and then as well but I’m not so sure about this one). Also, it looks really nasty, not easy on the eyes at all. When you don’t know that this is a problematic approach, Rails let’s you take this very far anyway—without screaming at you. A lot of rope, remember?</p>

<p>So what can we do about this? After all we want to get that information somehow. On the one hand you can compose our objects to fit our needs and we can make clever use of delegation to keep our models slim at the same time. Let’s dive into some code to show you what I mean.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SpectreMember</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:operations</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:spectre_agents</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Operation</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:spectre_member</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SpectreAgent</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:spectre_member</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@spectre_member</span><span class="o">.</span><span class="n">spectre_agents</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'><span class="vi">@spectre_member</span><span class="o">.</span><span class="n">operations</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">print_assignment</span>
</span><span class='line'><span class="vi">@spectre_member</span><span class="o">.</span><span class="n">spectre_agents</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@operation</span><span class="o">.</span><span class="n">spectre_member</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="vi">@operation</span><span class="o">.</span><span class="n">spectre_member</span><span class="o">.</span><span class="n">number</span>
</span><span class='line'><span class="vi">@operation</span><span class="o">.</span><span class="n">spectre_member</span><span class="o">.</span><span class="n">spectre_agents</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@spectre_agent</span><span class="o">.</span><span class="n">spectre_member</span><span class="o">.</span><span class="n">number</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SpectreMember</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:operations</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:spectre_agents</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">list_of_agents</span>
</span><span class='line'>    <span class="n">spectre_agents</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_operation_details</span>
</span><span class='line'>    <span class="n">operation</span> <span class="o">=</span> <span class="no">Operation</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>    <span class="n">operation</span><span class="o">.</span><span class="n">print_operation_details</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Operation</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:spectre_member</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">spectre_member_name</span>
</span><span class='line'>    <span class="n">spectre_member</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">spectre_member_number</span>
</span><span class='line'>    <span class="n">spectre_member</span><span class="o">.</span><span class="n">number</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_operation_details</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;This operation’s objective is </span><span class="si">#{</span><span class="n">objective</span><span class="si">}</span><span class="s2">. The target is </span><span class="si">#{</span><span class="n">target</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SpectreAgent</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:spectre_member</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">superior_in_charge</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;My boss is number </span><span class="si">#{</span><span class="n">spectre_member</span><span class="o">.</span><span class="n">number</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@spectre_member</span><span class="o">.</span><span class="n">list_of_agents</span>
</span><span class='line'><span class="vi">@spectre_member</span><span class="o">.</span><span class="n">print_operation_details</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@operation</span><span class="o">.</span><span class="n">spectre_member_name</span>
</span><span class='line'><span class="vi">@operation</span><span class="o">.</span><span class="n">spectre_member_number</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@spectre_agent</span><span class="o">.</span><span class="n">superior_in_charge</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is definitely a step in the right direction. As you can see, we packed the info we wanted to acquire in a bunch of wrapper methods. Instead of reaching across many objects directly, we abstracted these bridges and leave it to the respective models to talk to their friends about the infos we need. The downside to this approach is having all these extra wrapper methods lying around. Sometimes it’s fine but we really want to avoid maintaining these methods in a bunch of places if an object changes.</p>

<p>If possible, the dedicated place for them to change is on their object—and on their object alone. Polluting objects with methods that have little to do with their own model itself is also something to look out for since this is always a potential hazard for watering down on single responsibilities. We can do better than that. Where possible, let’s delegate method calls directly to their objects in charge and try to cut down on wrapper methods as much as we can. Rails knows what we need and provides us with the handy <code>delegate</code> class method method to tell our object’s friends what methods we need called.</p>

<p>Let’s zoom in on something from the previous code example and see where we can make proper use of delegation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Operation</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:spectre_member</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:number</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:spectre_member</span><span class="p">,</span> <span class="ss">prefix</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># def spectre_member_name</span>
</span><span class='line'><span class="c1">#   spectre_member.name</span>
</span><span class='line'><span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># def spectre_member_number</span>
</span><span class='line'><span class="c1">#   spectre_member.number</span>
</span><span class='line'><span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@operation</span><span class="o">.</span><span class="n">spectre_member_name</span>
</span><span class='line'><span class="vi">@operation</span><span class="o">.</span><span class="n">spectre_member_number</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SpectreAgent</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:spectre_member</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:number</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:spectre_member</span><span class="p">,</span> <span class="ss">prefix</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">superior_in_charge</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;My boss is number </span><span class="si">#{</span><span class="n">spectre_member_number</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see we could simplify things a bit using method delegation. We got rid of <code>Operation#spectre_member_name</code> and <code>Operation#spectre_member_number</code> completely and <code>SpectreAgent</code> does not need call <code>number</code> on <code>spectre_member</code> anymore—<code>number</code> is delegated back directly to its “origin” class <code>SpectreMember</code>.</p>

<p>In case this is a little confusing at first, how does this work exactly? You tell delegate which <code>:method_name</code> it should delegate <code>to:</code> which <code>:class_name</code> (multiple method names are fine too). The <code>prefix: true</code> part is optional. In our case, it prefixed the snake-cased class name of the receiving class before the method name and enabled us to call <code>operation.spectre_member_name</code> instead of the potentially ambiguous <code>operation.name</code>—if we had not used the prefix option. This works really nice with <code>belongs_to</code> and <code>has_one</code> associations. On the <code>has_many</code> side of things the music will stop and you will run into trouble though. These associations provide you with a collection proxy that will throw NameErrors or NoMethodErros at you when you delegate methods to these “collections”.</p>

<ul>
<li><h3>Spaghetti SQL</h3></li>
</ul>


<p>To round off this chapter about model AntiPatterns in Rails I’d like to spend a little time on what to avoid when SQL is involved. Active Record associations provide options that make your lives substantially easier when you are aware what you should stay away from. Finder methods are a whole topic on their own—and we won’t cover them in their full depth—but I wanted to mention a few common techniques that help you even when you write very simple ones.</p>

<p>Things that we should be concerned about echo most of what we learned so far. We want to have intention-revealing, simple and reasonably named methods for finding stuff in our models. Let’s dive right into code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Operation</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:agents</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Agent</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:operation</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">OperationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@operation</span> <span class="o">=</span> <span class="no">Operation</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@agents</span> <span class="o">=</span> <span class="no">Agent</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">operation_id</span><span class="p">:</span> <span class="vi">@operation</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">licence_to_kill</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks harmless, no? We’re juuust looking for a bunch of agents that have the licence to kill for our ops page. Think again. Why should the <code>OperationsController</code> dig into the internals of <code>Agent</code>? Also, is this really the best we can do to encapsulate a finder on <code>Agent</code>? If you are thinking that you could add a class method like <code>Agent.find_licence_to_kill_agents</code> which encapsulates the finder logic you are definitely doing a step in the right direction—not nearly enough though.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Agent</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:operation</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_licence_to_kill_agents</span><span class="p">(</span><span class="n">operation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">where</span><span class="p">(</span><span class="ss">operation_id</span><span class="p">:</span> <span class="n">operation</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">licence_to_kill</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">OperationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@operation</span> <span class="o">=</span> <span class="no">Operation</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@agents</span> <span class="o">=</span> <span class="no">Agent</span><span class="o">.</span><span class="n">find_licence_to_kill_agents</span><span class="p">(</span><span class="vi">@operation</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have to be a bit more engaged than that. First of all, this is not using the associations to our advantage and encapsulation is also suboptimal. Associations like <code>has_many</code> come with the benefit that we can add on to the proxy array that we get returned. We could have done this instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Operation</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:agents</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_licence_to_kill_agents</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">agents</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">licence_to_kill</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">OperationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@operation</span> <span class="o">=</span> <span class="no">Operation</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@agents</span> <span class="o">=</span> <span class="vi">@operation</span><span class="o">.</span><span class="n">find_licence_to_kill_agents</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works for sure but is also just another small step in the right direction. Yes, the controller is a bit better and we make good use of model associations but you should still be suspicious why <code>Operation</code> is concerned about the implementation of finding a certain type of <code>Agent</code>. This responsibility belongs back to the <code>Agent</code> model itself. Named scopes come in pretty handy with that. Scopes define chainable—very important—class methods for your models and thereby allow you the specify useful queries which you can use as additional method calls on top of your model associations. The following two approaches for scoping <code>Agent</code> are indifferent.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Agent</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:operation</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:licenced_to_kill</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">licence_to_kill</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Agent</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:operation</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">licenced_to_kill</span>
</span><span class='line'>    <span class="n">where</span><span class="p">(</span><span class="ss">licence_to_kill</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">OperationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@operation</span> <span class="o">=</span> <span class="no">Operation</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@agents</span> <span class="o">=</span> <span class="vi">@operation</span><span class="o">.</span><span class="n">agents</span><span class="o">.</span><span class="n">licenced_to_kill</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>That is much better. In case the syntax of scopes is new to you, they are just (stabby) lambdas—not terribly important to look into them right away btw—and they are the proper way to call scopes since Rails 4. <code>Agent</code> is now in charge of managing its own search parameters and associations can just tuck on what they need to find. This approach let’s you achieve queries as single SQL calls. I personally like to use <code>scope</code> for its explicity and they are very handy to chain inside well-named finder methods—that way they increase the possiblity of reusing code and DRY-ing code. Let’s say we have something a bit more involved:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Agent</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:operation</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:licenced_to_kill</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">licence_to_kill</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:womanizer</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">womanizer</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:bond</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;James Bond&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:gambler</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">gambler</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now use all these scopes to custom build more comples queries.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">OperationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@operation</span> <span class="o">=</span> <span class="no">Operation</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@double_o_agents</span> <span class="o">=</span> <span class="vi">@operation</span><span class="o">.</span><span class="n">agents</span><span class="o">.</span><span class="n">licenced_to_kill</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@operation</span> <span class="o">=</span> <span class="no">Operation</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@bond</span> <span class="o">=</span> <span class="vi">@operation</span><span class="o">.</span><span class="n">agents</span><span class="o">.</span><span class="n">womanizer</span><span class="o">.</span><span class="n">gambler</span><span class="o">.</span><span class="n">licenced_to_kill</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sure that works but I’d like to suggest you go one step further.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Agent</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:operation</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:licenced_to_kill</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">licence_to_kill</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:womanizer</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">womanizer</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:bond</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;James Bond&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:gambler</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">gambler</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_licenced_to_kill</span>
</span><span class='line'>    <span class="n">licenced_to_kill</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_licenced_to_kill_womanizer</span>
</span><span class='line'>    <span class="n">womanizer</span><span class="o">.</span><span class="n">licenced_to_kill</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_gambling_womanizer</span>
</span><span class='line'>    <span class="n">gambler</span><span class="o">.</span><span class="n">womanizer</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">OperationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@operation</span> <span class="o">=</span> <span class="no">Operation</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@double_o_agents</span> <span class="o">=</span> <span class="vi">@operation</span><span class="o">.</span><span class="n">agents</span><span class="o">.</span><span class="n">find_licenced_to_kill</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@operation</span> <span class="o">=</span> <span class="no">Operation</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@bond</span> <span class="o">=</span> <span class="vi">@operation</span><span class="o">.</span><span class="n">agents</span><span class="o">.</span><span class="n">find_licenced_to_kill_womanizer</span>
</span><span class='line'>    <span class="c1">#or</span>
</span><span class='line'>    <span class="vi">@bond</span> <span class="o">=</span> <span class="vi">@operation</span><span class="o">.</span><span class="n">agents</span><span class="o">.</span><span class="n">bond</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, through this approach we reap the benefits of proper encapsulation, model associations, code reuse and expressive naming of methods—and all while doing single SQL queries. No more spaghetti code, awesome! If you are worried about violating the Law of Demeter thingie you will be pleased to hear that since we are not adding dots by reaching into the associated model but chaining them only onto their own object we are not commiting any demeter crimes.</p>

<ul>
<li><h3>Final thoughts</h3></li>
</ul>


<p>From a beginner’s perspective I think you have learned a lot about better handling of Rails Models and how to model them more robustly without calling for a hangman. Don’t be fooled though in thinking that there isn’t a lot more to learn on this particular topic. I presented you with a few AntiPatterns that I think newbies are able to easily understand and handle in order to protect themselves early on. If you don’t know what you don’t know, plenty of rope is available for looping around your neck. Although this was a solid start into this topic, there are not only more aspects to AntiPatterns in Rails models but also more nuances which you’ll need to explore as well. These were the basics—very essential and important ones—and you should feel accomplished for a little while that you haven’t waited until much later in your career to figure them out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Middleman Basics 04-Podcast Site (Part 02)]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/11/28/Middleman-Basics-04-Podcast-02/"/>
    <updated>2015-11-28T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/11/28/Middleman-Basics-04-Podcast-02</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_03_build/Middleman_Bourbon_Banner.png"></p>

<h3>Topics</h3>

<ul>
<li>Posts Index</li>
<li>Footer</li>
<li><p>Color</p></li>
<li><h3>Posts Index</h3></li>
</ul>


<p>Where were we? Right now our site doesn’t look too sexy.</p>

<p><strong>Screenshot</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_04_build/before_neat_outer-container.png"></p>

<p>Currently our posts are not aligned to anything other than the left side and we’re in need of a grid to fix this mess. Our beloved Bourbon Neat to the rescue! First we’ll add a class <strong>.posts</strong> as a wrapper for our posts and make it an <strong>outer-container</strong> that centers the content on the page.</p>

<p><strong>source/index.html.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;div class=&#39;posts&#39;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="n">page_articles</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;h2&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">article</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="n">article</span> <span class="cp">%&gt;</span><span class="x"> &lt;span&gt;</span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%b %e&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/span&gt;&lt;/h2&gt;</span>
</span><span class='line'><span class="x">    &lt;!-- use article.summary(250) if you have Nokogiri available to show just</span>
</span><span class='line'><span class="x">         the first 250 characters --&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="o">.</span><span class="n">body</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we need to create a new Sass partial for our index styles and apply some magic.</p>

<p><strong>source/stylesheets/all.sass</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&#39;index_posts&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>source/stylesheets/_index_posts.sass</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.posts</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also added a background color to make our outer container easily visible—for now.</p>

<p><strong>Screenshot</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_04_build/after_neat_outer-container.png"></p>

<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add -all
</span><span class='line'>git commit -m <span class="s1">&#39;Adds Sass partial for index posts</span>
</span><span class='line'><span class="s1">               Centers content&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Recent articles, tags, and calendar stuff is in <strong>layout.erb</strong> and doesn’t concern us atm. We’ll leave it as is for now. Let’s focus instead of making this index list of posts pop. Let’s give the <strong>h2</strong> title a class <strong>post-title</strong> and let title and paragraphs of body copy span for 8 (out of twelve) columns across the page. The posts need to shift two columns over as well because we want to avoid having our copy running across the whole page and thereby exceeding a healthy line width (measure) for reading of 45-75 characters.</p>

<p><strong>source/index.html.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;div class=&#39;posts&#39;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="n">page_articles</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;h2 class=&#39;post-title&#39;&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">article</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="n">article</span> <span class="cp">%&gt;</span><span class="x"> &lt;span&gt;</span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%b %e&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/span&gt;&lt;/h2&gt;</span>
</span><span class='line'><span class="x">    &lt;!-- use article.summary(250) if you have Nokogiri available to show just</span>
</span><span class='line'><span class="x">         the first 250 characters --&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="o">.</span><span class="n">body</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>source/stylesheets/_index_posts.sass</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.post-title</span><span class="o">,</span> <span class="nc">.posts</span> <span class="nt">p</span>
</span><span class='line'>  <span class="nd">+shift</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Screenshot</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_04_build/after_shift_span-columns.png"></p>

<p>Now we’re talking. Our content is aligned and nicely centered on the page. What we’re missing though is any form of visual hierarchy. Our <strong>h2</strong> titles are not much bigger than the content of our posts. To provide a better reading experience, we want to make sure titles and their corresponding text have better visual contrast than that.</p>

<p>We need better text to work with first. Let’s make use of a Middleman helper for dummy text. Let’s add an <strong>erb</strong> extension to our blogposts and add the following to our test posts. Btw, we need the <strong>.erb</strong> extension only because we want to run some ruby code between this construct <code>&lt;%= %&gt;</code>.</p>

<p><strong>source/posts/2012-01-01-example-article.html.markdown.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">This is an example article. You probably want to delete it and write your own articles!</span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">lorem</span><span class="o">.</span><span class="n">sentences</span> <span class="mi">5</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>I’ll show you in a minute what what got here, but first a few more styles.</p>

<p><strong>source/stylesheets/_index_posts.sass</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.post-title</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.7</span><span class="kt">em</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.posts</span> <span class="nt">p</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.05</span><span class="kt">em</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">4</span><span class="kt">em</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Screenshot</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_04_build/after_title_p_font-sized.png"></p>

<p>A bit easier on the eyes isn’t it? We have adjusted the headers and paragraphs to a reasonable. A little extra margin in between posts makes all the difference. In terms of hierachy, its a good start.</p>

<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Adjusts size for title and body text</span>
</span><span class='line'><span class="s1">               Adds dummy text</span>
</span><span class='line'><span class="s1">               Adds .erb extension to dummy posts&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>Footer</h3></li>
</ul>


<p>I think we should take care of these ghastly floating elements on the bottom first. Let’s pack “Recent Articles” and “Tags” in a footer and get rid of “By Year”. The relevant markup is part of the global layout in <strong>source/layouts/layout.erb</strong>. Find the code in the <strong>aside</strong> tag below <strong>yield</strong> and adapt it like this:</p>

<p><strong>source/layouts/layout.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;footer&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;div class=&#39;recent-posts&#39;&gt;</span>
</span><span class='line'><span class="x">    &lt;h3&gt;Recent Posts&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    &lt;ol&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="n">blog</span><span class="o">.</span><span class="n">articles</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">10</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">article</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="n">article</span> <span class="cp">%&gt;</span><span class="x"> &lt;span&gt;</span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%b %e&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/span&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/ol&gt;</span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;div class=&#39;footer-tags&#39;&gt;</span>
</span><span class='line'><span class="x">    &lt;h3&gt;Tags&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    &lt;ol&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="n">blog</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="p">,</span> <span class="n">articles</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">articles</span><span class="o">.</span><span class="n">size</span><span class="si">}</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="n">tag_path</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/ol&gt;</span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;/footer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above default business of just looping through our posts and tags that comes with Middleman is fine. I want to have it a bit smarter though and introduce shuffling to both recent posts and tags. That way, the user doesn’t only see the last ten articles or a huge list of tags but a randomized version of both that is always ten items long. They also don’t consume a whole lot of space and let me align both items consistently in the footer. I renamed the <strong>h3</strong> for posts as well.</p>

<p><strong>source/layouts/layout.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;footer&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;div class=&#39;recent-posts&#39;&gt;</span>
</span><span class='line'><span class="x">    &lt;h3&gt;Random Posts&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    &lt;ol&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="n">blog</span><span class="o">.</span><span class="n">articles</span><span class="o">.</span><span class="n">shuffle</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">10</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">article</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="n">article</span> <span class="cp">%&gt;</span><span class="x"> &lt;span&gt;</span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%b %e&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/span&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/ol&gt;</span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;div class=&#39;footer-tags&#39;&gt;</span>
</span><span class='line'><span class="x">    &lt;h3&gt;Tags&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    &lt;ol&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="n">blog</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">shuffle</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">10</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="p">,</span> <span class="n">articles</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">articles</span><span class="o">.</span><span class="n">size</span><span class="si">}</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="n">tag_path</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/ol&gt;</span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;/footer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think we improved the user experience quite a bit through that little enhancement. Ruby made our job super easy. Now this markup only needs a little push for better alignment. We create a new Sass partial for just the footer.</p>

<p><strong>source/stylesheets/all.sass</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&#39;footer&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>source/stylesheets/_footer.sass</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nt">footer</span>
</span><span class='line'>  <span class="nd">+outer-container</span>
</span><span class='line'>  <span class="na">border-top</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nv">$base-border-color</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span>
</span><span class='line'>    <span class="na">top</span><span class="o">:</span> <span class="mi">4</span><span class="kt">em</span>
</span><span class='line'>    <span class="na">bottom</span><span class="o">:</span> <span class="mi">4</span><span class="kt">em</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.recent-posts</span>
</span><span class='line'>  <span class="nd">+shift</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.footer-tags</span>
</span><span class='line'>  <span class="nd">+span-columns</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.recent-posts</span><span class="o">,</span> <span class="nc">.footer-tags</span>
</span><span class='line'>  <span class="nt">h3</span>
</span><span class='line'>    <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.7</span><span class="kt">em</span>
</span><span class='line'>  <span class="nt">li</span>
</span><span class='line'>    <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.05</span><span class="kt">em</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to have some tangible test data, I added a couple more example posts via the middleman generator and gave it some dummy lorem text.</p>

<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman article <span class="s1">&#39;Your fancy title&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I should probably mention that I also needed to add an <strong>.erb</strong> extension to these new posts for the dummy lorem text generator. The frontmatter contains a couple more tags to play with as well.</p>

<p><strong>source/posts/2015-12-01-your-fancy-title.html.markdown.erb"</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">---</span>
</span><span class='line'><span class="x">title: Example Post</span>
</span><span class='line'><span class="x">date: 2015-12-01</span>
</span><span class='line'><span class="x">tags: example, bourbon, neat, middleman</span>
</span><span class='line'><span class="x">---</span>
</span><span class='line'>
</span><span class='line'><span class="x">This is an example article. You probably want to delete it and write your own articles!</span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">lorem</span><span class="o">.</span><span class="n">sentences</span> <span class="mi">5</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The goal was to have at least ten posts and tags to see if everything aligns properly. Let’s see what we got here:</p>

<p><strong>Screenshot with dummy background</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_04_build/footer-shuffled-10-items-span-columns.png"></p>

<p>Ok, now the background colors have fullfilled their duty for now. Let’s kill them and check if we’re happy with the actual result:</p>

<p><strong>Screenshot without dummy background</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_04_build/footer-shuffled-10-items-span-columns-without-bg.png"></p>

<p>I think it looks decent and we can leave it like that for now. Time to commit our changes.</p>

<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add  ../layouts/layout.erb
</span><span class='line'>gco -m <span class="s1">&#39;Adapts layout and adds footer&#39;</span>
</span><span class='line'>
</span><span class='line'>git add ../stylesheets/_footer.sass ../stylesheets/all.sass
</span><span class='line'>git commit -m <span class="s1">&#39;Adds styles for footer and imports Sass partial&#39;</span>
</span><span class='line'>
</span><span class='line'>git add ../posts/*.markdown.erb
</span><span class='line'>git commit -m <span class="s1">&#39;Adds a bunch of dummy posts with:</span>
</span><span class='line'><span class="s1">              dummy lorem text</span>
</span><span class='line'><span class="s1">              dummy tags&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before we move on, we should deploy to GitHub Pages, check our progress and make sure we’re not running into any surprises.</p>

<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman deploy
</span></code></pre></td></tr></table></div></figure>


<p>Open your browser and go to <code>yourusername.github.io/your_project_name</code> and see if you’re happy with your site so far.</p>

<p>What should we do next? You’re right, the footer screams in bigh letters EXTRACTION! We’re gonna take the <strong>footer</strong>, create a new folder for partials and put the markup in there. In turn, we need to render that partial from <strong>layout.erb</strong>.</p>

<p><strong>source/layouts/layout.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;body&gt;</span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">  &lt;div id=&quot;main&quot; role=&quot;main&quot;&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">partial</span> <span class="s2">&quot;partials/footer&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>source/partials/_footer.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;footer&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;div class=&#39;recent-posts&#39;&gt;</span>
</span><span class='line'><span class="x">    &lt;h3&gt;Random Posts&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    &lt;ol&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="n">blog</span><span class="o">.</span><span class="n">articles</span><span class="o">.</span><span class="n">shuffle</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">10</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">article</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="n">article</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/ol&gt;</span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;div class=&#39;footer-tags&#39;&gt;</span>
</span><span class='line'><span class="x">    &lt;h3&gt;Tags&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    &lt;ol&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="n">blog</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">shuffle</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">10</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="p">,</span> <span class="n">articles</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">tag_path</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/ol&gt;</span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;/footer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I suppose you paid close attention and saw that I got rid of the date for the list of articles in the footer. I did this for two reasons. First of all, we’re gonna save a bit more space so that we don’t easily run in the scenario that the alignment with the tags breaks when the title for the post is a bit longer. Secondly, I thought it is a bit distracting and doesn’t add too much.</p>

<p>This list of randomzied articles in the footer is a handy way to introduce new stuff to the audience. The date doesn’t play a big role in that. The same goes for the number of articles for the tag links. They waste space without adding too much value. Also, if you don’t have too many articles for a certain tag, it doesn’t look empty right away. I’d rather have more space for a stable layout. It also feels a bit more clean, but that is clearly very subjective.</p>

<p><strong>Screenshot</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_04_build/footer-posts-without-date-tagnumbers.png"></p>

<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Extracts footer into partial </span>
</span><span class='line'><span class="s1">               Removes date from post links in footer</span>
</span><span class='line'><span class="s1">               Removes number of articles for tags in footer</span>
</span><span class='line'><span class="s1">                 Didn’t provide enough value to sacrifice space&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>While we’re at it. Let’s take care of the date in our index titles. I think their size is way too prominent which does not improve our visual hierarchy and I don’t like having it at the end of the title. I’d rather stick it on the other side and use it as a visual anchor that doesn’t jump around with varying title lengths.</p>

<p><strong>source/index.html.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;div class=&#39;posts&#39;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="n">page_articles</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;h2 class=&#39;post-title&#39;&gt;&lt;span class=&#39;post-date&#39;&gt;</span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%b %e&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/span&gt; </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">article</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="n">article</span> <span class="cp">%&gt;</span><span class="x">&lt;/h2&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="o">.</span><span class="n">body</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>source/stylesheets/_index_posts.sass</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.post-date</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.7</span><span class="kt">em</span>
</span><span class='line'>  <span class="na">margin</span><span class="o">:</span>
</span><span class='line'>    <span class="na">left</span><span class="o">:</span> <span class="nf">em</span><span class="p">(</span><span class="mi">-80</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>    <span class="na">right</span><span class="o">:</span> <span class="nf">em</span><span class="p">(</span><span class="mi">20</span><span class="kt">px</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The title of the post is reordered and starts with the span hat contains the date. I left a little whitespace between the span with the date and the title itself because if I align the date with the article body text for smaller screens then I have a natural one character space between the date and the title—and don’t need to use Sass unnecessarily.</p>

<p>The Sass code is straightforward. The negative margins help me to visually anchor the date to the left of the title and I used a Bourbon function to convert their pixel values into ems. Simple but I like the hierarchy we achieved. The eyes have something to jump to via the dates and the rest has enough whitespace so that we can stay away from using borders to divide our posts. Me, happy!</p>

<p><strong>Screenshot</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_04_build/post-title-smaller-anchors.png"></p>

<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add ../index.html.erb ../stylesheets/_index_posts.sass
</span><span class='line'>git commit -m <span class="s1">&#39;Changes order for date and post title on index page</span>
</span><span class='line'><span class="s1">               Styles date to create visual anchor&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman deploy
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>Color</h3></li>
</ul>


<p>Let’s bring this thing to life a bit—but not too much. Less is more! I went to <a href="http://www.colourlovers.com/">COLOURlovers</a> and played with a couple of color palettes. Sites with various palletes can help to give you ideas where you wanna go. Watch out for solutions that can enhance your visual hierarchy but stay away from colors that are screamishly loud. I realize that this is vague since colors can be very subjective and culturally loaded but that’s how I approach it atm anyway.</p>

<p>Overall, it’s not an easy topic and I wish web peeps would pay more attention to it. You certainly shouldn’t just poke around on a color wheel when you lack the experience. If you’re new to this, educate yourself and don’t just pick a color because you feel like it or because it looks cool or something. A reasonable use of color can be very powerful—on the other hand, it can look very comical very quickly as well.</p>

<p><strong>source/stylesheets/base/_variables.scss</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nv">$matcha-green</span><span class="o">:</span> <span class="mh">#78B69D</span><span class="p">;</span>
</span><span class='line'><span class="nv">$text-color</span><span class="o">:</span> <span class="nf">darken</span><span class="p">(</span><span class="nv">$medium-gray</span><span class="o">,</span> <span class="mi">20</span><span class="kt">%</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Back to business, after playing with some ideas, I added two new global colors to my Sass variables file from Bitters. <strong>$matcha-green</strong> is now the color I wanna use for my identity and placed in this file I can reuse this variable wherever I please. Should I change my mind about what green I want, I will need to change it only in once place! Also, I wasn’t too happy with the default color for text. Using a Sass function I darkened one of the preset colors from Bitters by 20 percent and stored that as <strong>$text-color</strong>. Post titles on hover, as well as dates and body copy got the new text color. The default was too dark imho.</p>

<p><strong>source/stylesheets/base_typography.scss</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">// transition: color $base-duration $base-timing;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>source/stylesheets/_index_posts.sass</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.post-title</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.7</span><span class="kt">em</span>
</span><span class='line'>  <span class="nt">a</span>
</span><span class='line'>    <span class="nd">+transition</span><span class="p">(</span><span class="no">color</span> <span class="mf">.4</span><span class="kt">s</span> <span class="n">ease-in-out</span><span class="p">)</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nv">$matcha-green</span>
</span><span class='line'>    <span class="k">&amp;</span><span class="nd">:hover</span>
</span><span class='line'>      <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.post-date</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.posts</span> <span class="nt">p</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also added a slight transition through a Bourbon mixin for hovering over <strong>.post-title</strong>. This changes from <strong>$matcha-green</strong> to <strong>$text-color</strong> over <strong>.4</strong> seconds. Check my articles about Bourbon Mixins if you wanna know more. In case you wonder about the <strong>ease-in-out</strong> part, it’s one of 32 ways to time transitional behaviour. ($ease-in-out, as a <strong>$</strong>variable, like in the documentation will through an error) It’s a small enhancement but looks a lot better than browser defaults. To make this work I also had to uncomment the default transition behaviour from Bitters first in <strong>base_typography.scss</strong>.</p>

<p><strong>source/stylesheets/_footer.sass</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nt">footer</span>
</span><span class='line'>  <span class="na">border-top</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nf">rgba</span><span class="p">(</span><span class="nv">$text-color</span><span class="o">,</span> <span class="mf">.3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.recent-posts</span><span class="o">,</span> <span class="nc">.footer-tags</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nf">darken</span><span class="p">(</span><span class="nv">$medium-gray</span><span class="o">,</span> <span class="mi">20</span><span class="kt">%</span><span class="p">)</span>
</span><span class='line'>  <span class="nt">a</span>
</span><span class='line'>    <span class="nd">+transition</span><span class="p">(</span><span class="n">all</span> <span class="mf">.1</span><span class="kt">s</span> <span class="n">ease-in-out</span><span class="p">)</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color</span>
</span><span class='line'>    <span class="k">&amp;</span><span class="nd">:hover</span>
</span><span class='line'>      <span class="na">color</span><span class="o">:</span> <span class="nv">$matcha-green</span>
</span><span class='line'>      <span class="na">border-bottom</span><span class="o">:</span> <span class="mi">2</span><span class="kt">px</span> <span class="no">solid</span> <span class="nv">$matcha-green</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, I adapted the colors for the footer as well. This gives us a coherent appearance and hopefully a bit understatement. The transitional behavior needed to be sped up for the links in the footer. Since they are grouped so tight together I felt it wold be better if they are a bit snappier and underlined as well.</p>

<p>In terms of color, I did the oposite as with the titles in the index list. Since the footer list doesn’t need to be as present on the page—especially with so little distance between them—I gave them the default gray text color and only use the <strong>$matcha-green</strong> when hovering. In this example we “only” use whitespace and the sizing of type to achieve hierarchy.</p>

<p>Oh, and the border above the footer needed a bit opacity via the Sass <strong>rgba</strong> function. I figured that 30 percent opacity is just enough to do its job without sticking out that much.</p>

<p>Not too shabby looking for such a small amount of code. Exactly how I like it—the less “code” you write the less bugs you bite!</p>

<p><strong>Screenshot</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_04_build/after-color-changes-index.png"></p>

<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>
</span><span class='line'>git commit -m <span class="s1">&#39;First attempt at tuning colors</span>
</span><span class='line'><span class="s1">               Adds new brand color as $matcha-green</span>
</span><span class='line'><span class="s1">               Adds new $text-color:</span>
</span><span class='line'><span class="s1">                 Body copy</span>
</span><span class='line'><span class="s1">                 Post titles hover</span>
</span><span class='line'><span class="s1">                 Footer headers</span>
</span><span class='line'><span class="s1">               Takes care of hover transitions</span>
</span><span class='line'><span class="s1">                 Comments out Bitters default transition&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>One more little thing that bugs me is the line height of the body copy. Let’s tweak that too.</p>

<p><strong>source/stylesheets/_index_posts.sass</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.posts</span> <span class="nt">p</span>
</span><span class='line'>  <span class="na">line-height</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.35</span><span class="kt">em</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Screenshot</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/middleman_04_build/index-body-copy-line-height.png"></p>

<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add ../source/stylesheets/_index_posts.sass
</span><span class='line'>git commit -m <span class="s1">&#39;Adjusts line-height for body copy on index&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman deploy
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li><h3>Break</h3></li>
</ul>


<p>Good job so far! Time for another break. In the next article we’re gonna add a navbar and a “hero unit” on top—maybe more. See you there! Get yourself a snack and chill for a bit!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby / Rails Code Smell Basics 04]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/11/28/Code-Smells-04/"/>
    <updated>2015-11-28T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/11/28/Code-Smells-04</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/code_smells/code_smell_01_600_mirrored.jpg"></p>

<h3>Heads Up</h3>

<p>This article was mostly written for folks a little more new to coding. Having obviously walked in these shoes myself, I remembered that it felt unnecessary foggy to get into code smells and refactorings. On the one hand, authors expect a certain level of proficiency and therefore might not feel super compelled to provide the reader with the same amount of context as a newbie might need to comfortably dive into this world sooner. As a consequence maybe, newbies on the other hand form the impression that they should wait a bit longer until they are more advanced to learn about smells and refactorings. I do not agree with that approach and think that making this topic more approachable will help them design better software earlier in their career. At least I hope it helps to provide junior peeps with a solid head start.</p>

<h3>Topics</h3>

<ul>
<li>Comments</li>
<li>Callbacks</li>
<li>Shitty Names</li>
<li>Mixins</li>
<li><p>Data Clumps</p></li>
<li><h3>A Final Whiff</h3></li>
</ul>


<p>The last article in this mini series is something like a bonus round. I wanted to introduce you to a another couple of smells that can be addressed quickly and without much fuzz. One for the road so to speak. I think with the knowledge you gathered from the previous articles, most of them won’t even need code examples to wrap your head around. When you open a book about refactoring you will easily find more smells than we have discussed. However, with these major ones under your belt you will be well prepared to deal with any of them.</p>

<ul>
<li><h3>Comments</h3></li>
</ul>


<p>Generously applied comments are rarely a good idea—probably never. Why not? Because it might suggest that your design is not speaking for itself. That means your code is probably so complicated to understand that it needs literal explanations. First of all, who wants to go through hoards of text in your code—or worse, through code that is hard to understand. Jackpot if both are a common occurrence. That’s just bad form and not very considerate of people who come after you—no offence masochists, torture your future self all you want.</p>

<p>You want to write code that is expressive enough in itself. Create classes and methods that speak for themselves. In the best scenario, they tell a story that is easy to follow. That is probably one of the reasons <em>conventions over configurations</em> became so influential. Reinventing the wheel is certainly sometimes a good practice to sharpen your understanding and to explore new territory, but in fast-paced development environments your colleagues are looking for clarity and quick navigation—not only within your files but also within the mental map you create in your code.</p>

<p>I don’t wanna drift off in a whole nother topic, but naming plays a big role in all of that. And excessive commenting within your code is a little bit contradicting good naming practices / conventions. Don’t get me wrong, it’s fine to add comments, just stay on the path that “illumintates” your code—not distract from it. They should certainly not be instructions for clever code that mostly you can decipher because you wanted to show off. If you keep your methods simple—as you should be—and name everything with consideration then you have little need to write whole novels in between your code.</p>

<p>Stay away from the following:</p>

<ul>
<li>Todo lists</li>
<li>Dead code commented out</li>
<li>Comments in method bodies</li>
<li>More than one comment per method</li>
</ul>


<p>It’s also useful to break out parts of methods via <em>extract method</em> and giving this part of a method a name that tells us about its responsibility—rather than have all the details clutter up a high-level understanding of what’s going on within the method’s body.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create_new_agent</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="c1"># create new agent</span>
</span><span class='line'><span class="n">visit</span> <span class="n">root_path</span>
</span><span class='line'><span class="n">click_on</span>     <span class="s1">&#39;Create Agent&#39;</span>
</span><span class='line'><span class="n">fill_in</span>      <span class="s1">&#39;Agent Name&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s1">&#39;Jinx&#39;</span>
</span><span class='line'><span class="n">fill_in</span>      <span class="s1">&#39;Email&#39;</span><span class="p">,</span>      <span class="ss">with</span><span class="p">:</span> <span class="s1">&#39;jinx@nsa.com&#39;</span>
</span><span class='line'><span class="n">fill_in</span>      <span class="s1">&#39;Password&#39;</span><span class="p">,</span>   <span class="ss">with</span><span class="p">:</span> <span class="s1">&#39;secretphrase&#39;</span>
</span><span class='line'><span class="n">click_button</span> <span class="s1">&#39;Submit&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is easier to read? A no brainer of course! Use the free mileage you get by naming things properly via extracted methods. It makes your code so much smarter and easier to digest—plus the benefits of refactoring in one place if reused of course. I bet this will help trim down your comments by a very significant amount.</p>

<ul>
<li><h3>Callbacks</h3></li>
</ul>


<p>This is a simple one. Don’t use callbacks that are not related to persistence logic! Your objects have a persistence life cycle—creating, saving and deleting objects so to speak—and you don’t want to “pollute” that logic with other behaviour like business logic of your classes. Keep it simple, remember? Typical examples of what to avoid is sending emails, processing  payments and stuff. Why not? Because debugging and refactoring your code should be as easy as possible and messy callbacks have a reputation of interfering with these plans. Callbacks make it a bit too easy to muddy the waters and to shoot yourself in the foot multiple times.</p>

<p>Another problematic point about callbacks is that it can hide the implementation of business logic in methods like <strong>#save</strong> or <strong>#create</strong>. So don’t be lazy and abuse them just because it seems convenient!  The biggest concern is coupling of concerns of course. Why let the create method of <strong>SpectreAgent</strong> for example deal with the delivery of a <strong>#mission_assignment</strong> or something. As so often, just because we can do it—easily—doesn’t mean we should. It’s a guaranteed bite in the ass waiting to happen. The solution is actually pretty straightforward. If a callback’s behaviour has nothing to do with persistence simply create another method for it and you’re done.</p>

<ul>
<li><h3>Shitty Names</h3></li>
</ul>


<p>Sorry to be so blunt, but just calling poor naming choices uncommunicative or simply bad doesn’t do the consequences justice I think. In effect, you are wasting other peoples’s time with bad naming choices—or even better your own if you have to revisit that piece of code in the future. The code you write are instructions to be read by you and other people and therefore a purely logical, super prosaic, overly clever, or worse, a plain lazy approach to naming things is one of the worst things you can leave behind. Aim to make your code easier to understand by providing better names.</p>

<p>Clarity trumps false cleverness or unneccessary conciseness any day of the week! Work hard on naming methods, variables! and classes that make it easy to follow some sort of thread. I don’t wanna go as far as to say that you should aim for trying to tell a story but if you can, go for it! Machines are not the ones who need to “read” your code—it’s run by them of course. Maybe it’s one reason why the term “Software Writer” grew on me a bit as of lately—not because the engineering aspect should be diminished—but writing software is more than writing soulless instructions for machines—at least software that is elegant and sparks joy to work with. Don’t freak out if this turns out to be a lot more difficult than you thought. Naming is notoriously hard!</p>

<ul>
<li><h3>Mixins</h3></li>
</ul>


<p>Mixins are a smell? Well, let’s say they can be smelly. Multiple inheritance through Mixins can be useful but there are a couple of things that make them less useful than you might have thought when you started out with OOP:</p>

<ul>
<li>They are trickier to test.</li>
<li>They can’t have their own state.</li>
<li>They “pollute” the namespace a bit.</li>
<li>It’s not always super clear where functionality comes from—since it’s mixed in.</li>
<li>They can inflate the size of classes / number of methods drastically. Small classes rule, remember?</li>
</ul>


<p>I suggest you read up a bit on “<a href="https://en.wikipedia.org/wiki/Composition_over_inheritance">Composition Over Inheritance</a>”. The gist of it is that you should rely more on reuse of your own, separately composed classes than on inheritance / subclassing. Mixins are a form of inheritance that can be put to good use but also something you should be a bit suspicious about.</p>

<ul>
<li><h3>Data Clumps</h3></li>
</ul>


<p>Watch out for repeatedly passing the same multiple arguments into your methods. That often suggests that they have a relationship that can be extracted into a class of its own—which can in turn often drastically simplify feeding these methods with data by reducing the size of arguments. If it’s worth introducing a new dependency is the thing you have to weigh though.</p>

<p>This smell is another form of subtle duplication that we can handle better. A good example is passing a long list of arguments that make up an address and credit card info. Why not package these infos in an existing class or extract a new class first and pass in the address and credit card objects instead. Another way to think about is having a range object instead of a start and an end. In case you have instance variables that fall for that smell then extracing a class is worth considering. In other cases, a <em>parameter object</em> might offer the same quality of abstraction.</p>

<p>You’ll know that you have achieved a small win if your system is easier to understand and that you found a new concept—like credit card—that you could encapsulate into an object.</p>

<ul>
<li><h3>Final Thoughts</h3></li>
</ul>


<p>Congratulations! You have leveled up your OOP skills significantly! Boss level status is approaching. No seriously, great job if this whole topic was rather new to you! As a final recommendation, I want you to take away one thing. Please remember that there is no recipe that will always work. You will need to weigh every problem differently and often mix different techniques to fit your needs. Also, for the rest of your career, this is most likely something you’ll never stop struggling with—I guess a good struggle though, a creative and challenging one. This is a little guess, but I feel that if you understood most of the topics we covered, you’ll be well on your way to write code other developers like to discover. Thanks for your time reading this little series and good luck becoming a happy hacker!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby / Rails Code Smell Basics 03]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/11/23/Code-Smells-03/"/>
    <updated>2015-11-23T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/11/23/Code-Smells-03</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/code_smells/code_smell_01_600_mirrored.jpg"></p>

<h3>Heads Up</h3>

<p>This article was mostly written for folks a little more new to coding. Having obviously walked in these shoes myself, I remembered that it felt unnecessary foggy to get into code smells and refactorings. On the one hand, authors expect a certain level of proficiency and therefore might not feel super compelled to provide the reader with the same amount of context as a newbie might need to comfortably dive into this world sooner. As a consequence maybe, newbies on the other hand form the impression that they should wait a bit longer until they are more advanced to learn about smells and refactorings. I do not agree with that approach and think that making this topic more approachable will help them design better software earlier in their career. At least I hope it helps to provide junior peeps with a solid head start.</p>

<h3>Topics</h3>

<ul>
<li>Case Statements</li>
<li>Polymorphism</li>
<li>Null Objects</li>
<li><p>Data Class</p></li>
<li><h3>Case Statements</h3></li>
</ul>


<p>This one could also be named “checklist smell” or something. Case statements are a smell because they cause duplication—they are often inelegant as well. They can also lead to unnecessary big classes because all these methods that respond to the various (and potentially growing) case scenarios often end up in the same class—which then has all kinds of mixed responsibilities. Not a rare case that you have a lot of private methods that would be better off in classes of their own.</p>

<p>A big problem with case statements occurs if you wanna expand the case statements. Then you have to change that particular method—possibly again and again. And not only there, often they have twins repeated all over the place who now need an update as well. A great way to breed bugs for sure. As you might remember, we want to be open for extension but closed for modification. Here modification is inevitable and just a matter of time.</p>

<p>You make it harder for yourself to extract and reuse code, plus it is a ticking clutter bomb. Often view code depends on such a case statements—which then duplicate the smell and open the gate wide open for a round of shotgun surgery in the future. Ouch! Also, interrogating an object before you find the right method to execute is a nasty violation of the “<a href="http://martinfowler.com/bliki/TellDontAsk.html">Tell-Don’t-Ask</a>” principle.</p>

<h3>Polymorphism</h3>

<p>There is a good technique to handle the need for case statemens. Fancy word incoming! <strong>Polymorphism</strong>. This allows you to create the same interface for different objects and use whatever object needed for different scenarios. You can just swap in the appropriate object and it adapts to your needs because it has the same methods on it. Their behaviour underneath these methods is different but as long as the objects respond to the same interface Ruby does not care. For example, <strong>VegetarianDish.new.order</strong> and <strong>VeganDish.new.order</strong> behave differently but both respond to <strong>#order</strong> the same way. You just want to order and don’t answer tons of questions like if you eat eggs or not.</p>

<p>Polymorphism is implemented by extracting a class for the case statement branch and by moving that logic into a new method on that class. You continue to do that for every leg in the conditional tree and give them all the same method name. That way you encapsulate that behaviour to an object that is best suited to make that kind of decision and has no reason to further change. See, that way you can avoid all these nagging questions on an object—you just tell it what it’s supposed to do. When the need arises for more conditional cases, you just create another class that takes care of that single responsibility under the same method name.</p>

<p><strong>Case Statement logic</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Operation</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">price</span>
</span><span class='line'>    <span class="k">case</span> <span class="vi">@mission_tpe</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:counter_intelligence</span>
</span><span class='line'>        <span class="vi">@standard_fee</span> <span class="o">+</span> <span class="vi">@counter_intelligence_fee</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:terrorism</span>
</span><span class='line'>        <span class="vi">@standard_fee</span> <span class="o">+</span> <span class="vi">@terrorism_fee</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:revenge</span>
</span><span class='line'>        <span class="vi">@standard_fee</span> <span class="o">+</span> <span class="vi">@revenge_fee</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:extortion</span>
</span><span class='line'>        <span class="vi">@standard_fee</span> <span class="o">+</span> <span class="vi">@extortion_fee</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">counter_intel_op</span> <span class="o">=</span> <span class="no">Operation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">mission_type</span><span class="p">:</span> <span class="ss">:counter_intelligence</span><span class="p">)</span>
</span><span class='line'><span class="n">counter_intel_op</span><span class="o">.</span><span class="n">price</span>
</span><span class='line'>
</span><span class='line'><span class="n">terror_op</span> <span class="o">=</span> <span class="no">Operation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">mission_type</span><span class="p">:</span> <span class="ss">:terrorism</span><span class="p">)</span>
</span><span class='line'><span class="n">terror_op</span><span class="o">.</span><span class="n">price</span>
</span><span class='line'>
</span><span class='line'><span class="n">revenge_op</span> <span class="o">=</span> <span class="no">Operation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">mission_type</span><span class="p">:</span> <span class="ss">:revenge</span><span class="p">)</span>
</span><span class='line'><span class="n">revenge_op</span><span class="o">.</span><span class="n">price</span>
</span><span class='line'>
</span><span class='line'><span class="n">extortion_op</span> <span class="o">=</span> <span class="no">Operation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">mission_type</span><span class="p">:</span> <span class="ss">:extortion</span><span class="p">)</span>
</span><span class='line'><span class="n">extortion_op</span><span class="o">.</span><span class="n">price</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our example we have an <strong>Operation</strong> class that needs to ask around about its <strong>mission_type</strong> before it can tell you its price. It’s easy to see that this <strong>price</strong> method just waits to change when a new kind of operation gets added. When you want to display that in your view as well, you will need to apply that change there also. (FYI, for views you can use polymorphic partials in Rails to avoid having these case statements blasted all over your view)</p>

<p><strong>Polymorphic Classes</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CounterIntelligenceOperation</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">price</span>
</span><span class='line'>    <span class="vi">@standard_fee</span> <span class="o">+</span> <span class="vi">@counter_intelligence_fee</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TerrorismOperation</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">price</span>
</span><span class='line'>    <span class="vi">@standard_fee</span> <span class="o">+</span> <span class="vi">@terrorism_fee</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RevengeOperation</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">price</span>
</span><span class='line'>    <span class="vi">@standard_fee</span> <span class="o">+</span> <span class="vi">@revenge_fee</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ExtoritionOperation</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">price</span>
</span><span class='line'>    <span class="vi">@standard_fee</span> <span class="o">+</span> <span class="vi">@extortion_fee</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">counter_intel_op</span> <span class="o">=</span> <span class="no">CounterIntelligenceOperation</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">counter_intel_op</span><span class="o">.</span><span class="n">price</span>
</span><span class='line'>
</span><span class='line'><span class="n">terror_op</span> <span class="o">=</span> <span class="no">CounterIntelligenceOperation</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">terror_op</span><span class="o">.</span><span class="n">price</span>
</span><span class='line'>
</span><span class='line'><span class="n">revenge_op</span> <span class="o">=</span> <span class="no">CounterIntelligenceOperation</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">revenge_op</span><span class="o">.</span><span class="n">price</span>
</span><span class='line'>
</span><span class='line'><span class="n">extortion_op</span> <span class="o">=</span> <span class="no">CounterIntelligenceOperation</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">extortion_op</span><span class="o">.</span><span class="n">price</span>
</span></code></pre></td></tr></table></div></figure>


<p>So instead of going down that rabbit hole, we created a bunch of operation classes that have their own knowledge how much their fees add up to the final price. We can just tell them to give us their price. You don’t always have to get rid of the original (<strong>Operation</strong>) class—only when you find that you have extracted all the knowledge it had.</p>

<p>I think the logic behind case statements is unavoidable. Scenarious where you have to go through some sort of checklist before you find the object / behavior who gets to do the job is just too common. The question is simply how are they are handled best. I’m in favor of not repeating them and use the tools object oriented programming offers me for designing discrete classes that can be swapped out easily through their interface.</p>

<ul>
<li><h3>Null Objects</h3></li>
</ul>


<p>Checking for nil all over the place is a special kind of case statement smell. Asking an object about nil is often kinda a hidden case statement. Handling nil conditionally can take the form of <strong>object.nil?</strong>, <strong>object.present?</strong>, <strong>object.try</strong> and then some sort of action in the case <strong>nil</strong> shows up at your party. Another more sneaky question is to ask an object about its truthiness—ergo if it exists or if it’s nil—and then take some action. Looks harmelss but it’s just a disguise. Don’t be fooled, ternary operators or <code>||</code> operators also fall into this category of course. Put differently, conditionals not only show up clearly indentifiable as <strong>unless</strong>, <strong>if-else</strong> or <strong>case</strong> statments. They have more subtle ways to crash your party. Don’t ask objects for their nil-ness but tell them if the object for your happy path is absent that a null object is now in charge to respond to your messages.</p>

<p>Null objects are ordinary classes. There is nothing special about them—just a “fancy name”. You extract some conditional logic related to <strong>nil</strong> and then you deal with it polymorphically. You contain that behaviour, control the flow of your app via these classes and also have objects that are open for other extensions that suite them. Think about how a <strong>Trial</strong> (<strong>NullSubscription</strong>) class could grow over time. Not only is it more DRY and yadda-yadda-yadda, it’s also way more descriptive and stable. A big benefit of using null objects is that things can’t blow up as easily. These objects respond to the same messages as the objects emulated—you don’t always need to copy the whole API over to null objects of course—which gives your app little reason to go crazy. However, note that null objects encapusulate conditional logic without completely removing it. You just find a better home for it.</p>

<p>Since having a lot of nil related action in your app is pretty contagious and unhealthy for your app I like to think of null objects as the “Nil Containment Pattern” (Please don’t sue me!). Why contagious? Because if you pass <strong>nil</strong> around, some place else in your hierarchy, another method, is sooner or later also forced to ask if <strong>nil</strong> is in town—which then leads to another round of taking counter measures to deal with such a case. Put differently, nil is not cool to hang out with because asking for its presence becomes contagious. Asking objects for <strong>nil</strong> is most likely always a symptom of poor design—no offense and don’t feel bad!—we’ve all been there. I don’t wanna go “willy-nilly” about how unfriendly nil can be but a few things need to be mentioned:</p>

<ul>
<li>Nil is a party pooper (sorry nil, had to be said).</li>
<li>Nil is not helpful because it lacks meaning.</li>
<li>Nil does not respond to anything and violates the idea of “<a href="https://en.wikipedia.org/wiki/Duck_typing">Duck Typing</a>”.</li>
<li>Nil error messages are often a pain to deal with.</li>
<li>Nil is gonna bite you—sooner or later.</li>
</ul>


<p>Overall, the scenario that an object is missing something comes up very frequently. An often cited example is an app that has a registered <strong>User</strong> and a <strong>NilUser</strong>. But since users that don’t exist is a silly concept if that person is clearly browsing your app—it’s probably cooler to have a <strong>Guest</strong> that hasn’t signed up yet. A missing subscription could be a <strong>Trial</strong>, a zero charge could be a <strong>Freebie</strong> and so on. Naming your null objects is sometimes obvious and easy, sometimes super hard. But try to stay away from naming all null objects will a leading “Null” or “No”. You can do better! Providing a little bit of context goes a long way I think. Choose a name that is more specific and meaningful, something that mirrors the actual use case. That way you communicate more clearly to other team members and to your future self of course.</p>

<p>There are a couple of ways to implement this technique. I’ll show you one that I think is straighforward and beginner-friendly. I hope it’s a good basis for understanding more involved approaches. When you repeatedly encounter some sort of conditional that deals with <strong>nil</strong> you know it’s time to simply create a new class and move that behaviour over. After that you let the original class know that this new player deals now with nothingness.</p>

<p>In the example below you can see that the <strong>Spectre</strong> class asks a bit much about <strong>nil</strong> and clutters up the code unneccessarily. It wants to make sure that we have an <strong>evil_operation</strong> before it decides to charge. Can you see the violation of “Tell-Don’t-Ask”? Another problematic part is why would Spectre need to care about the implementation of a zero price. The <strong>try</strong> method also asks sneakily if the <strong>evil_operation</strong> has a <strong>price</strong> to handle nothingness via the <strong>or</strong> (<strong>||</strong>) statement. <strong>evil_operation.present?</strong> does make the same mistake. We can simplify this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Spectre</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Model</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:credit_card</span><span class="p">,</span> <span class="ss">:evil_operation</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">evil_operation</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="n">evil_operation</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">credit_card</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">has_discount?</span>
</span><span class='line'>    <span class="n">evil_operation</span><span class="o">.</span><span class="n">present?</span> <span class="o">&amp;&amp;</span> <span class="n">evil_operation</span><span class="o">.</span><span class="n">has_discount?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">price</span>
</span><span class='line'>    <span class="n">evil_operation</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:price</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">EvilOperation</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Model</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:discount</span><span class="p">,</span> <span class="ss">:price</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">has_discount?</span>
</span><span class='line'>    <span class="n">discount</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge</span><span class="p">(</span><span class="n">credit_card</span><span class="p">)</span>
</span><span class='line'>    <span class="n">credit_card</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">price</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">NoOperation</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge</span><span class="p">(</span><span class="n">creditcard</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;No evil operation registered&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">has_discount?</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">price</span>
</span><span class='line'>    <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Spectre</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Model</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:credit_card</span><span class="p">,</span> <span class="ss">:evil_operation</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge</span>
</span><span class='line'>    <span class="n">evil_operation</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">credit_card</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">has_discount?</span>
</span><span class='line'>    <span class="n">evil_operation</span><span class="o">.</span><span class="n">has_discount?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">price</span>
</span><span class='line'>    <span class="n">evil_operation</span><span class="o">.</span><span class="n">price</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">evil_operation</span>
</span><span class='line'>    <span class="vi">@evil_operation</span> <span class="o">||</span> <span class="no">NoOperation</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">EvilOperation</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Model</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:discount</span><span class="p">,</span> <span class="ss">:price</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">has_discount?</span>
</span><span class='line'>    <span class="n">discount</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge</span><span class="p">(</span><span class="n">credit_card</span><span class="p">)</span>
</span><span class='line'>    <span class="n">credit_card</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">price</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I guess this example is simple enough to see right away how elegant null objects can be. In our case, we have a <strong>NoOperation</strong> null class that knows how to deal with a non-existing evil operation via:</p>

<ul>
<li>Handling charges of <strong>0</strong> amounts.</li>
<li>Knows that non-existing operations also have no discount.</li>
<li>Returns a little informative error string when the card is charged.</li>
</ul>


<p>We created this new class that deals with nothingness, an object that handles the absence of stuff, and swap it into the old class if <strong>nil</strong> shows up. The API is the key here because if it matches that of the original class you can swap in seamlessly the null object with the return values we need. That’s exactly what we did in the private method <strong>Spectre#evil_operation</strong>. If we have the <strong>evil_operation</strong> object we need we use that, if not, we use our <strong>nil</strong> chameleon that knows how to deal with these messages, <strong>evil_operation</strong> will never return nil anymore. Duck typing at its best.</p>

<p>Our problematic conditional logic is now wrapped in one place and our null object is in charge of the behaviour <strong>Spectre</strong> is looking for. DRY! We kinda rebuilt the same interface from the orginal object that nil couldn’t handle . Remember, nil does a poor job at receiving messages—nobody home, always! From now on it’s just telling objects what to do without asking them first for their “permission”. What’s also cool is that there was no need to touch the <strong>EvilOpertion</strong> class at all.</p>

<p>Last but now least, I got rid of the check if an evil operation is present in <strong>Spectre#has_discount?</strong> No need to make sure that an operation exists in order to get the discount. As a result of the null object, the <strong>Spectre</strong> class is much slimmer and does not share other classes responsibilities as much. A good guideline to take away from this is to not check objects if they are inclined to do something. Command them like a drill sergant. As ever so often, probably not cool in real life but good advice for Object Oriented Programming. Now give me 20!</p>

<p>In general, all the benefits from using Polymorphism instead of case statements apply for Null Objects as well. After all it’s just a special case of case statements. The same goes for drawbacks:</p>

<ul>
<li><p>Understanding the implementation and behaviour can become tricky because code is spread around and null objects are not super explicit about their existence.</p></li>
<li><p>Adding new behaviour might need to be kept in sync between null objects and their counterparts.</p></li>
<li><h3>Data Class</h3></li>
</ul>


<p>Let’s close this article with something light. This is a smell because it’s a class that has no behaviour except getting and setting its data—it’s basically nothing more than a data container without extra methods that do something with that data. That makes them passive in nature because this data is kept there to be used by other classes. And we know already that this is not an ideal scenario because it screams <em>feature envy</em>. Generally speaking, we want to have classes that have state—meaning data they take care of—as well as behaviour via methods that can act on that data without much hindrance or snooping into other classes.</p>

<p>You can start refactoring classes like these by possibly extracting the behavior from other classes that act on the data into your data class. By that you might slowly attract useful behaviour for that data and give it a proper home. It’s totally fine if these classes grow behaviour over time. Sometimes you can move a whole method over easily and sometimes you need / can extract parts of a bigger method first and then extract it into the data class. When in doubt, if you can reduce that access other classes have on your data class you should definitely go for it and move that behaviour over. Your goal should be to retire at some point the getters / setters that gave other objects access to that data. As a result you will have lower coupling between classes—which is always a win!</p>

<ul>
<li><h3>Closing Thoughts</h3></li>
</ul>


<p>See, wasn’t all that complicated! There is a lot of fancy lingo and complicated sounding techniques around code smells but hopefull you realized that smells and their refactorings also share a couple of traits that are limited in number. Code smells will never go away or become irrelevant—at least not until our bodies are enhanced by AIs who let us write the kind of quality code we’re light-years away from atm.</p>

<p>Over the course of the last three articles I presented you a good chunk of the most important / most common code smell scenarios you will ever so often bump into during your object oriented programming career. I feel like this was a good introduction for newbies to this topic and I hope the code examples were verbose enough to easily follow the thread. Once you have figured out these couple of principles for designing quality code you’ll pick up new smells and their refactorings in no time. If you have made it so far and feel you didn’t loose the big picture I think you’re ready to approach boss level OOP status.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Middleman Basics 03-Podcast Site (Part 01)]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/11/22/Middleman-03-Podcast-01/"/>
    <updated>2015-11-22T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/11/22/Middleman-03-Podcast-01</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_03_build/Middleman_Bourbon_Banner.png"></p>

<h3>Topics</h3>

<ul>
<li>Roadmap</li>
<li>Basic Blog Setup</li>
<li>LiveReload</li>
<li>Organizing Posts</li>
<li>GitHub Pages Deployment</li>
<li>Smarter Assets</li>
<li>Bourbon Setup</li>
<li><p>Normalize &amp; jQuery</p></li>
<li><h3>Roadmap</h3></li>
</ul>


<p>Let’s start with a little heads up where this is going. Over the next couple of articles I’m gonna build a small static site for a fictitious podcast called “Matcha Nerdz”—a podcast for people who wanna dive into all things powdered green tea. It will have the following pages:</p>

<ul>
<li>A page for each tag</li>
<li>A detail page for every episode</li>
<li>An index page for previous podcasts</li>
</ul>


<p>We will use Middleman for generating the static site and the Bourbon suite for all things styling. I expect / hope that you have taken a look at my articles about Bourbon, Neat and Middleman before you came here. If not, see you in a bit—unless you feel you are already prepared enough of course. I will explain what’s going on along the way but I will not cover the basics as I did previously.</p>

<p>For all things styling, I heavily rely on Bourbon for quite a while. Also I really dig the indented Sass syntax—I never really got why people are keen to write all that extra junk with the <strong>.scss</strong> syntax. The <strong>.sass</strong> syntax is the only (probably) unfamiliar bit I wanna throw at newbies because it’s really worth it and I’d kick myself writing it “sassyly”. Originally I wanted to use Slim instead of HTML and ERB but I decided against that since I don’t want to introduce too many unknowns for newbies. I want to do something similar with Slim though in the future—mainly because I feel it’s the best solution to write concise and intelligent markup out there at the moment. So raincheck. Why not Haml? Simple, Slim is more awesome!</p>

<ul>
<li><h3>Basic Blog Setup</h3></li>
</ul>


<p>Let’s initiate a new app for our podcast site:</p>

<p><strong>Shell:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman init matcha_nerdz
</span></code></pre></td></tr></table></div></figure>


<p>and of course</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>matcha_nerdz
</span></code></pre></td></tr></table></div></figure>


<p><strong>Git:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git init
</span><span class='line'><span class="c"># =&gt; to initiate new Git repo</span>
</span><span class='line'>
</span><span class='line'>git add --all
</span><span class='line'><span class="c"># =&gt; adds all the files for staging</span>
</span><span class='line'>
</span><span class='line'>git commit -m <span class="s1">&#39;Initital commit&#39;</span>
</span><span class='line'><span class="c"># =&gt; commits changes</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we add the blog template to the mix. The blog template is a good basis for our podcast site. Later we will adjust the articles to display podcast audio tracks from SoundCloud. For now, it’s just a blog though:</p>

<p><strong>Gemfile</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;middleman-blog&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>bundle <span class="nb">exec </span>middleman
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman init --template<span class="o">=</span>blog
</span></code></pre></td></tr></table></div></figure>


<p>This will update your <strong>matcha_nerdz</strong> folder. <strong>.config.rb</strong> and your index template get a little update as well. On top of that you get new templates for your feed, tags page, calendar page, an example article and a new layout. Check the output from the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>identical  .gitignore
</span><span class='line'>   update  config.rb
</span><span class='line'>    exist  <span class="nb">source</span>
</span><span class='line'><span class="nb">   </span>create  <span class="nb">source</span>/2012-01-01-example-article.html.markdown
</span><span class='line'>   create  <span class="nb">source</span>/calendar.html.erb
</span><span class='line'>   create  <span class="nb">source</span>/feed.xml.builder
</span><span class='line'>   update  <span class="nb">source</span>/index.html.erb
</span><span class='line'>   create  <span class="nb">source</span>/layout.erb
</span><span class='line'>   create  <span class="nb">source</span>/tag.html.erb
</span><span class='line'>    exist  <span class="nb">source</span>/stylesheets
</span><span class='line'>    exist  <span class="nb">source</span>/javascripts
</span><span class='line'>    exist  <span class="nb">source</span>/images
</span></code></pre></td></tr></table></div></figure>


<p><strong>Git:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Adds blog template&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What you can do now is create new articles via the command line. Pretty handy if you ask me if you can spare yourself typing all these dates and stuff.</p>

<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman article <span class="s1">&#39;My new fancy second article&#39;</span>
</span><span class='line'><span class="c">#=&gt; create  source/2015-11-22-my-wonderful-second-article.html.markdown</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates a new markdown article under <strong>/source</strong>. Not optimal storage-wise but we’ll get there. Fire up your server to see your first example blog article:</p>

<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman
</span><span class='line'><span class="c">#or</span>
</span><span class='line'>middleman server
</span></code></pre></td></tr></table></div></figure>


<p>Next we need have some housekeeping to do. The blog template created a new layout under <strong>source/layout.erb</strong>. We wanna delete the orginal one in <strong>source/layouts/layout.erb</strong> and move the new one in there:</p>

<p><strong>Shell:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rm <span class="nb">source</span>/layouts/layout.erb
</span><span class='line'>mv <span class="nb">source</span>/layout.erb <span class="nb">source</span>/layouts/
</span></code></pre></td></tr></table></div></figure>


<p>We also need to update the new <strong>layout.erb</strong> with stuff that was deleted in the layout file. Add this to your <strong>head</strong> tag:</p>

<p><strong>source/layouts/layout.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;meta content=&quot;IE=edge,chrome=1&quot; http-equiv=&quot;X-UA-Compatible&quot;&gt;</span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s2">&quot;normalize&quot;</span><span class="p">,</span> <span class="s2">&quot;all&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span>  <span class="s2">&quot;all&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Most importantly, this makes sure that your JS and style assets are avaiable.</p>

<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rm <span class="nb">source</span>/layout.erb
</span><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Moves new layout into /layouts</span>
</span><span class='line'><span class="s1">               Adds asset links</span>
</span><span class='line'><span class="s1">               Removes old layout&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>LiveReload</h3>

<p>To make our lives a tad more convenient we’ll add LiveReload to the mix. We need the gem and then activate it in your <strong>config.rb</strong> file:</p>

<p><strong>Gemfile</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;middleman-livereload&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>config.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#uncomment</span>
</span><span class='line'><span class="n">activate</span> <span class="ss">:livereload</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Activates LiveReload&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this activated, restart your server and your page refreshes automatically whenever you change content on the page, styles or behaviour. Life saver, trust me!</p>

<h3>Attention!</h3>

<p>Word of caution. If you have another local server running, LiveReload may not play ball. So you’d need to kill that other server for now. Weird bug to hunt down if you don’t expect ports being already taken. Also, sometimes killing the Wi-Fi and restarting the server solved local host issues. But to be honest I don’t remember if I ran into that issue in the past with Middleman or Jekyll. Anyway, keep it in mind.</p>

<h3>Organizing Posts</h3>

<p>When you look where articles are stored right now, you’ll quickly realize that this organization directly under <strong>/source</strong> becomes very quickly very tedious. Couple of articles and you drown in posts. No need to be that messy. What we can do is create a dirctory under /source for all your posts, move your article(s) in there and let Middleman know where to find them.</p>

<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir <span class="nb">source</span>/posts
</span><span class='line'>mv <span class="nb">source</span>/2012-01-01-example-article.html.markdown <span class="nb">source</span>/posts/
</span></code></pre></td></tr></table></div></figure>


<p>Then we add <strong>/posts</strong> as a source for your blog articles:</p>

<p><strong>config.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">blog</span><span class="o">.</span><span class="n">sources</span> <span class="o">=</span> <span class="s2">&quot;posts/:year-:title.html&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rm <span class="nb">source</span>/2012-01-01-example-article.html.markdown
</span><span class='line'><span class="c"># Removes moved file from repo</span>
</span><span class='line'>
</span><span class='line'>git add --all
</span><span class='line'>gco -m <span class="s1">&#39;Adds new folder for posts and adds source in config.rb&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s it. Nothing should have changed and you should see the example article as before. Storage of posts however is a lot more sane. What’s also cool is that if you create new articles via the command line, your new posts will get stored in <strong>/post</strong> automatically. Awesome!</p>

<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman article <span class="s1">&#39;My awesome 3rd article&#39;</span>
</span><span class='line'><span class="c"># =&gt; create  source/posts/2015-my-awesome-3rd-article.html.markdown</span>
</span></code></pre></td></tr></table></div></figure>


<h3>GitHub Pages Deployment</h3>

<p>For me, pushing static sites to GitHub Pages is such a convenient solution that I don’t wanna put you through deploying via Heroku or Amazon’s S3 service. Let’s keep it simple!</p>

<p><strong>Gemfile</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;middleman-deploy&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle
</span></code></pre></td></tr></table></div></figure>


<p>We need to add a deploy block to <strong>config.rb</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">activate</span> <span class="ss">:deploy</span> <span class="k">do</span> <span class="o">|</span><span class="n">deploy</span><span class="o">|</span>
</span><span class='line'>  <span class="n">deploy</span><span class="o">.</span><span class="n">method</span> <span class="o">=</span> <span class="ss">:git</span>
</span><span class='line'>  <span class="n">deploy</span><span class="o">.</span><span class="n">branch</span> <span class="o">=</span> <span class="s1">&#39;gh-pages&#39;</span>
</span><span class='line'>  <span class="n">deploy</span><span class="o">.</span><span class="n">build_before</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order for GitHub Pages to find your CSS and JS assets you need to activate the following in <strong>config.rb</strong> as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">configure</span> <span class="ss">:build</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">activate</span> <span class="ss">:relative_assets</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then create a repo on GitHub, add the remote and deploy:</p>

<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add origin https://github.com/yourusername/repositoryname.git
</span><span class='line'>
</span><span class='line'>middleman deploy
</span></code></pre></td></tr></table></div></figure>


<p>Boom! Your site is live under <code>yourusername.github.io/projectname</code> and your assets should be sorted out. I love this process—couldn’t be easier and more user friendly. Great job GitHub!</p>

<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>gco -m <span class="s1">&#39;Adds setup for GitHub Pages deployment&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Smarter Assets</h3>

<p>In the last step before we get into the Bourbon setup, I’d like to get rid of the styles that come with Middleman and optimize the assets for a better performance in the browser—asset minification and concatenation. Go to <strong>source/stylesheets/all.css</strong> and delete it’s content. Just keep the first line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@charset</span> <span class="s2">&quot;utf-8&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Removes unneccessary Middleman styles&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we want to activate a couple of options to optimize for performance in <strong>config.rb</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">configure</span> <span class="ss">:build</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">activate</span> <span class="ss">:asset_hash</span>
</span><span class='line'>  <span class="n">activate</span> <span class="ss">:minify_javascript</span>
</span><span class='line'>  <span class="n">activate</span> <span class="ss">:css</span>
</span><span class='line'>  <span class="n">activate</span> <span class="ss">:gzip</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Activates performance optimizations&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let me quickly explain what we did here:</p>

<ul>
<li><strong>:gzip</strong></li>
</ul>


<p>At the moment, gzip is the most popular and effective compression method. It’s compression algorithm finds similar strings within a file and compresses them. For HTML, which is full of white space and matching tags, this is very effective and adds up to reducing the HTTP response size by a whopping 70%. Activating this, not only gzips your HTML, but also CSS and JSS files. During build, Middleman creates your files as usual but also duplicates them with a <strong>.gz</strong> version. When a browser gets in touch with your files, it can choose if it can serve gzip compressed files or regular ones. gzipping is supported heavily by web and mobile browsers.</p>

<ul>
<li><strong>:minify_css</strong></li>
</ul>


<p>This process strips out all unneccessary junk from your styles and reduces their file size significantly. Bascially, your CSS becomes one big blob—optimized for being read by a machine. Definitely not friendly on the eyes.</p>

<ul>
<li><strong>:minify_javascript</strong></li>
</ul>


<p>Same as <strong>minify_css</strong> but a bit more involved and sophisticated.</p>

<ul>
<li><strong>:asset_hash</strong></li>
</ul>


<p>This activates hashing of your assets. It means that your asset filenames change and receive some extra information—during the build process—that informs browsers if they need to re-download assets or not. Now, the name of a file is dependent on the contents of that file. Hashed assets get cached by browsers and your sites get rendered faster. Another word for this is “fingerprinting” because it provides a simple solution to inform browsers whether or not two versions of a file are indentical. The deployment date does not matter—only the contents. Take a look below how hashed assets’ files look like:</p>

<p><strong>Screenshots</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_03_build/asset_hash_css.png"></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_03_build/asset_hash_images.png"></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_03_build/asset_hash_js.png"></p>

<p>Looks nasty, but now your images, stylesheets and JavaScript files get a unique name through this added “random” code—what is called a (unique) hash. Every time you change an asset and go through the build process again, this hash changes which in turn signals to browsers that then, and only then, they need to re-download that particular file. The files then sorta expired. This is called “cache busting”. Btw, you can refer to your files the same way as before but during build the references in your HTML and what not get updated to use these hashed names. Take a look:</p>

<p><strong>/build/index.html(.gz)</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&#39;X-UA-Compatible&#39;</span> <span class="na">content=</span><span class="s">&#39;IE=edge;chrome=1&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>       <span class="nt">&lt;meta</span> <span class="na">content=</span><span class="s">&quot;IE=edge,chrome=1&quot;</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Blog Title<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;alternate&quot;</span> <span class="na">type=</span><span class="s">&quot;application/atom+xml&quot;</span> <span class="na">title=</span><span class="s">&quot;Atom Feed&quot;</span> <span class="na">href=</span><span class="s">&quot;/feed.xml&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;stylesheets/normalize-6197e73d.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="nt">/&gt;&lt;link</span> <span class="na">href=</span><span class="s">&quot;stylesheets/all-0355b587.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;javascripts/all-da39a3ee.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'>  ...
</span></code></pre></td></tr></table></div></figure>


<p>See, in your <strong>/build</strong> folder, JS and CSS files get referenced with the hashed asset names automatically. As a result of this hashing business, when you go through different pages in the same session or revisit a page again later, these assets have been cached and don’t need to be requested again—only until you change something. This process cuts down your number of requests by a staggering amount. Isn’t that cool? All of that with one line of code in <strong>config.rb</strong> and some <em>Sprockets</em> wizardry. Booyakasha!</p>

<p>The key with all these asset optimization techniques is to minimize the number of requests and the request size of your files / assets. Middleman offers great performance boosts right out the box without any work on your end really. Just activate this stuff and sleep tight. GitHub Pages has everthing gzipped and minified out of the box btw. Doesn’t hurt though to make sure everything is in place—especially if you later decide to host your app somewhere else. By then, you don’t need to think about solving this problem again.</p>

<p>Let’s have a look where we’re at. Your index page should look pretty barebones now:</p>

<p><strong>Screenshot</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_03_build/matchanerdz_screen_01.png"></p>

<ul>
<li><h3>Bourbon Setup</h3></li>
</ul>


<p>For this project I want to use three gems from Bourbon:</p>

<ul>
<li>Bourbon</li>
<li>Neat</li>
<li>Bitters</li>
</ul>


<p>Let’s add them to our <strong>Gemfile</strong> and bundle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;bourbon&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;neat&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;bitters&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle
</span></code></pre></td></tr></table></div></figure>


<p>Bourbon and Neat are now good to go (almost). Bitters needs to install a few things first though. You need to change into your stylesheets directory and activate a generator that places a bunch of Bitters files in a <strong>/base</strong> folder.</p>

<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd source</span>/styleheets
</span><span class='line'>bitters install
</span></code></pre></td></tr></table></div></figure>


<p>Take a look what we got after this:</p>

<p><strong>Screenshot</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_03_build/install_bitters_base.png"></p>

<p>Bitters is something like a baseline for your designs. It gives you a couple of sane designs for stuff like buttons, type, forms, error messages and so on. Bitters also prepared a <strong>grid-settings</strong> file for your <strong>Neat</strong> grid which we also have to set up by uncommenting the following line in <strong>source/stylesheets/base/_base.scss</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@import</span> <span class="s2">&quot;grid-settings&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To complete our Bourbon settings for now I’d like to add the following variables to our grid-settings. They lay the groundwork for sizing our grid and activate a visual grid that helps us to better align our design.</p>

<p><strong>/source/stylesheets/base/_grid-settings.scss</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nv">$column</span><span class="o">:</span> <span class="mi">90</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'><span class="nv">$gutter</span><span class="o">:</span> <span class="mi">30</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'><span class="nv">$grid-columns</span><span class="o">:</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'><span class="nv">$max-width</span><span class="o">:</span> <span class="mi">1200</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$visual-grid</span><span class="o">:</span> <span class="n-Pseudo">true</span><span class="p">;</span>
</span><span class='line'><span class="nv">$visual-grid-index</span><span class="o">:</span> <span class="n">back</span><span class="p">;</span>
</span><span class='line'><span class="nv">$visual-grid-opacity</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.15</span><span class="p">;</span>
</span><span class='line'><span class="nv">$visual-grid-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final step to make this work is rename <strong>/stylesheets/all.css</strong> to <strong>/stylesheets.all.sass</strong> and import our Bourbon files.(Since we switched to the indented Sass syntax, we also need to kill the semicolon at the end of the <strong>@charset</strong> line.)</p>

<p><strong>all.css.scss</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@charset</span> <span class="s2">&quot;utf-8&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;bourbon&#39;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;base/base&#39;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;neat&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We import Bitters’ base file here right after Bourbon because we need access to Neat’s <strong>grid-settings</strong> file—which is in the <strong>/base</strong> folder—before we import Neat.</p>

<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Sets up Bourbon and activates grid settings&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s have a look! You can see the red visual grid and also that thanks to Bitters, our typography already improved a bit beyond browser defaults.</p>

<p><strong>Screenshot</strong></p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_03_build/bourbon_installed_visual_grid.png"></p>

<ul>
<li><h3>Normalize &amp; jQuery</h3></li>
</ul>


<p>Let’s get this out of the way also, shall we? Middleman comes with a <a href="https://necolas.github.io/normalize.css/">Normalize</a> file which gets not imported into <strong>all.css</strong> by default. That’s one unneccessary asset request we can easily get rid of. Rename <strong>source/stylesheets/normalize.css</strong> to <strong>source/stylesheets/_normalize.css.scss</strong> first. Now we have a partial that we need to import right at the top after <strong>@charset</strong> in <strong>source/stylesheets/all.sass</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@charset</span> <span class="s2">&quot;utf-8&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;normalize&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;bourbon&#39;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;base/base&#39;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;neat&#39;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;normalize&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In case you’re wondering about what <em>Normalize</em> does, think of it as leveling the playing field between the default styles that browsers like to add. One browser likes to add padding here, another has useless margins there, etc. Projects like Normalize try to reset that behaviour so that all elements / designs get rendered more consistently across browsers.</p>

<p>One thing we shouldn’t overlook is the link for our stylesheets in our layout. Since we’re using Sass partials that all get imported into a final, “global” stylesheet, we do not need a link to <strong>normalize.css</strong> anymore—a link to <strong>all.sass</strong> is enough:</p>

<p><strong>source/layouts/layout.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s2">&quot;all&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rm <span class="nb">source</span>/stylesheets/normalize.css
</span><span class='line'>git add --all
</span><span class='line'>git commit -m <span class="s1">&#39;Imports normalize partial properly&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, before we take a break, we need to add jQuery which we’ll need later on.</p>

<p><strong>Gemfile</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;jquery-middleman&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle
</span></code></pre></td></tr></table></div></figure>


<p>Since I wanna use CoffeeScript for this project, we need to rename <strong>source/javascripts/all.js</strong> to <strong>source/javascripts/all.coffee</strong>. In there we require jQuery for Sprockets / Asset Pipeline and we’re all set.</p>

<p><strong>all.coffee</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require jquery</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Git</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rm <span class="nb">source</span>/javascripts/all.js
</span><span class='line'>git add -all
</span><span class='line'>git commit <span class="s1">&#39;Adds jQuery to the Mix</span>
</span><span class='line'><span class="s1">            Renames gobal js file to coffee&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman deploy
</span></code></pre></td></tr></table></div></figure>


<p>After deploying, open your site on GitHub Pages to see if everyting works as expected. Nice job!</p>

<ul>
<li><h3>Break</h3></li>
</ul>


<p>Let’s take a break. We got quite a few boring setup steps out of the way with this one. Hope you got a clear picture what you need for a solid basis when you start a new Middleman project. Next we’ll expand on what we’ve built here and continue working towards a decent site for our podcast.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Middleman Basics 02]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/11/13/Middleman-Bascis-02/"/>
    <updated>2015-11-13T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/11/13/Middleman-Bascis-02</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/3Stooges_600_mirrored.jpg"></p>

<h3>Topics</h3>

<ul>
<li>Data Files</li>
<li>Pretty URLs</li>
<li>Asset Pipleline</li>
<li><p>Project Templates</p></li>
<li><h3>Data Files</h3></li>
</ul>


<p>So you have already learned how to play with data that you stored in the triple-hyphen-delimited frontmatter sections of individual pages. You can write separate data files in YAML or JSON and put them in a <strong>/data</strong> directory. I guess this is mostly useful if you have more complex sites with data that rarely changes and where you don’t want to maintain that data directly in your HTML.</p>

<p>Let’s say you have the rights to sell all James Bond movies. We could put a list of them in a data file and iterate over them in our view. If we’d need to change or update that data when a new movie is available you’d only need to apply that change in your <strong>.yaml</strong> or <strong>.json</strong> data file. I would not recommend doing that for data that is in any way complex—to a degree doable, but feels very iffy and wrong.</p>

<p><strong>/data/bond.yaml</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">movies</span><span class="p">:</span>
</span><span class='line'><span class="o">-</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Dr. No&quot;</span>
</span><span class='line'>  <span class="ss">year</span><span class="p">:</span>  <span class="s2">&quot;1962&quot;</span>
</span><span class='line'>  <span class="ss">text</span><span class="p">:</span>  <span class="s2">&quot;John Strangways, the British Intelligence (SIS) Station Chief in Jamaica, is killed. In response, British agent James Bond—also known as 007—is sent to Jamaica to investigate the circumstances. During his investigation Bond meets Quarrel, a Cayman fisherman, who had been working with Strangways around the nearby islands to collect mineral samples. One of the islands was Crab Key, home to the reclusive Dr. No.&quot;</span>
</span><span class='line'>  <span class="ss">image</span><span class="p">:</span> <span class="s2">&quot;bond_movie_01.png&quot;</span>
</span><span class='line'><span class="o">-</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;From Russia with Love&quot;</span>
</span><span class='line'>  <span class="ss">year</span><span class="p">:</span>  <span class="s2">&quot;1963&quot;</span>
</span><span class='line'>  <span class="ss">text</span><span class="p">:</span>  <span class="s2">&quot;SPECTRE&#39;s expert planner Kronsteen devises a plot to steal a Lektor cryptographic device from the Soviets and sell it back to them while exacting revenge on Bond for killing their agent Dr. No; ex-SMERSH operative Rosa Klebb is in charge of the mission. She recruits Donald &quot;</span><span class="no">Red</span><span class="s2">&quot; Grant as an assassin and Tatiana Romanova, a cipher clerk at the Soviet consulate in Istanbul, as the unwitting bait.&quot;</span>
</span><span class='line'>  <span class="ss">image</span><span class="p">:</span> <span class="s2">&quot;bond_movie_02.png&quot;</span>
</span><span class='line'><span class="o">-</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Goldfinger&quot;</span>
</span><span class='line'>  <span class="ss">year</span><span class="p">:</span>  <span class="s2">&quot;1964&quot;</span>
</span><span class='line'>  <span class="ss">text</span><span class="p">:</span>  <span class="s2">&quot;Bond is ordered to observe bullion dealer Auric Goldfinger: he sees Goldfinger cheating at cards and stops him by distracting his employee, who is subsequently killed by Goldfinger&#39;s Korean manservant Oddjob. Bond is then instructed to investigate Goldfinger&#39;s gold smuggling and he follows the dealer to Switzerland. Bond is captured when he reconnoitres Goldfinger&#39;s plant and is drugged; he is taken to Goldfinger&#39;s Kentucky stud farm and is imprisoned. He escapes briefly to witness Goldfinger&#39;s meeting with U.S. mafiosi, who have brought the materials he needs for an operation to rob Fort Knox.&quot;</span>
</span><span class='line'>  <span class="ss">image</span><span class="p">:</span> <span class="s2">&quot;bond_movie_03.png&quot;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>source/bond-movies.html.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;h2&gt;Bond movies&lt;/h2&gt;</span>
</span><span class='line'><span class="x">&lt;ol&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="n">data</span><span class="o">.</span><span class="n">bond</span><span class="o">.</span><span class="n">movies</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">movie</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;li&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">image_tag</span> <span class="n">movie</span><span class="o">.</span><span class="n">image</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;h3&gt;</span><span class="cp">&lt;%=</span> <span class="n">movie</span><span class="o">.</span><span class="n">title</span> <span class="cp">%&gt;</span><span class="x">&lt;/h3&gt;</span>
</span><span class='line'><span class="x">    &lt;h6&gt;</span><span class="cp">&lt;%=</span> <span class="n">movie</span><span class="o">.</span><span class="n">year</span> <span class="cp">%&gt;</span><span class="x">&lt;/h6&gt;</span>
</span><span class='line'><span class="x">    &lt;p&gt; </span><span class="cp">&lt;%=</span> <span class="n">movie</span><span class="o">.</span><span class="n">text</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'><span class="x">  &lt;/li&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/ol&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the advantages of these data files is surely that they aren’t very susceptible to getting hacked. Even better, your <strong>/data</strong> directory with all the YAML or JSON data won’t get pushed to your branch that is responsible for hosting—like your <strong>gh-pages</strong> branch if you host your Middleman app on GitHub Pages. During the <strong>build</strong> phase, your data gets injected into your templates localy before it gets deployed. After that, the data in your views is just plain static HTML. Pretty cool!</p>

<p>A word about naming conventions here. When you have data files in a <strong>data</strong> directory you get access to a <strong>data</strong> object. Middleman then creates “objects” for every <strong>.yml</strong>, <strong>.yaml</strong> or <strong>.json</strong> file which you can access through the inital <strong>data</strong> object by chaining it on. Lastly, the object stored in your data files are added on to that—which in turn give you access to the attributes you have stored on that object. In our case, we have a <strong>movies</strong> YAML “object” with the attributes <strong>title</strong>, <strong>year</strong>, <strong>text</strong> and <strong>image</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">data</span><span class="o">.</span><span class="n">data_file_name</span><span class="o">.</span><span class="n">yaml_or_json_object</span><span class="o">.</span><span class="n">attribute</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">data</span><span class="o">.</span><span class="n">bond</span><span class="o">.</span><span class="n">movies</span><span class="o">.</span><span class="n">image</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">data</span><span class="o">.</span><span class="n">bond</span><span class="o">.</span><span class="n">movies</span><span class="o">.</span><span class="n">title</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">data</span><span class="o">.</span><span class="n">bond</span><span class="o">.</span><span class="n">movies</span><span class="o">.</span><span class="n">year</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">data</span><span class="o">.</span><span class="n">bond</span><span class="o">.</span><span class="n">movies</span><span class="o">.</span><span class="n">text</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have subdirectories, you just need to tuck them on. Let’s say you have your bond movies data file under a <strong>spy_movies</strong> directory (<strong>/data/spy_movies/bond.yaml</strong>) You’d now access it like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">data</span><span class="o">.</span><span class="n">spy_movies</span><span class="o">.</span><span class="n">bond</span><span class="o">.</span><span class="n">movies</span><span class="o">.</span><span class="n">title</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly I should add that storing it in JSON might be cooler but all the excess commas, brackets and braces turn me off tbh. Not only in data files but in frontmatter sections as well. Up to you what suits you best of course. See for yourself:</p>

<p><strong>some_file.yaml</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">bond_girls</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Strawberry Fields</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Jill Masterson</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Tiffany Case</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>some_file.json</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;bond_girls&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;Strawberry Fields&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Jill Masterson&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Tiffany Case&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>Pretty URLs</h3></li>
</ul>


<p>If you have a file like <strong>source/bond-movies.html.erb</strong> it will end up as <a href="http://appname.com/bond-movies.html.">http://appname.com/bond-movies.html.</a> During the build process we loose the <strong>.erb</strong> file extension and end up with the final <strong>html</strong> version of that page which is mirrored in the URL. That’s alright, normal stuff. For fancier URLs like <a href="http://appname.com/bond-movies">http://appname.com/bond-movies</a> we gotta work a little.</p>

<p>You need to activate the <strong>Directory Indexes</strong> extension in your config.rb. This creates a folder for every <strong>.html</strong> file. During <strong>middleman build</strong> the finished page ends up as the index file of that folder—meaning that as an index file its extension won’t need to show up in the URL. If you paid attention, you might have already seen this at work with the standard <strong>index.html</strong> file that gets created for every Middleman project as a landing page. It also does not show up in the final URL. Fire up your server and see for yourself.</p>

<p><strong>config.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">activate</span> <span class="ss">:directory_indexes</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s see what happened after <strong>middleman build</strong> to your <strong>bond-movies.html.erb</strong> file if you activated that extension. Middleman created a <strong>build/bond-movies</strong> folder and your original filename changed to <strong>index.html</strong> => <strong>build/bond-movies/index.html</strong>.</p>

<p><strong>Shell output</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>create  build/bond-movies/index.html
</span></code></pre></td></tr></table></div></figure>


<p>There is one little caveat though. Before you activated pretty URLs you could rely on using the assets path. Now with directory indexes in place you need to supply assets with their full absolute path. So calling an image just by its name for example won’t fly anymore.</p>

<p>If for some reason you want to override the behaviour of that extension for a particular file you can.</p>

<p><strong>config.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">page</span> <span class="s2">&quot;/bond-movies.html&quot;</span><span class="p">,</span> <span class="ss">:directory_index</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Shell output</strong> if you change it back for <strong>bond-movies.html.erb</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>create  build/bond-movies.html
</span><span class='line'>remove  build/bond-movies/index.html
</span><span class='line'>remove  build/bond-movies
</span></code></pre></td></tr></table></div></figure>


<p>Now its’ URL is back to normal for that file again. (<a href="http://appname.com/bond-movies.html">http://appname.com/bond-movies.html</a>)</p>

<p>Btw, you can opt-out of the directory index naming scheme locally in your individual pages’ frontmatter as well.</p>

<p><strong>source/bond-movies.html.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">---</span>
</span><span class='line'><span class="x">directory_index: false</span>
</span><span class='line'><span class="x">---</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;h1&gt;Bond movies&lt;/h1&gt;</span>
</span><span class='line'><span class="x">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you wanna build that structure with folder and their respective index files yourself, Middleman is not gonna mess with you. It functions the same way and middleman ignores them if you mix and match that approach.</p>

<ul>
<li><h3>Asset Pipleline</h3></li>
</ul>


<p>I wanna cut to the chase with this one and only show you the pieces that I think are really relevant about the asset pipeline. You can do stuff with Bower and Compass for example but since I’m personally not a huge fan I spare us both the time. O.K. then.</p>

<p>The “asset pipleline” is Rails lingo imported into Middleman and under the hood a gem called <a href="https://github.com/sstephenson/sprockets">Sprockets</a> does all the heavy lifting. It helps you with handling dependency management, combining assets plus with minification—which helps slimming down your assets significantly. A few helper methods to concisely reference assets are also at your disposal. Beyond that you are also provided with the means to write Sass and CoffeeScript code—right out of the box. Awesome!</p>

<h3>Concatenation</h3>

<p>Concatenation is one of the most important features of the asset pipline. Instead of having a lot of separate HTML requests for every CSS and JS file, you can reduce them drastically by concatenating them into one or a handful of files. The fewer requests you cause the faster your application will load. Simple math.</p>

<h3>JS Concatenation</h3>

<p>By default, Sprockets will press all JS files into a single <strong>.js</strong> file. After <strong>middleman build</strong>, this file will be under <strong>/build/javascripts/all.js</strong>. The same goes for your CSS. After the build process, you’ll have all Sass files concatenated together in <strong>build/stylesheets/all.css</strong>.</p>

<p>You combine your JS assets by using partials—whoose filenames start with an underscore—for all your JS files and then <strong>require</strong> them at the very top in your <strong>source/javascripts/all.js</strong> file (Files with an added <strong>.coffee</strong> extension work exactly the same). As you can imagine order does matter for this process.</p>

<p><strong>source/javascript/all.js</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require &quot;_jquery&quot;</span>
</span><span class='line'><span class="c1">//= require &quot;_lib_code&quot;</span>
</span><span class='line'><span class="c1">//= require &quot;_animations&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Screenshot</strong>:</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_02/source_javascripts_screenshot.png"></p>

<p>When you take a look into your new <strong>/build</strong> directory, you’ll only find one <strong>.js</strong> file under <strong>/javascripts</strong> which “digested” the rest of your files—namely <strong>all.js</strong>.</p>

<p><strong>Screenshot</strong>:</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_02/build_javascripts_screenshot.png"></p>

<h3>CSS Concatenation</h3>

<p>For your Sass code its bascially the same but you should use Sass’s <strong>@import</strong> for importing your partials—instead of require from Sprockets. Again, place the “required” files at the very top and order matters here as well. Unlike requiring JS partials, you leave off the underscore from the partial name when you import Sass partials.</p>

<p><strong>/source/stylesheets/all.css.scss</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&#39;normalize&#39;;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;header&#39;;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;navigation&#39;;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;footer&#39;;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Screenshot</strong>:</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_02/source_stylesheets_screenshot.png"></p>

<p><strong>Screenshot</strong>:</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_02/build_stylesheets_screenshot.png"></p>

<h3>Compression / Minification</h3>

<p>Another cool feature of sprockets is compression of these files—also called minification. This process cuts out a lot of the fat like getting rid of unnecessary whitespace and comments. People also call this process <em>uglify</em>—and of course there is a gem called <a href="https://github.com/lautis/uglifier">uglifier</a> which does a beautiful job at this. Names like this makes me love programming even more. Compared to JS asset minification CSS uglification is not that complicated. FYI, behind the scenes , the JS part is a bit more involved and needs more finesse.</p>

<p>To get started you’ll need to add the following to your <strong>config.rb</strong> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">configure</span> <span class="ss">:build</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">activate</span> <span class="ss">:minify_css</span>
</span><span class='line'>  <span class="n">activate</span> <span class="ss">:minify_javascript</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually you just need to uncomment these lines under your <strong>:build</strong> block. The next time you use <strong>middleman build</strong> the assets in your <strong>/build</strong> folder will all be uglified and slim. Below are two small examples how this code actually ends up looking:</p>

<p><strong>Minified CSS under /build/stylesheets/all.css</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span><span class="p">{</span><span class="k">background-color</span><span class="o">:</span><span class="m">#d0e4fe</span><span class="p">}</span><span class="nt">h1</span><span class="p">{</span><span class="k">color</span><span class="o">:</span><span class="nb">orange</span><span class="p">;</span><span class="k">text-align</span><span class="o">:</span><span class="k">center</span><span class="p">}</span><span class="nt">p</span><span class="p">{</span><span class="k">font-family</span><span class="o">:</span><span class="s2">&quot;Times New Roman&quot;</span><span class="p">;</span><span class="k">font-size</span><span class="o">:</span><span class="m">20px</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Minified JS under /build/javascripts/all.js</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">switch</span><span class="p">((</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getDay</span><span class="p">()){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="nx">day</span><span class="o">=</span><span class="s2">&quot;Sunday&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="nx">day</span><span class="o">=</span><span class="s2">&quot;Monday&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="nx">day</span><span class="o">=</span><span class="s2">&quot;Tuesday&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">3</span><span class="o">:</span><span class="nx">day</span><span class="o">=</span><span class="s2">&quot;Wednesday&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">4</span><span class="o">:</span><span class="nx">day</span><span class="o">=</span><span class="s2">&quot;Thursday&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">5</span><span class="o">:</span><span class="nx">day</span><span class="o">=</span><span class="s2">&quot;Friday&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">6</span><span class="o">:</span><span class="nx">day</span><span class="o">=</span><span class="s2">&quot;Saturday&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without the asset pipleline you’d have to set up your own thing to write your JS and CSS via a higher-level language like CoffeeScript and Sass. I believe for beginners this setup part can be a pain and therefore the asset pipleline helps newbies to get going and play with cool toys faster. Doing this by hand is a good exercise and important to grasp—but not right away. CoffeeScript and Sass are supported by default.</p>

<p>Awesome, minified, faster websites with fewer requests right out of the gate without any extra work. Take that 2010!</p>

<h3>Asset Pipeline Helpers</h3>

<p>For your Sass files you have four helpers at your disposal:</p>

<ul>
<li>image_path()</li>
<li>font_path()</li>
<li>image_url()</li>
<li>font_url()</li>
</ul>


<p>Because you followed conventions so far you can use these helpers to prepend the correct directory path to your assets.</p>

<p>Some Sass file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nt">image_path</span><span class="o">(</span><span class="s1">&#39;</span><span class="s2">logo.png&#39;</span><span class="o">)</span>
</span><span class='line'><span class="na">#</span><span class="o"> =&gt;</span> <span class="n">images</span><span class="o">/</span><span class="n">logo</span><span class="o">.</span><span class="n">png</span>
</span><span class='line'>
</span><span class='line'><span class="nt">image_path</span><span class="o">(</span><span class="s1">&#39;</span><span class="s2">nested_folder/some.png&#39;</span><span class="o">)</span>
</span><span class='line'><span class="na">#</span><span class="o"> =&gt;</span> <span class="n">images</span><span class="o">/</span><span class="n">nested_folder</span><span class="o">/</span><span class="n">some</span><span class="o">.</span><span class="n">png</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Import Path</h3>

<p>The asset pipeline uses <em>import paths</em> via Sprockets for your assets. By default <strong>:js_dir</strong> and <strong>:css_dir</strong> are already added to that path. That means that files put in <strong>/source/javascripts</strong> and <strong>/source/stylesheets</strong> are available and automatically imported. On the other hand, if you have assets that you wanna keep in other directories you can also add them to the import path like this:</p>

<p><strong>config.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sprockets</span><span class="o">.</span><span class="n">append_path</span> <span class="s1">&#39;/some/other/assets_folder/&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, other assets in <strong>source/some/other/assets_folder/other.css</strong> are also at Middleman’s disposal via this path. Same goes for <strong>.js</strong> files as well of course.</p>

<ul>
<li><h3>Project Templates</h3></li>
</ul>


<p>Middleman comes with a couple of handy project templates that you should at least know about. These templates give you a good starting point when you initiate a new Middleman app for example. You can add these templates at any time later as well though.</p>

<ul>
<li><strong>SMACSS</strong> Template</li>
<li><strong>Mobile</strong> Boilerplate Template</li>
<li><strong>HTML5</strong> Boilerplate  Template</li>
<li><strong>Blog</strong> Template(needs extra gem)</li>
</ul>


<p>You can use them like this:</p>

<p><strong>Shell</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman init your_fancy_app --template<span class="o">=</span>smacss
</span></code></pre></td></tr></table></div></figure>


<p>The template will provide you with all the files and folders that it needs. If you already have an app and want to add a template you use the same command without mentioning your app’s name. Same deal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman init --template<span class="o">=</span>smacss
</span></code></pre></td></tr></table></div></figure>


<p>Now comes my favorite part of Middleman. Its super straightforward to build your own templates and reuse them whenever you like. You start by creating a <strong>~/.middleman</strong> folder in your root directory (Don’t forget the dot in front of the name). Within that directory you create new folders for your templates. For example <strong>/.middleman/podcast</strong> would be a <em>podcast</em> template. Then you fill this podcast dirctory with all the files and folders you need. For example, if you want to have additional stylesheets available for your Middleman app then you need to simulate Middleman’s filepath to make it super easy to use them.</p>

<p>In the screenshot below I have prepared a dummy example that has a couple of files that I might need for every project and put them in a <strong>bourbon</strong> folder. Now I have a bourbon template.</p>

<p><strong>Screenshot for ~/.middleman/bourbon</strong>:</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_02/bourbon_template_screenshot.png"></p>

<p>Since I simulated Middleman’s file structure, these stylesheets will show up exactly where I need them after I initiated that template. After initiating the template, my files are now under <strong>/source/stylesheets</strong> and also ready to be imported into my <strong>/source/stylesheets/all.css.scss</strong> file.</p>

<p><strong>Screenshot for /middleman_app/source/stylesheets</strong>:</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/basics_02/source_bourbon_screenshot.png"></p>

<p>Since I already made my template styles partials its business as usual:</p>

<p><strong>source/stylesheets/all.css.scss</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@import</span> <span class="s1">&#39;</span><span class="s2">bourbon_mixins/mixins&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">@import</span> <span class="s1">&#39;</span><span class="s2">bourbon_neat/grids&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">@import</span> <span class="s1">&#39;</span><span class="s2">bourbon_refills/cards&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nc">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boom! Finished! One thing you should be careful about though. When we use <strong>middleman build</strong> now to create our new <strong>build</strong> directory these files will get absorbed by <strong>all.css</strong> and none of the bourbon template folders will show up there. However, if you forget to have a leading underscore in your filenames for these styles, the complete folder will transfer into <strong>/build</strong>—with the prospective <strong>.css</strong> files of course. The <strong>@import</strong> statements in <strong>all.css.scss</strong> didn’t make a difference in that case either.</p>

<p>If you have a ton of templates and wanna just check the list for a name you can use the following command:</p>

<p><strong>Shell</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman init --help
</span><span class='line'>
</span><span class='line'><span class="c"># =&gt;  # Use a project template: default, html5, mobile, smacss, bourbon</span>
</span></code></pre></td></tr></table></div></figure>


<p>In case you wanna reinvent the wheel, take a look at these open sourced <a href="https://directory.middlemanapp.com/#/templates/all/">templates</a>. If you have never played much with templates, I recommend initiating a dummy app and take them for a spin. See what files get created or overwritten. Poke around a little bit. Then build a dummy folder with a couple of Sass files for a template under <strong>~/.middleman</strong> and see what happens when you initiate this template. Nothing beats learning by doing these little experiments along the way!</p>

<h3>Final Thoughts</h3>

<p>I believe you are now more than ready to start building some little app with Middleman. There are a few things left for you to learn on your own but I presented you with the most important pieces of the puzzle. Middleman is a lot of fun and a good choice technology-wise. Sure there are the purists who mumble about technical implementations but these people are rarely satisfied with implementations other than their own. They might be right, but at this stage in your career you’re most likely not at that point yet where you need to worry about this and therefore should selectively ignore this snobbery. Middleman is powerful, easy to use and has a straightforward API that is beginner friendly—that’s all that matters for now. Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby / Rails Code Smells 02]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/11/13/Code-Smells-02/"/>
    <updated>2015-11-13T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/11/13/Code-Smells-02</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/code_smells/code_smell_01_600_mirrored.jpg"></p>

<h3>Heads Up</h3>

<p>This article was mostly written for folks a little more new to coding. Having obviously walked in these shoes myself, I remembered that it felt unneccessary foggy to get into code smells and refactorings. On the one hand, authors expect a certain level of proficiency and therefore might not feel super compelled to provide the reader with the same amount of context as a newbie might need to comfortably dive into this world sooner. As a consequence maybe, newbies on the other hand form the impression that they should wait a bit longer until they are more advanced to learn about smells and refactorings. I do not agree with that approach and think that making this topic more approachable will help them design better software earlier in their career. At least I hope it helps to provide junior peeps with a solid head start.</p>

<h3>Topics</h3>

<ul>
<li>Feature Envy</li>
<li>Shotgun Surgery</li>
<li>Divergent Change</li>
</ul>


<p>What you’ll quickly realize with code smells is that some of them are very close cousins, even their refactorings are sometimes related—like <strong>Inline Class</strong> and <strong>Extract Class</strong> are not that very different. With inlining a class for example, you extract the whole class while you get rid of the original one. So kinda extract class with a little twist. The point I’m trying to make is that you shouldn’t feel overwhelmed with the number of smells, refactorings and certainly not get discouraged by their clever names. Things like <strong>Shotgun Surgery</strong>, <strong>Feature Envy</strong>, <strong>Divergent Change</strong> might sound fancy and intimidating to people who just got started. Maybe I’m wrong of course.</p>

<p>If you dive a little into this whole topic and play with a couple of refactorings for code smells yourself you’ll quickly see that they often end up in the same ball park. A lot of refactorings are simply different strategies to get to a point where you have classes that are concise, well organized and focused on a small amount of responsibilites. I think its fair to say that if you can achieve that you’ll be ahead of the pack most of the time—not that being ahead of others is so important but such class design is simply often missing in code from people before they’re considered “experts”. So why not get into the game early and build a concrete foundation for designing your code. Don’t believe your possibly own narrative that this is an advanced topic that you should maybe put off for a while until you’re ready. Even if you’re a newbie, if you take small steps you can wrap your head around smells and their refactorings a lot earlier than you might think.</p>

<p>Before we dive into the mechanics, I wanna repeat an important point from the first article. Not every smell is inherently bad and not every refactoring is always worth it. You gotta decide on the spot—when you have all the relevant information at your disposal—if your code is more stable after a refactoring and if its worth your time to fix the smell.</p>

<ul>
<li><h3>Feature Envy</h3></li>
</ul>


<p>Let’s revisit an example from the previous article. We extracted a long list of parameters for <strong>#assign_new_mission</strong> into a <em>parameter object</em> via the <strong>Mission</strong> class. So far so cool.</p>

<p><strong>M with feature envy</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">M</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assign_new_mission</span><span class="p">(</span><span class="n">mission</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;Mission </span><span class="si">#{</span><span class="n">mission</span><span class="o">.</span><span class="n">mission_name</span><span class="si">}</span><span class="s2"> has been assigned to </span><span class="si">#{</span><span class="n">mission</span><span class="o">.</span><span class="n">agent_name</span><span class="si">}</span><span class="s2"> with the objective to </span><span class="si">#{</span><span class="n">mission</span><span class="o">.</span><span class="n">objective</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">mission</span><span class="o">.</span><span class="n">licence_to_kill</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot; The licence to kill has been granted.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot; The licence to kill has not been granted.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mission</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:mission_name</span><span class="p">,</span> <span class="ss">:agent_name</span><span class="p">,</span> <span class="ss">:objective</span><span class="p">,</span> <span class="ss">:licence_to_kill</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">mission_name</span><span class="p">:</span> <span class="n">mission_name</span><span class="p">,</span> <span class="ss">agent_name</span><span class="p">:</span> <span class="n">agent_name</span><span class="p">,</span> <span class="ss">objective</span><span class="p">:</span> <span class="n">objective</span><span class="p">,</span> <span class="ss">licence_to_kill</span><span class="p">:</span> <span class="n">licence_to_kill</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@mission_name</span>    <span class="o">=</span> <span class="n">mission_name</span>
</span><span class='line'>    <span class="vi">@agent_name</span>      <span class="o">=</span> <span class="n">agent_name</span>
</span><span class='line'>    <span class="vi">@objective</span>       <span class="o">=</span> <span class="n">objective</span>
</span><span class='line'>    <span class="vi">@licence_to_kill</span> <span class="o">=</span> <span class="n">licence_to_kill</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">M</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">mission</span> <span class="o">=</span> <span class="no">Mission</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">mission_name</span><span class="p">:</span> <span class="s1">&#39;Octopussy&#39;</span><span class="p">,</span> <span class="ss">agent_name</span><span class="p">:</span> <span class="s1">&#39;James Bond&#39;</span><span class="p">,</span> <span class="ss">objective</span><span class="p">:</span> <span class="s1">&#39;find the nuclear device&#39;</span><span class="p">,</span> <span class="ss">licence_to_kill</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">assign_new_mission</span><span class="p">(</span><span class="n">mission</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; &quot;Mission Octopussy has been assigned to James Bond with the objective to find the nuclear device. The licence to kill has been granted.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I briefly mentioned how we can simplyfy the <strong>M</strong> class even more by moving the method <strong>#assign_new_mission</strong> to the new class for the parameter object. What I didn’t address was the fact that <strong>M</strong> had an easily curable form of <em>feature envy</em> as well. <strong>M</strong> was way too nosy about attributes of <strong>Mission</strong>. Put differently, she asked way to many “questions” about the mission object. Its not only a bad case of micromanagement but also a very common code smell.</p>

<p>Let me show you what I mean. In <strong>M#assign_new_mission</strong>, <strong>M</strong> is “envious” about the data in the new parameter object and wants to access it all over the place.</p>

<ul>
<li><strong>mission.mission_name</strong></li>
<li><strong>mission.agent_name</strong></li>
<li><strong>mission.objective</strong></li>
<li><strong>mission.licence_to_kill</strong></li>
</ul>


<p>In addition to that, you also have a parameter object <strong>Mission</strong> that is only responsible for data right now—which is another smell, a <em>Data Class</em>.</p>

<p>This whole situation tells you basically that <strong>#assign_new_mission</strong> wants to be somewhere else and <strong>M</strong> doesn’t need to know the details of how missions get assigned. After all, why wouldn’t it be a missions’ responsibility to assign new missions? Remember to always to put things together that also change together.</p>

<p><strong>M without feature envy</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">M</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assign_new_mission</span><span class="p">(</span><span class="n">mission</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mission</span><span class="o">.</span><span class="n">assign</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mission</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:mission_name</span><span class="p">,</span> <span class="ss">:agent_name</span><span class="p">,</span> <span class="ss">:objective</span><span class="p">,</span> <span class="ss">:licence_to_kill</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">mission_name</span><span class="p">:</span> <span class="n">mission_name</span><span class="p">,</span> <span class="ss">agent_name</span><span class="p">:</span> <span class="n">agent_name</span><span class="p">,</span> <span class="ss">objective</span><span class="p">:</span> <span class="n">objective</span><span class="p">,</span> <span class="ss">licence_to_kill</span><span class="p">:</span> <span class="n">licence_to_kill</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@mission_name</span>    <span class="o">=</span> <span class="n">mission_name</span>
</span><span class='line'>    <span class="vi">@agent_name</span>      <span class="o">=</span> <span class="n">agent_name</span>
</span><span class='line'>    <span class="vi">@objective</span>       <span class="o">=</span> <span class="n">objective</span>
</span><span class='line'>    <span class="vi">@licence_to_kill</span> <span class="o">=</span> <span class="n">licence_to_kill</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assign</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;Mission </span><span class="si">#{</span><span class="n">mission_name</span><span class="si">}</span><span class="s2"> has been assigned to </span><span class="si">#{</span><span class="n">agent_name</span><span class="si">}</span><span class="s2"> with the objective to </span><span class="si">#{</span><span class="n">objective</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">licence_to_kill</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot; The licence to kill has been granted.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot; The licence to kill has not been granted.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">M</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">mission</span> <span class="o">=</span> <span class="no">Mission</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">mission_name</span><span class="p">:</span> <span class="s1">&#39;Octopussy&#39;</span><span class="p">,</span> <span class="ss">agent_name</span><span class="p">:</span> <span class="s1">&#39;James Bond&#39;</span><span class="p">,</span> <span class="ss">objective</span><span class="p">:</span> <span class="s1">&#39;find the nuclear device&#39;</span><span class="p">,</span> <span class="ss">licence_to_kill</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">assign_new_mission</span><span class="p">(</span><span class="n">mission</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we simplified things quite a bit. The method slimmed down significantly and delegates the behaviour to the object in charge. <strong>M</strong> does not request mission data specifics anymore and certainly stays away from getting involved in how assigments get printed. Now she can focus on her real job and doesn’t need to be disturbed if any details of mission assignments change. More time for mind games and hunting down rogue agents. Win-win!</p>

<p>Feature envy breeds entanglement—by that I don’t mean the good kind, the one that let’s information travel faster than light spookingly—I’m talking about the one that over time might let your development momentum grind to an every more approaching halt. Not good! Why so? Ripple effects throughout your code will create resitance! A change in one place butterflies through all kinds of stuff and you end up as a kite in a hurricane. (Ok, a bit overly dramatic, but I give myself a B+ for the Bond reference in there.)</p>

<p>As a general antidote for feature envy, you wanna aim for designing classes that are concerned mostly about their own stuff and have—if possible—single responsibilities. In short, classes should be something like friendly otakus. Socially that might not be the healthiest of behaviours but for designing classes it often is a reasonable guideline to keep your momentum where it should be—moving forward!</p>

<ul>
<li><h3>Shotgun Surgery</h3></li>
</ul>


<p>The name is a little bit silly, isn’t? But at the same time its a pretty accurate description. Sounds like serious business and it kinda is! Luckily its not that hard to grasp but none the less its one of the nastier code smells. Why? Because it breeds dupliction like no other and its easy to loose sight of all the changes you’d need to make to fix things. What happens during shotgun surgery is you make a change in one class / file and you need to touch many other classes / files as wellthat need to be updated. Hope that doesn’t sound like a good time you’re in for.</p>

<p>For example, if you’re in a situation where you think you can get away with one little change in one place and then realize that you have to wade through a whole bunch of files to make either the same change or fix something else that is broken because of it. NOT good, not at all! That sounds more like a good reason why people start to hate the code they’re dealing with. If you have a spectrum with DRY code on one side then code that often needs shotgun surgery is pretty much on the opposite end. Don’t be lazy and let yourself enter that territory. I’m sure you’d rather open one file and apply your changes there and be done with it. That’s the kind of lazy you should strive for!</p>

<p>To avoid this smell here’s a short list of symptoms you can look out for:</p>

<ul>
<li>Feature Envy</li>
<li>Tight coupling</li>
<li>Long Parameter List</li>
<li>Any form of code duplication</li>
</ul>


<p>What do we mean when we talk about code that is coupled. Let’s say we have objects <strong>A</strong> and <strong>B</strong>. If they are not coupled then you can change one of them without affecting the other. Otherwise you’ll more often than not also have to deal with the other object as well. This is a problem and shotgun surgery is a symptom for tight coupling as well. So always watch out how easy you can change your code. If its relatively easy it means that your level of coupling is acceptably low. Having said that, I realize that your expectations would be  unrealistic if you expect to be able to avoid coupling all the time at all costs. That’s not gonna happen! You will find good reasons to decide against that urge—like replacing conditionals with <em>Polymorphism</em>. In such a case, a litle bit of coupling, shotgun surgery and keeping the API of objects in sync is well worth getting rid of a ton of case statements via a <strong>Null Object</strong> (More on that in a later piece).</p>

<p>Most commonly you can apply one of the following refactorings to heal the wounds:</p>

<ul>
<li>Move Field</li>
<li>Inline Class</li>
<li>Extract Class</li>
<li>Move Method</li>
</ul>


<p>Let’s look at some code. This example is a slice of how a Spectre app handles payments between their contractors and evil clients. I simplified the payments a bit by having standard fees for both contractors and clients. So it doesn’t matter if Spectre is tasked to kidnap a cat or extort a whole country, the fee stays the same. Same goes for what they pay their contractors. In the rare case an operation goes south and another Nr. 2 has to literally jump the shark, Spectre offers a full refund to keep evil clients happy. Spectre uses some proprietory payment gem that is basically a placeholder for any kind of payment processor. In the first example below it would be a pain if Spectre decides to use another library to handle payments. There would be more moving parts involved but for demonstrating shotgun surgery this amount of complexity will do I think:</p>

<p><strong>Example with shotgun surgery smell</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">EvilClient</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">STANDARD_CHARGE</span> <span class="o">=</span> <span class="mi">10000000</span>
</span><span class='line'>  <span class="no">BONUS_CHARGE</span>    <span class="o">=</span> <span class="mi">10000000</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accept_new_client</span>
</span><span class='line'>    <span class="no">PaymentGem</span><span class="o">.</span><span class="n">create_client</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge_for_initializing_operation</span>
</span><span class='line'>    <span class="n">evil_client_id</span> <span class="o">=</span> <span class="no">PaymentGem</span><span class="o">.</span><span class="n">find_client</span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">payments_id</span>
</span><span class='line'>    <span class="no">PaymentGem</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">evil_client_id</span><span class="p">,</span> <span class="no">STANDARD_CHARGE</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge_for_successful_operation</span>
</span><span class='line'>    <span class="n">evil_client_id</span> <span class="o">=</span> <span class="no">PaymentGem</span><span class="o">.</span><span class="n">find_client</span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">payments_id</span>
</span><span class='line'>    <span class="no">PaymentGem</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">evil_client_id</span><span class="p">,</span> <span class="no">BONUS_CHARGE</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Operation</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">REFUND_AMOUNT</span> <span class="o">=</span> <span class="mi">10000000</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">refund</span>
</span><span class='line'>    <span class="n">transaction_id</span> <span class="o">=</span> <span class="no">PaymentGem</span><span class="o">.</span><span class="n">find_transaction</span><span class="p">(</span><span class="n">payments_id</span><span class="p">)</span>
</span><span class='line'>    <span class="no">PaymentGem</span><span class="o">.</span><span class="n">refund</span><span class="p">(</span><span class="n">transaction_id</span><span class="p">,</span> <span class="no">REFUND_AMOUNT</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Contractor</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">STANDARD_PAYOUT</span> <span class="o">=</span> <span class="mi">200000</span>
</span><span class='line'>  <span class="no">BONUS_PAYOUT</span>    <span class="o">=</span> <span class="mi">1000000</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process_payout</span>
</span><span class='line'>    <span class="n">spectre_agent_id</span> <span class="o">=</span> <span class="no">PaymentGem</span><span class="o">.</span><span class="n">find_contractor</span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">payments_id</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">operation</span><span class="o">.</span><span class="n">enemy_agent</span> <span class="o">==</span> <span class="s1">&#39;James Bond&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">operation</span><span class="o">.</span><span class="n">enemy_agent_status</span> <span class="o">==</span> <span class="s1">&#39;Killed in action&#39;</span>
</span><span class='line'>      <span class="no">PaymentGem</span><span class="o">.</span><span class="n">transfer_funds</span><span class="p">(</span><span class="n">spectre_agent_id</span><span class="p">,</span> <span class="no">BONUS_PAYOUT</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">PaymentGem</span><span class="o">.</span><span class="n">transfer_funds</span><span class="p">(</span><span class="n">spectre_agent_id</span><span class="p">,</span> <span class="no">STANDARD_PAYOUT</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you look at this code you should ask yourself, should the <strong>EvilClients</strong> class be really concerned about how the payment processor accepts new evil clients and how they are charged for operations? Of course not! Is it a good idea to spread the various amounts to pay all over the place? Should the implementation details of the payments processor be showing up in any of these classes. Most definitely not!</p>

<p>Look at it from that way. If you wanna change stuff on the way you handle payments, why would you need to open the <strong>EvilClient</strong> class? In other cases it could be user or customer. If you think about it, it doesn’t make any sense to familiarize them with this process. In this example it should be easy to see that changes to the way you accept and transfer payments create ripple effects throughout your code. Also, if you wanna change the amount you charge or transfer to your contractors you’d need addtional changes all over the place. Prime examples of shotgun surgery. And in this case we’re only dealing with three classes. Imagine your pain if a bit more realistic complexity is involved. Yep, that’s the stuff nightmares are made of. Let’s look at an example that is a bit more sane:</p>

<p><strong>Example without shotgun surgery smell and extracted class</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PaymentHandler</span>
</span><span class='line'>  <span class="no">STANDARD_CHARGE</span>            <span class="o">=</span> <span class="mi">10000000</span>
</span><span class='line'>  <span class="no">BONUS_CHARGE</span>               <span class="o">=</span> <span class="mi">10000000</span>
</span><span class='line'>  <span class="no">REFUND_AMOUNT</span>              <span class="o">=</span> <span class="mi">10000000</span>
</span><span class='line'>  <span class="no">STANDARD_CONTRACTOR_PAYOUT</span> <span class="o">=</span> <span class="mi">200000</span>
</span><span class='line'>  <span class="no">BONUS_CONTRACTOR_PAYOUT</span>    <span class="o">=</span> <span class="mi">1000000</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">payment_handler</span> <span class="o">=</span> <span class="no">PaymentGem</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@payment_handler</span> <span class="o">=</span> <span class="n">payment_handler</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accept_new_client</span><span class="p">(</span><span class="n">evil_client</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">create_client</span><span class="p">(</span><span class="n">evil_client</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge_for_initializing_operation</span><span class="p">(</span><span class="n">evil_client</span><span class="p">)</span>
</span><span class='line'>    <span class="n">evil_client_id</span> <span class="o">=</span> <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">find_client</span><span class="p">(</span><span class="n">evil_client</span><span class="o">.</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">payments_id</span>
</span><span class='line'>    <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">evil_client_id</span><span class="p">,</span> <span class="no">STANDARD_CHARGE</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge_for_successful_operation</span><span class="p">(</span><span class="n">evil_client</span><span class="p">)</span>
</span><span class='line'>    <span class="n">evil_client_id</span> <span class="o">=</span> <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">find_client</span><span class="p">(</span><span class="n">evil_client</span><span class="o">.</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">payments_id</span>
</span><span class='line'>    <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">evil_client_id</span><span class="p">,</span> <span class="no">BONUS_CHARGE</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">refund</span><span class="p">(</span><span class="n">operation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">transaction_id</span> <span class="o">=</span> <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">find_transaction</span><span class="p">(</span><span class="n">operation</span><span class="o">.</span><span class="n">payments_id</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">refund</span><span class="p">(</span><span class="n">transaction_id</span><span class="p">,</span> <span class="no">REFUND_AMOUNT</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">contractor_payout</span><span class="p">(</span><span class="n">contractor</span><span class="p">)</span>
</span><span class='line'>    <span class="n">spectre_agent_id</span> <span class="o">=</span> <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">find_contractor</span><span class="p">(</span><span class="n">contractor</span><span class="o">.</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">payments_id</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">operation</span><span class="o">.</span><span class="n">enemy_agent</span> <span class="o">==</span> <span class="s1">&#39;James Bond&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">operation</span><span class="o">.</span><span class="n">enemy_agent_status</span> <span class="o">==</span> <span class="s1">&#39;Killed in action&#39;</span>
</span><span class='line'>      <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">transfer_funds</span><span class="p">(</span><span class="n">spectre_agent_id</span><span class="p">,</span> <span class="no">BONUS_CONTRACTOR_PAYOUT</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">transfer_funds</span><span class="p">(</span><span class="n">spectre_agent_id</span><span class="p">,</span> <span class="no">STANDARD_CONTRACTOR_PAYOUT</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">EvilClient</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accept_new_client</span>
</span><span class='line'>    <span class="no">PaymentHandler</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">accept_new_client</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge_for_initializing_operation</span>
</span><span class='line'>    <span class="no">PaymentHandler</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">charge_for_initializing_operation</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge_for_successful_operation</span><span class="p">(</span><span class="n">operation</span><span class="p">)</span>
</span><span class='line'>    <span class="no">PaymentHandler</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">charge_for_successful_operation</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Operation</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">refund</span>
</span><span class='line'>    <span class="no">PaymentHandler</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">refund</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Contractor</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process_payout</span>
</span><span class='line'>    <span class="no">PaymentHandler</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">contractor_payout</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we did here is wrap the <strong>PaymentGem</strong> API in our own class. Now we have one central place where we apply our changes if we decide that for example a <strong>SpectrePaymentGem</strong> would work better for us. No more touching of multiple—to payments’ internals unrelated—files if we need to adapt to changes. In the classes that deal with payments we simply instantiated the <strong>PaymentHandler</strong> and delegate the needed functionality. Easy, stable and no reason to change.</p>

<p>And not only have we contained everything in a single file. Within the <strong>PaymentsHandler</strong> class, there is only one place we need to swap out and reference a possible new payement processor—in <strong>initialize</strong>. That is rad in my book. Sure, if the new payment service has a completely different API you need to tweak the bodies of a couple of methods in <strong>PaymentHandler</strong>. It’s a tiny price to pay compared to full on shotgun surgery—that’s more like surgery for a small splinter in your finger. Good deal!</p>

<p>If you’re not careful when you write tests for a payment processor like this—or any external service you need to rely on—you are possibly in for serious headaches when they change their API. They “suffer from change” as well of course. And the question is not will they change their API, only when. Through our encapsulation we’re in a much better postion to stub our methods for the payment processor. Why? Because the methods we stub are our own and they only change when we want them to. That is a big win. If you’re new to testing and this is not completely clear to your don’t worry about it. Take your time, this topic can be tricky at first. Because its such an advantage I just wanted to mention it for completeness sake.</p>

<p>As you can see I simplified payments processing quite a bit in this silly example. I could have cleaned the final result some more as well but the point was to clearly demonstrate the smell and how you can get rid of it through abstraction. If you’re not completely happy with this class and see opportunities for refactoring I salute you—and am happy take credit for it. I recommend you knock yourself out! A good start might be dealing with the way you find <strong>payments_id</strong>s. The class itself also got a bit crowded already…</p>

<ul>
<li><h3>Divergent Change</h3></li>
</ul>


<p>Divergent change is kinda the opposite of shotgun surgery—where you want to change one thing and need to blast that change through a bunch of different files. Here a single class is often changed for different reasons and in different ways. My recommendation is to identify parts that change together and extract them in a separate class that can focus on that single responsibility. These classes in turn should also have no more than one reason to change—if not, another divergent change smell is most likely waiting to bite you.</p>

<p>Classes that suffer from divergent change are ones that get changed a lot. With tools like <a href="https://github.com/danmayer/churn">Churn</a> you can measure how often particular parts of your code needed to change in the past. The more points you find on a class the higher the probability that divergent change might be at work. I also wouldn’t be surprised if exactly these classes are ones that cause the most bugs overall.</p>

<p>Don’t get me wrong, getting changed often itself is not directly the smell—its a useful symptom though. Another very common and more explicit symptom is that this object needs to juggle more than one responsibility. The <em>single responsibility principle</em> <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">SRP</a> is an excellent guideline to prevent this code smell and to write more stable code in general. It can be tricky to follow though—but nevertheless still worth the grind.</p>

<p>Let’s look at this nasty example below. I modified the shotgun surgery example a bit. <a href="https://en.wikipedia.org/wiki/Ernst_Stavro_Blofeld">Blofeld</a>, head of <em>Spectre</em>, might be known to micromanage stuff but I doubt he would be interested in half the stuff this class is involved with.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Spectre</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">STANDARD_CHARGE</span> <span class="o">=</span> <span class="mi">10000000</span>
</span><span class='line'>  <span class="no">STANDARD_PAYOUT</span> <span class="o">=</span> <span class="mi">200000</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge_for_initializing_operation</span><span class="p">(</span><span class="n">client</span><span class="p">)</span>
</span><span class='line'>    <span class="n">evil_client_id</span> <span class="o">=</span> <span class="no">PaymentGem</span><span class="o">.</span><span class="n">find_client</span><span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">payments_id</span>
</span><span class='line'>    <span class="no">PaymentGem</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">evil_client_id</span><span class="p">,</span> <span class="no">STANDARD_CHARGE</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">contractor_payout</span><span class="p">(</span><span class="n">contractor</span><span class="p">)</span>
</span><span class='line'>    <span class="n">spectre_agent_id</span> <span class="o">=</span> <span class="no">PaymentGem</span><span class="o">.</span><span class="n">find_contractor</span><span class="p">(</span><span class="n">contractor</span><span class="o">.</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">payments_id</span>
</span><span class='line'>    <span class="no">PaymentGem</span><span class="o">.</span><span class="n">transfer_funds</span><span class="p">(</span><span class="n">spectre_agent_id</span><span class="p">,</span> <span class="no">STANDARD_PAYOUT</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assign_new_operation</span><span class="p">(</span><span class="n">operation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">operation</span><span class="o">.</span><span class="n">contractor</span> <span class="o">=</span> <span class="s1">&#39;Some evil dude&#39;</span>
</span><span class='line'>    <span class="n">operation</span><span class="o">.</span><span class="n">objective</span>  <span class="o">=</span> <span class="s1">&#39;Steal a boatload of valuable stuff&#39;</span>
</span><span class='line'>    <span class="n">operation</span><span class="o">.</span><span class="n">deadline</span>   <span class="o">=</span> <span class="s1">&#39;Midnight, November 18th&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_operation_assignment</span><span class="p">(</span><span class="n">operation</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">operation</span><span class="o">.</span><span class="n">contractor</span><span class="si">}</span><span class="s2"> is assigned to </span><span class="si">#{</span><span class="n">operation</span><span class="o">.</span><span class="n">objective</span><span class="si">}</span><span class="s2">. The mission deadline ends at </span><span class="si">#{</span><span class="n">operation</span><span class="o">.</span><span class="n">deadline</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">dispose_of_agent</span><span class="p">(</span><span class="n">spectre_agent</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;You disappointed this organisation. You know how Spectre handles failure. Good bye </span><span class="si">#{</span><span class="n">spectre_agent</span><span class="o">.</span><span class="n">code_name</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong>Spectre</strong> class has way too many different things it is concerned about:</p>

<ul>
<li>Assigning new operations</li>
<li>Charging for their dirty work</li>
<li>Printing mission assignments</li>
<li>Killing unsuccessful spectre agents</li>
<li>Dealing with the PaymentGem internals</li>
<li>Paying their Spectre agents / contractors</li>
<li>It also knows about the amounts of money for charging and payout</li>
</ul>


<p>Seven different responsibilities on a single class. Not good!  You need to change how agents are disposed of? One vector for changing the <strong>Spectre</strong> class. You wanna handle payouts differently? Another vector. You get the drift. Although this example is far from being realistic, it still tells the story how easy it is to uneccessarily amass behaviour that needs to change frequently in a single place. We can do better!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Spectre</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">dispose_of_agent</span><span class="p">(</span><span class="n">spectre_agent</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;You disappointed this organisation. You know how Spectre handles failure. Good bye </span><span class="si">#{</span><span class="n">spectre_agent</span><span class="o">.</span><span class="n">code_name</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PaymentHandler</span>
</span><span class='line'>  <span class="no">STANDARD_CHARGE</span>            <span class="o">=</span> <span class="mi">10000000</span>
</span><span class='line'>  <span class="no">STANDARD_CONTRACTOR_PAYOUT</span> <span class="o">=</span> <span class="mi">200000</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">payment_handler</span> <span class="o">=</span> <span class="no">PaymentGem</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@payment_handler</span> <span class="o">=</span> <span class="n">payment_handler</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge_for_initializing_operation</span><span class="p">(</span><span class="n">evil_client</span><span class="p">)</span>
</span><span class='line'>    <span class="n">evil_client_id</span> <span class="o">=</span> <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">find_client</span><span class="p">(</span><span class="n">evil_client</span><span class="o">.</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">payments_id</span>
</span><span class='line'>    <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">evil_client_id</span><span class="p">,</span> <span class="no">STANDARD_CHARGE</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">contractor_payout</span><span class="p">(</span><span class="n">contractor</span><span class="p">)</span>
</span><span class='line'>    <span class="n">spectre_agent_id</span> <span class="o">=</span> <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">find_contractor</span><span class="p">(</span><span class="n">contractor</span><span class="o">.</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">payments_id</span>
</span><span class='line'>    <span class="vi">@payment_handler</span><span class="o">.</span><span class="n">transfer_funds</span><span class="p">(</span><span class="n">spectre_agent_id</span><span class="p">,</span> <span class="no">STANDARD_CONTRACTOR_PAYOUT</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">EvilClient</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge_for_initializing_operation</span>
</span><span class='line'>    <span class="no">PaymentHandler</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">charge_for_initializing_operation</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Contractor</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process_payout</span>
</span><span class='line'>    <span class="no">PaymentHandler</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">contractor_payout</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Operation</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:contractor</span><span class="p">,</span> <span class="ss">:objective</span><span class="p">,</span> <span class="ss">:deadline</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attrs</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="vi">@contractor</span> <span class="o">=</span> <span class="n">attrs</span><span class="o">[</span><span class="ss">:contractor</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@objective</span>  <span class="o">=</span> <span class="n">attrs</span><span class="o">[</span><span class="ss">:objective</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@deadline</span>   <span class="o">=</span> <span class="n">attrs</span><span class="o">[</span><span class="ss">:deadline</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_operation_assignment</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">contractor</span><span class="si">}</span><span class="s2"> is assigned to </span><span class="si">#{</span><span class="n">objective</span><span class="si">}</span><span class="s2">. The mission deadline ends at </span><span class="si">#{</span><span class="n">deadline</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we extracted a bunch of classes and gave them their own unique responsiblities—and therefore their own contained reason to change. You want to handle payments differently? Now you won’t need to touch the <strong>Spectre</strong> class. You need to charge or payout differently? Again, no need to open the file for <strong>Spectre</strong>. Printing operation assignments is now the business of operation—where it belongs. That’s it. Not too complicated I think but definitely one of the more common smells you should learn to handle early imho.</p>

<h3>Final Thoughts</h3>

<p>I hope you got to the point where you feel ready to try these refactorings in your own code and have an easier time identifying code smells around you. Beware that we just got started but that you already tackled a couple of big ones. I bet it was not as tricky as you once might have thought! Sure, real world examples will be a lot more challenging, but if you have understood the mechanics and patterns to spot smells, you’ll surely be able to adapt quickly to realistic complexities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Middleman Basics 01]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/11/05/Middleman-01/"/>
    <updated>2015-11-05T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/11/05/Middleman-01</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/Three_Stooges_1959.jpg"></p>

<h3>Topics</h3>

<ul>
<li>Helpers</li>
<li>Layouts</li>
<li>Partials</li>
<li>A new Site</li>
<li>Frontmatter</li>
<li>Middleman &amp; Static Pages</li>
<li>Installation &amp; Getting Started</li>
<li><p>Source vs Build vs Deploy(GitHub Pages)</p></li>
<li><h3>Middleman &amp; Static Pages</h3></li>
</ul>


<p>What’s all the fuzz lately with static sites? Easy, they’re fast, pretty straightforward to set up and lightweight I’d say. Because you’re not serving anything database related, static sites are pretty reliable and speedy. HTML, CSS and if needed JS—that’s all. What’s it for? Well, a lot of people use it to set up their blogs and personal pages. Landing pages that are hit by traffic heavily are also a good candidate. <a href="https://www.healthcare.gov/">HealthCare.gov</a> from the Obama administration famously used Jekyll, another static site generator, for their site. Its not a Swiss Army knife for every purpose but if you need something quick and easy that is able to scale out of the box, static sites can be amazing. Especially if you can host them for free on <a href="https://pages.github.com/">GitHub Pages</a> or <a href="https://www.heroku.com/">Heroku</a>.</p>

<p>I guess the whole static site hipness got slowly started a few years back when <a href="http://jekyllrb.com/">Jekyll</a> came along. Of course, static sites are as old as the first “Hello World!” from Sir Tim Berners-Lee but over the past 15 years, database backed apps were mostly “all that mattered”. Couple of years back, one of the co-founders of GitHub needed a better way to write blogs and he came up with Jekyll—this hip static site generator for “Blogging like a hacker”. Its pretty amazing! I’ve used it on a couple of occasions and have only good things to report. The core team is awesome too. Anyhow, for this series my editor and I agreed it would be more interesting to cover <a href="https://middlemanapp.com/">Middleman</a>. It might be fair to say that Middleman is a bit less “blog-aware” out of the box but none the less equally as powerful and great quality-wise.</p>

<p>Middleman uses Ruby and offers a pretty extensive set of features to build cool stuff. Couple of my favorite blogs use Middleman. If you’ve ever used Rails or Sinatra you’ll feel right at home. It seems Middleman and Jekyll are the go-to options for static sites in the Ruby community. I have also heard more and more designers argue that they like using them for prototyping and for setting up their own personal pages. What a lot of these static site frameworks have in common is that they are pretty straightforward to use. I actually believe its a good idea to teach people coding by playing with one of these ruby based static site frameworks—instead of jumping into Rails or Sinatra right away. (Sure, Sinatra is small too but there are still more concepts at work compared to Middleman for example.) Next time someone wants to learn to program in Ruby and asks me for directions I’ll probably point them towards Middleman or Jekyll.</p>

<p>So in this article I’ll assume that you are at least a bit interested in Ruby and have it installed on your system. Knowing how to deal with RubyGems is necessary too. I’ll do my best to not go over your head with programming concepts but I won’t cover basics like loops, code blocks and such. For the newbies among you, don’t worry, Middleman has not that many moving parts or tons of magic—not that I’m one of those magic naggers—and I believe its easy to learn too.</p>

<ul>
<li><h3>Installation &amp; Getting Started</h3></li>
</ul>


<p>So you got Ruby and RubyGems under your belt? Great, then we’re good to go.</p>

<p>Terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install middleman
</span></code></pre></td></tr></table></div></figure>


<p>After this process has finished, you’ll be able to use a couple of handy commands in your shell.</p>

<ul>
<li><strong>middleman init</strong></li>
</ul>


<p>This command initiates a new project—you just have to provide it with the name of your app.</p>

<p>Terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman init your_fancy_app
</span></code></pre></td></tr></table></div></figure>


<p>It also takes additional arguments like which template you wanna start with. This makes it really handy to customize your apps with templates right from the start—cuts down on repetitive setup tasks quite a bit! There are a couple ones ready out of the box—like one for blogs for example and you can use your own custom ones too of course. More on that in a later article.</p>

<p>Terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman init your_fancy_blog --template<span class="o">=</span>blog
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman init your_fancy_mobile_app --template<span class="o">=</span>mobile
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>middleman server</strong></li>
</ul>


<p>Middleman comes with a local server for your development. Starting it up lets you see your site at <strong><a href="http://localhost:4567/">http://localhost:4567/</a> </strong>. If you just type <strong>middleman</strong> without any additional argument, your server gets also fired up. Shut down your server with <strong>CTRL-c</strong>.</p>

<ul>
<li><strong>middleman build</strong></li>
</ul>


<p>Once you have something you are ready to put on an internet-facing server you need to <strong>build</strong> your site. That means that whatever you have prepared in your <strong>/source</strong> folder gets processed and the final output goes into the <strong>/build</strong> folder that middleman also creates for you. All your files that use preprocessors like <a href="http://slim-lang.com/about.html">Slim</a>, <a href="http://haml.info/">Haml</a>, <a href="http://sass-lang.com/">Sass</a>, <a href="http://coffeescript.org/">CoffeeScript</a> get translated into their respective counterparts and put into your /build directory which your server will host.</p>

<ul>
<li><strong>middleman deploy</strong></li>
</ul>


<p>Once your site is ready to face the internet, this command deploys your <strong>/build</strong> folder onto your web server. So every update you have finished goes through that process. Its the equivalent to depoying with Git to Heroku if you have played with that in the past.</p>

<h4>Attention!</h4>

<p>Do yourself a favor right away and activate <a href="http://livereload.com/">LiveReload</a> to instantly refresh your pages automatically after changes to your HTML, Sass or JS files. This is of great convenience during development—you won’t regret it! In the past it was sometimes a pain to set up but Middleman offers <em>LiveReload</em> out of the box—you just need to uncomment the following line in <strong>config.rb</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Reload the browser automatically whenever files change</span>
</span><span class='line'><span class="n">activate</span> <span class="ss">:livereload</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>Source vs Build vs Deploy(GitHub Pages)</h3></li>
</ul>


<p>So let’s get get started with <strong>/source</strong> and <strong>/build</strong> folders. Between them is the dividing line that separates your development and production sections. When you use your local web server for development, /source gets used to serve your app. The /build folder is used by your non-local servers to serve your static pages. /build gets created every time you use <strong>middleman build</strong> in your command line. Therefore you should be careful to not accidentally spend your time coding in /build because this work will disappear after the build process. Sure there is Git if you’re lucky but in general, all your development is supposed to happen in /source.</p>

<p>The build process creates the static sites that you want your server to host. Each file in your <strong>/source</strong> folder will get processed and then stored in <strong>/build</strong>. That means that your Sass, CoffeeScript, Slim / Haml and partials will translante themselves into CSS, JavaScript and HTML files. All the layouts will be pieced together as well. If you have activated compression for these files, this is the moment they get “uglified” too. During this whole shabang, the /build folder gets rejuvinated by getting rid of files that have no reference in /source anymore. During <strong>middleman build</strong>, any changes you made to files in /source will trigger a regeneration of new corresponding static files for /build.</p>

<p>The deployment process is the last step. With the <strong>/build</strong> directory in place you have everything you need to put your app out there. My recommendation is to do this early and avoid running into any surprises. I’ll show you how to deploy via <a href="https://pages.github.com/">GitHub Pages</a>. You’ll see, it couldn’t be any easier or more convenient. Assuming that you already initiated Git (<strong>git init</strong>) it’s basically five simple steps:</p>

<h3>Project Page For Users &amp; Organizations</h3>

<h4>Step 00</h4>

<p>We’ll need to start with adding a Gem for deployment to your <strong>Gemfile</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;middleman-deploy&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Step 01</h4>

<p>In your terminal run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<h4>Step 02</h4>

<p>Open your <strong>config.rb</strong> file and add the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">activate</span> <span class="ss">:deploy</span> <span class="k">do</span> <span class="o">|</span><span class="n">deploy</span><span class="o">|</span>
</span><span class='line'>  <span class="n">deploy</span><span class="o">.</span><span class="n">method</span> <span class="o">=</span> <span class="ss">:git</span>
</span><span class='line'>  <span class="n">deploy</span><span class="o">.</span><span class="n">branch</span> <span class="o">=</span> <span class="s1">&#39;gh-pages&#39;</span>
</span><span class='line'>  <span class="n">deploy</span><span class="o">.</span><span class="n">build_before</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Attention!</h4>

<p>The most important bit is the branch <code>'gh-pages</code>. That way you can setup a <strong>project page</strong> which means that for every GitHub repo you can possibly have your own GitHub pages page. Prettty neat!</p>

<h4>Step 03</h4>

<p>Create a new repository on GitHub and add the remote branch—so everthing you’d normally do when you follow GitHub’s instructions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add origin https://github.com/yourusername/repositoryname.git
</span></code></pre></td></tr></table></div></figure>


<h4>Optional Step</h4>

<p>If you want you can back up your master branch the same way as always <strong>add</strong> / <strong>commit</strong> your changes as well and push them up. That way you’ll have both a <strong>master</strong> and a <strong>gh-pages</strong> branch in your remote repo.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push -u origin master
</span></code></pre></td></tr></table></div></figure>


<h4>Step 04</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>middleman deploy
</span></code></pre></td></tr></table></div></figure>


<p>Boom, that’s it! Your site is live! Now you have a <strong>gh-pages</strong> branch in your repo on GitHub and it will be used for all the heavy lifting of deploying your app for you. With this setup, if you forget to run <strong>middleman build</strong> yourself, the build process gets initiated automatically before the files in <strong>/build</strong> get deployed to GitHub Pages. Once you’re finished you’ll find your app under <code>username.github.io/projectname</code> or <code>organisationname.github.io/projectname</code> for organizations.</p>

<p>At its most basic, the <strong>gh-pages</strong> branch in your repo consists of the following folders:</p>

<ul>
<li><strong>/images</strong></li>
<li><strong>/javascripts</strong></li>
<li><strong>/stylesheets</strong></li>
</ul>


<p>and an <strong>index.html</strong> file.</p>

<h3>User &amp; Organization Pages</h3>

<p>If you want your middleman app to be a <em>User</em> or <em>Organization</em> page on GitHub Pages you’d need to change a little bit of configuration that is concerned with the deploy branch. These pages reside under your <code>username.github.io</code>—why you obviously can only have one of these pages. Quite honestly I don’t see the need for these, after all you’d set up your own domain name for it anyway if the app is of any importance to you. Therefore I’ll stop here and let you figure this out on your own if you find a good reason not to use plain project pages. Its not tricky or anything, the main differnce is that the content from your master branch is used to build and publish this page for you.</p>

<ul>
<li><h3>A New Site</h3></li>
</ul>


<p>Let’s check out the basic structure of a Middleman app. The main components are:</p>

<ul>
<li><strong>/images</strong></li>
<li><strong>/javascripts</strong></li>
<li><strong>/layouts</strong></li>
<li><strong>/stylesheets</strong></li>
<li><strong>config.rb</strong></li>
<li><strong>An index.html.erb file</strong></li>
<li><strong>A Gemfile</strong></li>
</ul>


<p>As you can see below, the most Jazz goes into the <strong>/source</strong> folder. What I like about Middleman apps is their simple organization—even if you are a newbie, its pretty hard to get lost in here. One of the reasons I recommend beginners to play with Middleman first.</p>

<h4>Screenshot:</h4>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/source_structure.png"></p>

<p>If you are unhappy with the naming of some of these folders you can change that in your configurations (<strong>config.rb</strong>) of course. The same names will be used then for your finished <strong>/build</strong> folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:css_dir</span><span class="p">,</span>    <span class="s1">&#39;custom_foler_name&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:js_dir</span><span class="p">,</span>     <span class="s1">&#39;custom_foler_name&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:images_dir</span><span class="p">,</span> <span class="s1">&#39;custom_foler_name&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>When you have your server running, you can check out other options to configure Middleman right in your browser: <a href="http://localhost:4567/__middleman/config/.">http://localhost:4567/__middleman/config/.</a> Not all of them might make sense or are even important to know. Give it a glance and a mental bookmark is totally sufficient for now.</p>

<p>One you run <strong>middleman build</strong> you can peak into the <strong>/build</strong> folder. All the plain HTML, CSS and JS files you need to serve your static site.</p>

<p><img src="http://vis-kid.github.io/octo-draft/images/middleman/build_structure.png"></p>

<p>That’s pretty much all you need to know to get started and to orient yourself.</p>

<h4>Suggestion</h4>

<p>At this pont it would make a lot of sense if you start with initiating a test app yourself—in case you haven’t already. Look around and get a feel how things are organized and how the pieces fit together. You can go on without of course but I believe its easier to understand if you try it out a bit along the way.</p>

<ul>
<li><h3>Frontmatter</h3></li>
</ul>


<p>I know, naming is hard! Comes from book publishing or whatever. Anyway, every page allows you to have variables that can be stored right at the top inside a leading and a trailing triple hyphen—3 minus signs top and bottom. I’ll show you:</p>

<p><strong>some.html.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">---</span>
</span><span class='line'>
</span><span class='line'><span class="x">layout: Bond</span>
</span><span class='line'><span class="x">title:  Favorite bond girl names</span>
</span><span class='line'><span class="x">date:   2015-11-09</span>
</span><span class='line'><span class="x">tags:   bond, 007</span>
</span><span class='line'>
</span><span class='line'><span class="x">some_secret: I won’t get rendered until you use me.</span>
</span><span class='line'>
</span><span class='line'><span class="x">bond_girls:</span>
</span><span class='line'><span class="x">  - Strawberry Fields </span>
</span><span class='line'><span class="x">  - Jill Masterson</span>
</span><span class='line'><span class="x">  - Tiffany Case</span>
</span><span class='line'>
</span><span class='line'><span class="x">---</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;h1&gt;Top three names for Bond girls&lt;/h1&gt;</span>
</span><span class='line'><span class="x">&lt;ul&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="n">current_page</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">bond_girls</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="nb">name</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The YAML variables look just like a hash. You can access that local data through the <strong>current_page</strong> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">current_page</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">some_variable</span>
</span></code></pre></td></tr></table></div></figure>


<p>You often use it to store tags, dates, titles and configuration options—like which layout you wanna use for particular pages. Frontmatter is a <a href="https://en.wikipedia.org/wiki/YAML">YAML</a> store for your variables. You can also use <a href="https://en.wikipedia.org/wiki/JSON">JSON</a> if you prefer that. Hopefully this doesn’t sound way more complicated than it is. You can think of it as a place for putting data that could normally reside in a database—I mean obviously a very trimmed down version of that. I will discuss the various options and uses along the way when they come up.</p>

<p>Maybe we should use this opportunity to briefly go over Erb lingo. Erb let’s you create dynamic templates that have embedded code in them. Your filenames need to have and <strong>.erb</strong> extension and you need to put your code in the following two “containers”.</p>

<p>For code that gets exectuted but not “printed” onto the page you use this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Think of it as “computation only”.</p>

<p>Otherwise, for return values that you wanna see show up “printed” on the page you need to add an equals sign as well. That’s it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>Layouts</h3></li>
</ul>


<p>The concepts of layouts and partials are closely related. Let me give you a little whirlwind tour in case you haven’t played with Rails, Sinatra or similar before. I think I should start with <strong>layouts</strong> first.</p>

<p>Layouts provide you with the structure to share common markup among different pages—that belong to the same “family” of pages if you will. Its a tool to avoid duplication and to speed up your work. Instead of writing the same HTML skelleton all over the place you compose layouts for particular use cases. Popular examples are two different layouts for both an admin and a “normal” user. They usually have a very different experience looking at the “same” page.</p>

<p>When you initiate a simple middleman app, you’ll automatically get a <strong>layout.erb</strong> file in <strong>source/layouts</strong>. Take notice that this file is ending in <strong>.erb</strong> and not <strong>.html.erb</strong>. Layouts should not be rendered to HTML and Middleman will throw an error if you create layouts with an leftmost <strong>.html</strong> extension. If you use a different templating languate like Slim or Haml, layouts should have their extensions instead or <strong>.erb</strong> of course. As the default suggests, you should put all your layouts into the <strong>/layouts</strong> folder in <strong>source</strong>.</p>

<p><strong>source/layouts/layout.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Always force latest IE rendering engine or request Chrome Frame --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">content=</span><span class="s">&quot;IE=edge,chrome=1&quot;</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Use title if it&#39;s in the page YAML frontmatter --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span><span class="err">&lt;</span>%= current_page.data.title || &quot;The Middleman&quot; %&gt;<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">&lt;</span>%= stylesheet_link_tag &quot;normalize&quot;, &quot;all&quot; %&gt;
</span><span class='line'>    <span class="err">&lt;</span>%= javascript_include_tag  &quot;all&quot; %&gt;
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;&lt;%= page_classes %&gt;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= yield %&gt;
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This default layout is pretty barebones but provides all you need to get started. Let’s have a look:</p>

<ul>
<li>A little bit of meta information.</li>
<li>A dynamic page title that reads data from every pages’ frontmatter.</li>
<li>Helper methods that include style and JavaScript files.</li>
<li>And finally a body tag that wraps your content which is “yielded” into the layout via <strong>&lt;%= yield %></strong>.</li>
</ul>


<p>And from there you can customize this layout to your every need. Its a starting point really. The only confusing part for Ruby newbies is maybe the <strong>yield</strong> thingy—it just means that it passes through the rest of the content you create. In other words, <strong>yield</strong> is a placeholder for your views which will get rendered into it. If that concept is completely alien to you just remember to not touch it for now or your app might not work as expected. Whenever you create your own layouts, having <strong>yield</strong> in there is most essential. Otherwise your content won’t show. You’ll get the hang of it in no time though.</p>

<p>If you created different layouts you can specify via the frontmatter which layout you wanna use on a page-by-page basis. Let’s say you have a special layout for welcoming users that is a bit more salesy.</p>

<p><strong>welcome.html.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: sales
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>Hello there!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;h2&gt;</span> Guess what, we’re trying to sell you some stuff?<span class="nt">&lt;/h2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively you can specify layouts also in your config file.</p>

<p><strong>config.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">page</span> <span class="s2">&quot;/welcome.html&quot;</span><span class="p">,</span> <span class="ss">:layout</span> <span class="o">=&gt;</span> <span class="s2">&quot;sales&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to avoid doing this for every page manually, you can collect them in one place. You use a wildcard (<strong>*</strong>) to collect a bunch of pages that use the same layout.</p>

<p><strong>config.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">page</span> <span class="s2">&quot;/sales/*&quot;</span><span class="p">,</span> <span class="ss">:layout</span> <span class="o">=&gt;</span> <span class="s2">&quot;sales&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I personally like to put this layout info in the frontmatter. Its very explicit and not too repetetive. If I had a whole bunch of them though I’d rather use the wildcard approach.</p>

<p>For any decent app, layouts can be nested of course—which means nested <strong>yield</strong> blocks as well. Layouts can be turned off as well. Maybe we’ll visit that later when we get into building something. For now that’s all you need to know about layouts.</p>

<ul>
<li><h3>Partials</h3></li>
</ul>


<p>These lovely fellas provide you with the means to encapsulate  view code that you can reuse wherever you need. You just need to tell your view where to insert a partial and it gets rendered right in there. Partials are a very common technique for DRYing up your code—at least in Ruby land and therefore Middleman has it baked in as well.</p>

<p>Very common examples include navbars, footers and <strong>head</strong> sections—which you don’t want to duplicate all over the place. Files for partials start with an underscore. For starters you can place them under <strong>/source</strong>. Your layouts are a good place to start with collecting code to extract into partials. There are tons of ways to make use of them though. Whenever you find something you should encapsulate and reuse, partials will be a handy friend. Just like layouts, you can nest partials as well. Just try to avoid making it too confusing to follow their breadcrumbs.</p>

<p><strong>/source/layouts/layout.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= partial &quot;head&quot; %&gt;
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;&lt;%= page_classes %&gt;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= partial &quot;navbar&quot; %&gt;
</span><span class='line'>    <span class="err">&lt;</span>%= yield %&gt;
</span><span class='line'>    <span class="err">&lt;</span>%= partial &quot;footer&quot; %&gt;
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>source/_head.html.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- Always force latest IE rendering engine or request Chrome Frame --&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">content=</span><span class="s">&quot;IE=edge,chrome=1&quot;</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- Use title if it&#39;s in the page YAML frontmatter --&gt;</span>
</span><span class='line'><span class="nt">&lt;title&gt;</span><span class="err">&lt;</span>%= current_page.data.title || &quot;The Middleman&quot; %&gt;<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span>%= stylesheet_link_tag &quot;normalize&quot;, &quot;all&quot; %&gt;
</span><span class='line'><span class="err">&lt;</span>%= javascript_include_tag  &quot;all&quot; %&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Sometimes you want to extract a partial not just for avoiding duplication but to make your views more readable. Over time, <strong>head</strong> sections are notorious for becoming quite loaded for example. Within them you can have other partials that only deal with style or JS files.</p>

<p>You’ll realize how convenient partials are once you can apply changes that ripple through your entire app—wherever you included the partial. No need to go through a bunch of files to apply the same change over and over. If you’ve never used partials before you’ll soon learn that there is no way you wanna go back and do it any other way. Frameworks that are not smart about this soon become pale in comparison—I guess most of them have caught up by now though.</p>

<ul>
<li><h3>Helpers</h3></li>
</ul>


<p>Helpers are methods that you can use for a lot of everyday taks in your views. I believe this was pioneered in Rails land and quickly became ubiquitous for web modern web development. You’ve already seen helpers that include stylesheets and JavaScript files. There’s a lot more where this is coming from though.</p>

<p><strong>/source/_head.html.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= stylesheet_link_tag &quot;normalize&quot;, &quot;all&quot; %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= javascript_include_tag  &quot;all&quot; %&gt;
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>They are meant to help you write cleaner and more concise view code. In the helpers list below you’ll find a lot of useful stuff that comes out of the box. You are not limited by that though. Write your own helper methods in <strong>config.rb</strong> or collect them separately in a module. Totally up to you.</p>

<p>It works like this: In your <strong>config.rb</strong> you create a <strong>helpers</strong> block and put all your helper methods inside. That’s it. Now your views have access to them.</p>

<p><strong>/source/_navbar.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;nav&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= random_username %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= random_image %&gt;
</span><span class='line'><span class="nt">&lt;/nav&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>config.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">helpers</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">random_username</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">lorem</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">lorem</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">random_image</span>
</span><span class='line'>    <span class="n">image_tag</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">lorem</span><span class="o">.</span><span class="n">image</span><span class="p">(</span><span class="s1">&#39;30x40&#39;</span><span class="p">,</span> <span class="ss">:background_color</span> <span class="o">=&gt;</span> <span class="s1">&#39;333&#39;</span><span class="p">,</span> <span class="ss">:color</span> <span class="o">=&gt;</span> <span class="s1">&#39;fff&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>These simple helpers might come in handy when I quickly wanna prototype something and want to avoid setting up dummy images and text myself. Just drop in a helper in your view, test how it looks and replace it when you have real content for example. Overall, you should look out for code that you’d like to be more concise or that you duplicate over and over again. Helpers are often a good home for that.</p>

<p>Inside these custom helpers I used other Middleman helpers for creating <strong>img</strong> tags through <strong>image_tag</strong> as well as the <strong>lorem</strong> object for some random user names and image placeholders. These lorem thingies can be a bit customized to suit your needs.</p>

<p>Using the module approach however, you need a separate file for your module. Create a <strong>lib</strong> directory in your root folder—same level as <strong>source</strong> and <strong>build</strong>—and create a file for your helpers.</p>

<p><strong>/lib/helpers.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">PrototypingHelpers</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">random_image</span>
</span><span class='line'>    <span class="n">image_tag</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">lorem</span><span class="o">.</span><span class="n">image</span><span class="p">(</span><span class="s1">&#39;300x400&#39;</span><span class="p">,</span> <span class="ss">:background_color</span> <span class="o">=&gt;</span> <span class="s1">&#39;333&#39;</span><span class="p">,</span> <span class="ss">:color</span> <span class="o">=&gt;</span> <span class="s1">&#39;fff&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">random_username</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">lorem</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">lorem</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you’ll need to let your <strong>config.rb</strong> file know that you wanna use these helpers:</p>

<p><strong>config.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;lib/helpers&#39;</span>
</span><span class='line'><span class="n">helpers</span> <span class="no">PrototypingHelpers</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boom! You’re ready to roll. In general, I’d go with the module approach right away. Feels a lot cleaner to me—plus you avoid polluting your config file with too much stuff.</p>

<p>I’d also like to look into output helpers and <strong>content_for</strong> in particular—since they can be a bit confusing for newbies. This let’s you capture a bunch of content that you can yield / reuse someplace else. Its a minature partial of sorts if you like. I personally would go with a partial most of the time I guess but every now and then when you wanna apply on-off changes more surgically this is handy to know:</p>

<p><strong>index.html.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>% content_for :navigation do %&gt;
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &#39;Home&#39;,    &#39;#&#39; %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &#39;Posts&#39;,   &#39;#&#39; %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &#39;About&#39;,   &#39;#&#39; %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &#39;Contact&#39;, &#39;#&#39; %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% end %&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span> Hello new user!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p><strong>admin_index.html.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>% content_for :admin_navigation do %&gt;
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &#39;Home&#39;,    &#39;#&#39; %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &#39;Stats&#39;,   &#39;#&#39; %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &#39;Edit&#39;,    &#39;#&#39; %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &#39;Posts&#39;,   &#39;#&#39; %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &#39;About&#39;,   &#39;#&#39; %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &#39;Contact&#39;, &#39;#&#39; %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% end %&gt;
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span>% content_for :admin_javascript do %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= javascript_include_tag  &quot;admin&quot; %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= javascript_include_tag  &quot;some_library&quot; %&gt;
</span><span class='line'><span class="err">&lt;</span>% end %&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span> Hello Ms. Admin!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p><strong>layout.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>% if content_for?(:admin_javascript) %&gt;
</span><span class='line'>        <span class="err">&lt;</span>%= yield_content :admin_javascript %&gt;
</span><span class='line'>      <span class="err">&lt;</span>% else %&gt;
</span><span class='line'>        <span class="err">&lt;</span>%= javascript_include_tag  &quot;all&quot; %&gt;
</span><span class='line'>      <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;&lt;%= page_classes %&gt;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;nav&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>% if content_for?(:admin_navigation) %&gt;
</span><span class='line'>        <span class="err">&lt;</span>%= yield_content :admin_navigation %&gt;
</span><span class='line'>      <span class="err">&lt;</span>% else %&gt;
</span><span class='line'>        <span class="err">&lt;</span>%= yield_content :navigation %&gt;
</span><span class='line'>      <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>    <span class="nt">&lt;/nav&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">&lt;</span>%= yield %&gt;
</span><span class='line'>
</span><span class='line'>    <span class="err">&lt;</span>%= partial &quot;footer&quot; %&gt;
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The key is using <strong>yield_content</strong> which is putting your collected content from the individual page into the layout—if found. No need to just use them only with layouts btw. When you need to make this a bit more involved, use <strong>content_for?</strong> to check for specific content blocks before you insert them. It is handy when you want to make small adaptions for sections that differ only slightly. Its kinda cool that you can save this content a bit like a configuration on the relevant pages themselves and “activate” it only where needed. You probably shouldn’t get too clever with these things though.</p>

<p>A word about the <strong>link_to</strong> helper I used above. This is probaly the one you’ll use / run into the most. You basically feed the method a name and a url or path where this link should point to. I replaced the last part with a placeholder for brevity.</p>

<p>Below is an overview what helpers are out-of-the-box at your disposal. I think the names are mostly self-explanatory and I shouldn’t go over what each of these can help you with. Make a mental bookmark what’s out there and check back with the documentation if they give you any trouble. By now, I’m pretty sure you got this. If not, nothing wrong with that either. Hang in there!</p>

<h3>Tag Helpers</h3>

<ul>
<li><strong>tag</strong></li>
<li><strong>link_to</strong></li>
<li><strong>input_tag</strong></li>
<li><strong>favicon_tag</strong></li>
<li><strong>stylesheet_link_tag</strong></li>
<li><strong>javascript_include_tag</strong></li>
</ul>


<h3>Output Helpers</h3>

<ul>
<li><strong>content_for</strong></li>
<li><strong>content_for?</strong></li>
<li><strong>capture_html</strong></li>
<li><strong>yield_content</strong></li>
<li><strong>concat_content</strong></li>
</ul>


<h3>Form Helpers</h3>

<ul>
<li><strong>form_tag</strong></li>
<li><strong>label_tag</strong></li>
<li><strong>select_tag</strong></li>
<li><strong>submit_tag</strong></li>
<li><strong>field_set_tag</strong></li>
<li><strong>text_field_tag</strong></li>
<li><strong>check_box_tag</strong></li>
<li><strong>password_field_tag</strong></li>
</ul>


<h3>Format Helpers</h3>

<ul>
<li><strong>truncate</strong></li>
<li><strong>pluralize</strong></li>
<li><strong>word_wrap</strong></li>
<li><strong>escape_html</strong></li>
<li><strong>simple_format</strong></li>
<li><strong>js_escape_html</strong></li>
<li><strong>time_ago_in_words</strong></li>
<li><strong>distance_of_time_in_words</strong></li>
</ul>


<h3>Lorem Helpers</h3>

<ul>
<li><strong>lorem.date</strong></li>
<li><strong>lorem.name</strong></li>
<li><strong>lorem.words</strong></li>
<li><strong>lorem.word</strong></li>
<li><strong>lorem.email</strong></li>
<li><strong>lorem.image</strong></li>
<li><strong>lorem.sentence</strong></li>
<li><strong>lorem.last_name</strong></li>
<li><strong>lorem.paragraph</strong></li>
<li><strong>lorem.paragraphs</strong></li>
<li><p><strong>lorem.first_name</strong></p></li>
<li><h3>Final Thoughts</h3></li>
</ul>


<p>I believe this is a good basis to start playing around with a toy app. You should have a good sense what Middleman offers and how to navigate the framework. In part two of this series we’ll take it further and dive a bit deeper into the framework. The Middleman team has really done a great job with designing the API and with keeping things simple. Hopefully you can see by now why this framework has gained in popularity and why it is a good choice for all sorts of static projects—also why you should maybe give it a shot for teaching somebody to code in case a newbie who’s interested in Ruby comes along.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby / Rails Code Smells 01]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/11/05/Code-Smells-01/"/>
    <updated>2015-11-05T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/11/05/Code-Smells-01</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/code_smells/code_smell_01.jpeg"></p>

<h3>Topics</h3>

<ul>
<li>Smelly Code</li>
<li>Large Class / God Class</li>
<li>Long Method</li>
<li><p>Long Parameter List</p></li>
<li><h3>Smelly Code</h3></li>
</ul>


<p>The following short series of articles is meant for slightly experienced Ruby developers and starters alike. I had the impression that code smells and their refactorings can be very daunting and intimidating to newbies—especially if they are not in the fortunate position to have mentors who can turn mystical programming concepts into shining light bulbs.</p>

<p>So what are we talking about exactly when people mention code smells? Is it always a problem in your code? Not necessarily! Can you avoid them completely? I don’t think so! Do you mean code smells lead to broken code? Well, sometimes and sometimes not. Should it be my priority to fix them right away? Same answer I fear, sometimes yes and sometimes you certainly should fry bigger fish first. Are you insane? Fair question at this point! Before you continue diving into this whole smelly business, remember to take away one thing from all of this: Don’t try to fix every smell you encounter—this is most certainly a waste of your time!</p>

<p>It seems to me that code smells are a bit hard to wrap up in a nicely labeled box. There are all kinds of smells with various different options to address them. Also, different programming languages and frameworks are prone to different kind of smells—but there are definitely a lot of common “genetic” strains among them. My attempt to describe code smells is to compare them with medical symptoms that tell you that you might have a problem. They can point to all sorts of latent problems and have a wide variety of solutions if diagnosed.</p>

<p>Thankfully they’re overall not as complicated as dealing with the human body—and psyche of course. Its a fair comparison though because some of these symptoms need to be treated right away and some others give you ample time to come up with a solution that is best for the “patient’s” overall well-being. If you have working code and you run into something smelly you’ll have to make the hard decision if its worth the time to find a fix and if that refactoring improves the stability of your app. That being said, if you stumble upon code which you can improve right away its good advice to leave the code behind a bit better than before—even a tiny bit better adds up substantially over time.</p>

<h4>Resistance</h4>

<p>The quality of your code becomes questionable if the inclusion of new code becomes harder—like deciding where to put new code is a pain or comes with a lot of ripple effects throughout your codebase for example. This is called resistance. As a guideline for code quality you can measure it always by how easy it is to introduce changes. If that is getting harder and harder its definitely time to refactor and to take the last part of <em>red-green-REFACTOR</em> more seriously in the future.</p>

<ul>
<li><h3>Large Class / God Class</h3></li>
</ul>


<p>Let’s start with something fancy sounding—“God classes”—because I think they are particular easy to grasp for beginners. God classes are a special case of a code smell called <strong>Large Class</strong>. In this section I’ll address both of them. If you have spent a little bit of time in Rails land you probably have seen them so often that they look normal to you.</p>

<p>You surely remember the “fat models, skinny controller” mantra? Well actually, skinny is good for all these classes but as a guideline its good advice for newbies I suppose. God classes are objects that attract all sorts of knowledge and behaviour like a black hole. Your usual suspects most often include the User model and whatever problem (hopefully ;) your app is trying to solve—first and foremost at least. A todo app might bulk up on the <strong>Todos</strong> model, a shopping app on <strong>Products</strong>, a photo app on <strong>Photos</strong>—you get the drift. People call them god classes because they know too much. They have too many connections with other classes—mostly because someone was modeling them lazily. It is hard work though to keep God classes in check. They make it really easy to dump more responsibilities onto them and as lots of greek heroes would attest, it takes a bit of skill to divide and conquer “gods”.</p>

<p>The problem with them is that they become harder and harder to understand, especially for new team members, harder to change and reuse becomes less and less of an option the more gravity they’ve amassed. Oh yeah, you’re right, your tests are unnecessarily harder to write as well. In short, there is not really an upside to having large classes and god classes in particular.</p>

<p>There are a couple of common symptoms / signs that your class needs some heroism / surgery:</p>

<ul>
<li>You need to scroll!</li>
<li>Tons of private methods?</li>
<li>Does your class have seven or more methods on it?</li>
<li>Hard to tell what your class really does—concisely!</li>
<li>Does your class have many reasons to change when your code evolves?</li>
</ul>


<p>Also, if you squint at your class and think “Eh? Ew!” you might be on to something too. If all that sounds familiar, chances are good that you found yourself a fine specimen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CastingInviter</span>
</span><span class='line'>  <span class="no">EMAIL_REGEX</span> <span class="o">=</span> <span class="sr">/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:message</span><span class="p">,</span> <span class="ss">:invitees</span><span class="p">,</span> <span class="ss">:casting</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="vi">@message</span>  <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span>  <span class="o">||</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="vi">@invitees</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:invitees</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="vi">@sender</span>   <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:sender</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@casting</span>  <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:casting</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid?</span>
</span><span class='line'>    <span class="n">valid_message?</span> <span class="o">&amp;&amp;</span> <span class="n">valid_invitees?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deliver</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">valid?</span>
</span><span class='line'>      <span class="n">invitee_list</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">email</span><span class="o">|</span>
</span><span class='line'>        <span class="n">invitation</span> <span class="o">=</span> <span class="n">create_invitation</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>        <span class="no">Mailer</span><span class="o">.</span><span class="n">invitation_notification</span><span class="p">(</span><span class="n">invitation</span><span class="p">,</span> <span class="vi">@message</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">failure_message</span>  <span class="o">=</span> <span class="s2">&quot;Your </span><span class="si">#{</span> <span class="vi">@casting</span> <span class="si">}</span><span class="s2"> message couldn’t be sent. Invitees emails or message are invalid&quot;</span>
</span><span class='line'>      <span class="n">invitation</span> <span class="o">=</span> <span class="n">create_invitation</span><span class="p">(</span><span class="vi">@sender</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Mailer</span><span class="o">.</span><span class="n">invitation_notification</span><span class="p">(</span><span class="n">invitation</span><span class="p">,</span> <span class="n">failure_message</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">invalid_invitees</span>
</span><span class='line'>    <span class="vi">@invalid_invitees</span> <span class="o">||=</span> <span class="n">invitee_list</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="k">unless</span> <span class="n">item</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="no">EMAIL_REGEX</span><span class="p">)</span>
</span><span class='line'>        <span class="n">item</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">invitee_list</span>
</span><span class='line'>    <span class="vi">@invitee_list</span> <span class="o">||=</span> <span class="vi">@invitees</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/[\n,;]+/</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid_message?</span>
</span><span class='line'>    <span class="vi">@message</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid_invitees?</span>
</span><span class='line'>    <span class="n">invalid_invitees</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_invitation</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Invitation</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">casting</span><span class="p">:</span>       <span class="vi">@casting</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">sender</span><span class="p">:</span>        <span class="vi">@sender</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">invitee_email</span><span class="p">:</span> <span class="n">email</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">status</span><span class="p">:</span>        <span class="s1">&#39;pending&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ugly fella huh? Can you see how much nastyness is bundled in here? Of course I put a little cherry on top, but you will run into code like this sooner or later.  Let’s think about what responsibilities this <strong>CastingInviter</strong> class has to juggle.</p>

<ul>
<li>Delivering email</li>
<li>Checking for valid messages and email addresses</li>
<li>Getting rid of white space</li>
<li>Splitting email addresses on commas and semicolons</li>
</ul>


<p>Should all of this be dumped on a class which just wants to deliver a casting call via <strong>deliver</strong>? Certainly not! If your method of invitation changes you can expect to run into some <a href="https://en.wikipedia.org/wiki/Shotgun_surgery">Shotgun surgery</a>. CastingInviter doesn’t need to know most of these details. That’s more the responsibility of some class that is specialized in dealing with email related stuff. In the future, you’ll find many reasons to change your code in here as well.</p>

<h3>Extract Class</h3>

<p>So how should we deal with this? Often, extracting a class is a handy refactoring pattern that will present itself as a reasonable solution to such problems as big, convoluted classes—especially when the class in question deals with multiple responsibilities. Private methods are often good candidates to start with—and easy marks as well. Sometimes you’ll need to extract even more than one class from such a bad boy—just don’t do it all in one step. Once you find enough coherent meat that seems to belong into a specialized object of its own you can extract that functionality into a new class.</p>

<p>You create a new class and gradually move the functionality over—one by one. Move each method separately and rename them if you see a reason to. Then reference the new class in the orignal one and delegate the needed functionality. Good thing you have test coverage (hopefully!) that lets you check if things still work properly every step of the way. Aim at being able to reuse your extracted classes as well. Its easier to see how its done in action so lets read some code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CastingInviter</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:message</span><span class="p">,</span> <span class="ss">:invitees</span><span class="p">,</span> <span class="ss">:casting</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="vi">@message</span>  <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span>  <span class="o">||</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="vi">@invitees</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:invitees</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="vi">@casting</span>  <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:casting</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@sender</span>   <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:sender</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid?</span>
</span><span class='line'>    <span class="n">casting_email_handler</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deliver</span>
</span><span class='line'>    <span class="n">casting_email_handler</span><span class="o">.</span><span class="n">deliver</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">casting_email_handler</span>
</span><span class='line'>    <span class="vi">@casting_email_handler</span> <span class="o">=</span> <span class="no">CastingEmailHandler</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">message</span><span class="p">:</span>  <span class="n">message</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">invitees</span><span class="p">:</span> <span class="n">invitees</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">casting</span><span class="p">:</span>  <span class="n">casting</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">sender</span><span class="p">:</span>   <span class="vi">@sender</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CastingEmailHandler</span>
</span><span class='line'>  <span class="no">EMAIL_REGEX</span> <span class="o">=</span> <span class="sr">/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="kp">attr</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="vi">@message</span>  <span class="o">=</span> <span class="kp">attr</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span>  <span class="o">||</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="vi">@invitees</span> <span class="o">=</span> <span class="kp">attr</span><span class="o">[</span><span class="ss">:invitees</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="vi">@casting</span>  <span class="o">=</span> <span class="kp">attr</span><span class="o">[</span><span class="ss">:casting</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@sender</span>   <span class="o">=</span> <span class="kp">attr</span><span class="o">[</span><span class="ss">:sender</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid?</span>
</span><span class='line'>    <span class="n">valid_message?</span> <span class="o">&amp;&amp;</span> <span class="n">valid_invitees?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deliver</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">valid?</span>
</span><span class='line'>      <span class="n">invitee_list</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">email</span><span class="o">|</span>
</span><span class='line'>        <span class="n">invitation</span> <span class="o">=</span> <span class="n">create_invitation</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>        <span class="no">Mailer</span><span class="o">.</span><span class="n">invitation_notification</span><span class="p">(</span><span class="n">invitation</span><span class="p">,</span> <span class="vi">@message</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">failure_message</span>  <span class="o">=</span> <span class="s2">&quot;Your </span><span class="si">#{</span> <span class="vi">@casting</span> <span class="si">}</span><span class="s2"> message couldn’t be sent. Invitees emails or message are invalid&quot;</span>
</span><span class='line'>      <span class="n">invitation</span> <span class="o">=</span> <span class="n">create_invitation</span><span class="p">(</span><span class="vi">@sender</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Mailer</span><span class="o">.</span><span class="n">invitation_notification</span><span class="p">(</span><span class="n">invitation</span><span class="p">,</span> <span class="n">failure_message</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">invalid_invitees</span>
</span><span class='line'>    <span class="vi">@invalid_invitees</span> <span class="o">||=</span> <span class="n">invitee_list</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="k">unless</span> <span class="n">item</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="no">EMAIL_REGEX</span><span class="p">)</span>
</span><span class='line'>        <span class="n">item</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">invitee_list</span>
</span><span class='line'>    <span class="vi">@invitee_list</span> <span class="o">||=</span> <span class="vi">@invitees</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/[\n,;]+/</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid_invitees?</span>
</span><span class='line'>    <span class="n">invalid_invitees</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid_message?</span>
</span><span class='line'>    <span class="vi">@message</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_invitation</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Invitation</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">casting</span><span class="p">:</span>       <span class="vi">@casting</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">sender</span><span class="p">:</span>        <span class="vi">@sender</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">invitee_email</span><span class="p">:</span> <span class="n">email</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">status</span><span class="p">:</span>        <span class="s1">&#39;pending&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this solution, you’ll not only see how this separation of concerns affects your code quality, it also reads a lot better and becomes easier to digest. Here we delegate methods to a new class that is specialized in dealing with delivering these invitations via email. You have one dedicated place that checks if the messages and invitees are valid and how they need to be delivered. <strong>CastingInviter</strong> doesn’t need to know anything about these details so we delegate these responsibilities to a new class <strong>CastingEmailHandler</strong>.</p>

<p>The knowledge of how to deliver and check for validity of these casting invitation emails is now all contained in our new extracted class. Do we have more code now? You bet! Was it worth it to separate concerns? Pretty sure! Can we go beyond that and refactor <strong>CastingEmailHandler</strong> some more? Absolutely! Knock yourself out!</p>

<p>In case you’re wondering about the <strong>valid?</strong> method on <strong>CastingEmailHandler</strong> and <strong>CastingInviter</strong>. This one is for RSpec to create a custom matcher. This lets me write something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">casting_inviter</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_valid</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty handy I think.</p>

<p>There are more techniques for dealing with large classes / god objects and over the course of this series you’ll learn a couple of ways to refactor such objects. There is no fixed prescription how you need to deal with these cases—it always depends and its a case-by-case judgement call if you need to bring the big guns or if smaller, incremental refactoring techniques oblige best. I know, a bit frustrating at times. Following the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibility Principle</a> (SRP) will go a long way though and is a good nose to follow.</p>

<ul>
<li><h3>Long Method</h3></li>
</ul>


<p>Having methods that got a little big is one of the most common things you encounter as a developer. In general, you want to know at a glance what a method is supposed to do. It should also have only one level of nesting or one level of abstraction. In short, avoid to write complicated methods. I know this sounds hard and it often is. A solution that comes up frequently is extracting parts of the method into one or more new functions. This refactoring technique is called <strong>extract method</strong>—its one of the simplest but none the less very effective. As a nice side effect, your code becomes more readable if you name your methods appropriately.</p>

<p>Let’s take a look at feature specs where you’ll need this technique a lot. I remember getting introduced to <em>extract method</em> while writing such feature specs and how amazing it felt when the lightbulb went on. Because feature specs like this are easy to understand they are a good candiate for demonstration. Plus you’ll run into similar scenarios over and over when you write your specs.</p>

<p><strong>spec/features/some_feature_spec.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">feature</span> <span class="s1">&#39;M marks mission as complete&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;successfully&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit_root_path</span>
</span><span class='line'>    <span class="n">fill_in</span>      <span class="s1">&#39;Email&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s1">&#39;M@mi6.com&#39;</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s1">&#39;Submit&#39;</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">missions_path</span>
</span><span class='line'>    <span class="n">click_on</span>     <span class="s1">&#39;Create Mission&#39;</span>
</span><span class='line'>    <span class="n">fill_in</span>      <span class="s1">&#39;Mission Name&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s1">&#39;Submit&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">within</span> <span class="s2">&quot;li:contains(&#39;Project Moonraker&#39;)&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">click_on</span> <span class="s1">&#39;Mission completed&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_css</span> <span class="s1">&#39;ul.missions li.mission-name.completed&#39;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can easily see, there is a lot going on in this scenario. You go to the index page, sign in and create a mission for the setup, then exercise via marking the mission as complete and finally you verify the behaviour. No rocket science, but also not clean and definitely not composed for reuseability. We can do better than that:</p>

<p><strong>spec/features/some_feature_spec.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">feature</span> <span class="s1">&#39;M marks mission as complete&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;successfully&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sign_in_as</span> <span class="s1">&#39;M@mi6.com&#39;</span>
</span><span class='line'>    <span class="n">create_classified_mission_named</span> <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mark_mission_as_complete</span>        <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent_sees_completed_mission</span>    <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_classified_mission_named</span><span class="p">(</span><span class="n">mission_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">missions_path</span>
</span><span class='line'>  <span class="n">click_on</span>     <span class="s1">&#39;Create Mission&#39;</span>
</span><span class='line'>  <span class="n">fill_in</span>      <span class="s1">&#39;Mission Name&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">mission_name</span>
</span><span class='line'>  <span class="n">click_button</span> <span class="s1">&#39;Submit&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mark_mission_as_complete</span><span class="p">(</span><span class="n">mission_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">within</span> <span class="s2">&quot;li:contains(&#39;</span><span class="si">#{</span><span class="n">mission_name</span><span class="si">}</span><span class="s2">&#39;)&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">click_on</span> <span class="s1">&#39;Mission completed&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">agent_sees_completed_mission</span><span class="p">(</span><span class="n">mission_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_css</span> <span class="s1">&#39;ul.missions li.mission-name.completed&#39;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="n">mission_name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sign_in_as</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">root_path</span>
</span><span class='line'>  <span class="n">fill_in</span>      <span class="s1">&#39;Email&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">email</span>
</span><span class='line'>  <span class="n">click_button</span> <span class="s1">&#39;Submit&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we extracted four methods that can be easily reused in other tests now. I hope its clear that we hit three birds with one stone. The feature is a lot more consise, it reads better and is made up of extracted components without duplication. Let’s imagine you’d have written all kinds of similar scenarios without extracting these methods and you want to change some implementation. Now you wish you’d taken the time to refactor your tests and have one central place to apply your changes.</p>

<p>Sure there is an even better way to deal with feature specs like this—Page Objects for example—but that’s not our scope for today. I guess that’s all you need to know about extracting methods. You can apply this refactoring pattern everywhere in your code—not only in specs of course. In terms of fequency of use, my guess is that it will be your number one technique to improve the quality of your code. Have fun!</p>

<ul>
<li><h3>Long Parameter List</h3></li>
</ul>


<p>Let’s close this article with an example how you can slim down your parameters. It gets tedious pretty fast when you have to feed your methods more than one or two arguments. Wouldn’t it be nice to drop in one object instead? That’s exactly what you can do if you introduce a <em>parameter object</em>.</p>

<p>All these parameters are not only a pain to write and to keep in order, it can also lead to code duplication—and we certainly want to avoid that wherever possible. What I like especially about this refactoring technique is how this affects other methods inside as well. You often are able to get rid of a lot of parameter junk down in the foodchain as well.</p>

<p>Let’s go over this simple example. M can assign a new mission and needs needs a mission name, an agent, an objective and is also able to switch between double 0 status—meaning their licence to kill.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">M</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assign_new_mission</span><span class="p">(</span><span class="n">mission_name</span><span class="p">,</span> <span class="n">agent_name</span><span class="p">,</span> <span class="n">objective</span><span class="p">,</span> <span class="ss">licence_to_kill</span><span class="p">:</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;Mission </span><span class="si">#{</span><span class="n">mission_name</span><span class="si">}</span><span class="s2"> has been assigned to </span><span class="si">#{</span><span class="n">agent_name</span><span class="si">}</span><span class="s2"> with the objective to </span><span class="si">#{</span><span class="n">objective</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">licence_to_kill</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot; The licence to kill has been granted.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot;The licence to kill has not been granted.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">M</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">assign_new_mission</span><span class="p">(</span><span class="s1">&#39;Octopussy&#39;</span><span class="p">,</span> <span class="s1">&#39;James Bond&#39;</span><span class="p">,</span> <span class="s1">&#39;find the nuclear device&#39;</span><span class="p">,</span> <span class="ss">licence_to_kill</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; Mission Octopussy has been assigned to James Bond with the objective to find the nuclear device. The licence to kill has been granted. </span>
</span></code></pre></td></tr></table></div></figure>


<p>When you look at this and ask what happens when the mission “parameters” grow in complexity then you’re already onto something. That’s a pain point that you can only solve if you pass in a single object that has all the information you need. More often than not, this also helps you to stay away from changing the method if the parameter object changes for some reason.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Mission</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:mission_name</span><span class="p">,</span> <span class="ss">:agent_name</span><span class="p">,</span> <span class="ss">:objective</span><span class="p">,</span> <span class="ss">:licence_to_kill</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">mission_name</span><span class="p">:</span> <span class="n">mission_name</span><span class="p">,</span> <span class="ss">agent_name</span><span class="p">:</span> <span class="n">agent_name</span><span class="p">,</span> <span class="ss">objective</span><span class="p">:</span> <span class="n">objective</span><span class="p">,</span> <span class="ss">licence_to_kill</span><span class="p">:</span> <span class="n">licence_to_kill</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@mission_name</span>    <span class="o">=</span> <span class="n">mission_name</span>
</span><span class='line'>    <span class="vi">@agent_name</span>      <span class="o">=</span> <span class="n">agent_name</span>
</span><span class='line'>    <span class="vi">@objective</span>       <span class="o">=</span> <span class="n">objective</span>
</span><span class='line'>    <span class="vi">@licence_to_kill</span> <span class="o">=</span> <span class="n">licence_to_kill</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assign</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;Mission </span><span class="si">#{</span><span class="n">mission_name</span><span class="si">}</span><span class="s2"> has been assigned to </span><span class="si">#{</span><span class="n">agent_name</span><span class="si">}</span><span class="s2"> with the objective to </span><span class="si">#{</span><span class="n">objective</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">licence_to_kill</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot; The licence to kill has been granted.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot; The licence to kill has not been granted.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">M</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assign_new_mission</span><span class="p">(</span><span class="n">mission</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mission</span><span class="o">.</span><span class="n">assign</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">M</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">mission</span> <span class="o">=</span> <span class="no">Mission</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">mission_name</span><span class="p">:</span> <span class="s1">&#39;Octopussy&#39;</span><span class="p">,</span> <span class="ss">agent_name</span><span class="p">:</span> <span class="s1">&#39;James Bond&#39;</span><span class="p">,</span> <span class="ss">objective</span><span class="p">:</span> <span class="s1">&#39;find the nuclear device&#39;</span><span class="p">,</span> <span class="ss">licence_to_kill</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">assign_new_mission</span><span class="p">(</span><span class="n">mission</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; Mission Octopussy has been assigned to James Bond with the objective to find the nuclear device. The licence to kill has been granted.</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we created a new object, <strong>Mission</strong>, that is soley focused on providing <strong>M</strong> with the information needed to assign a new mission and provide #<strong>assign_new_mission</strong> with a singular paramter object. No need to pass in these pesky parameters yourself. Instead you tell the object to reveal the information you need inside the method itself. Additionally, we also extracted some behaviour—the information how to print—into the new <strong>Mission</strong> object.</p>

<p>Why should <strong>M</strong> need to know about how to print mission assignments? The new #<strong>assign</strong> also benefitted from extraction by loosing some weight because we didn’t need to pass in the parameter object—so no need to write stuff like <strong>mission.mission_name</strong>, <strong>mission.agent_name</strong> and so on. Now we just use our <strong>attr_reader</strong>(s) which is much cleaner than without the extraction. You dig? What’s also handy about this is that <strong>Mission</strong> might collect all sorts of additional methods or states that are nicely encapsulated in one place and ready for you to access.</p>

<p>With this technique you’ll end up with methods that are more concise, they tend to read better and you avoid repeating the same group of parameters all over the place. Pretty good deal! Getting rid of identical groups of parameters is also an important strategy for DRY code. Try to look out for extracting more than just your data. If you can place behaviour in the new class as well you’ll have objects that are more useful—otherwise they’ll quickly start to smell as well.</p>

<p>Sure, most of the time you’ll run into more complicated versions of that—and your tests will certainly also need to be adapted simultaneously during such refactorings—but if you have that simple example under your belt you’ll be ready for action.</p>

<p>I’m gonna watch the new Bond now. Heard its not that good though…
Update: Saw Spectre. My verdict: compared to Skyfall—which was MEH imho—Spectre was wawawiwa!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Page Objects for Capybara Connoisseurs]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/10/26/Page-Objects/"/>
    <updated>2015-10-26T04:29:10+01:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/10/26/Page-Objects</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/Page_Objects/capybara_bigger.png"></p>

<h3>Topics</h3>

<ul>
<li>Acceptance test / feature specs</li>
<li>Different types of Page Objects</li>
<li>What are Page Objects</li>
<li>When and why?</li>
<li><p>How?</p></li>
<li><h3>What are Page Objects?</h3></li>
</ul>


<p>I’ll give you the short pitch first. Its a design pattern to encapsulate markup and page interactions—specifically to refactor your feature specs. Its a combination of a two very common refactoring techniques: <em>Extract class</em> and  <em>Extract method</em>—which don’t have to happen at the same time because you can gradually build up to extracting a whole class via a new Page Object.</p>

<p>This technique offers you to write high-level feature specs that are very expressive and DRY. In a way they are acceptance tests with application language. You might ask, aren’t specs written with Capybara already high-level and expressive? Sure, for developers who write code on a daily basis, Capybara specs read just fine. Are the DRY out of the box? Not really—actually, certainly not!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s1">&#39;M creates a mission&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;successully&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sign_in_as</span> <span class="s1">&#39;M@mi6.com&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">visit</span> <span class="n">missions_path</span>
</span><span class='line'>    <span class="n">click_on</span>     <span class="s1">&#39;Create Mission&#39;</span>
</span><span class='line'>    <span class="n">fill_in</span>      <span class="s1">&#39;Mission Name&#39;</span><span class="p">,</span>  <span class="ss">with</span><span class="p">:</span> <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s1">&#39;Submit&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_css</span> <span class="s1">&#39;li.mission-name&#39;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s1">&#39;M marks mission as complete&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;successfully&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sign_in_as</span> <span class="s1">&#39;M@mi6.com&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">visit</span> <span class="n">missions_path</span>
</span><span class='line'>    <span class="n">click_on</span>     <span class="s1">&#39;Create Mission&#39;</span>
</span><span class='line'>    <span class="n">fill_in</span>      <span class="s1">&#39;Mission Name&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s1">&#39;Octopussy&#39;</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s1">&#39;Submit&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">within</span> <span class="s2">&quot;li:contains(&#39;Octopussy&#39;)&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">click_on</span> <span class="s1">&#39;Mission completed&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_css</span> <span class="s1">&#39;ul.missions li.mission-name.completed&#39;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;Octopussy&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you look at these examples of feature specs, where do you see opportunities to make this read better and how could you extract information to avoid duplication? Also, is this high-level enough for easy modeling of user stories and for non-technical stakeholders to understand? In my mind, there are a couple of ways to improve this and to make everybody happy—developers who can avoid fiddling with the details of interacting with the DOM while applying OOP and other non-coding team members having no trouble jumping between user stories and these tests. The last point is nice to have for sure, but the most important benefits come mostly from making your DOM-interacting specs more robust.</p>

<p>Encapsulation is the key concept with Page Objects. When you write your feature specs you’ll benefit from a strategy to extract the behaviour that is driving through a test flow. For quality code you want to capture the interactions with particular sets of elements on your pages—especially if you stumble upon repeating patterns. As your application grows, you want / need an approach that avoids spreading that logic all over your specs.</p>

<p>”Well isn’t that overkill? Capybara reads just fine!” you say? Ask yourself:
Why wouldn’t you have all the HTML implementation details in one place while having more stable tests? Why shouldn’t UI interaction tests have the same quality as tests for application code? Do you really wanna stop there? Due to everyday changes, your Capybara code is vulnerable when spread all over—it introduces possible breakpoints. Let’s say a designer wants to change the text on a button. No biggie right, but do you want to adapt to that change in one central wrapper for that element in your specs or do you prefer to do that all over the place? I thought so!</p>

<p>There are many refactorings possible for your feature specs but Page Objects offer the cleanest abstractions for encapsulating user facing behaviour for pages or more complex flows. You don’t have to simulate the whole page(s) though—focus on the essential bits that are necessary for user flows. No need to overdo it!</p>

<ul>
<li><h3>Acceptance Tests / Feature Specs</h3></li>
</ul>


<p>Before we move on to the heart of the matter, I’d like to take a step back for people new to the whole testing business and clear up some of the lingo that is important in this context. People more familiar with TDD won’t miss much if they skip ahead.</p>

<p>What are we talking about here? Acceptance testing usually comes in at a later stage of projects to evaluate if you have been building something of value for your users, product owner, or whatever stakeholder. These tests are usually run by customers or your users. Its sort of a check if the requirements are being met or not. There is something like a pyramid for all sorts of testing layers and acceptance tests are near the very top. Because this process includes often non-technical folks, a high-level language for writing these tests is a valuable asset to communicate back and forth.</p>

<p>Feature specs on the other hand, are a bit lower in the testing food chain. A lot more high-level than unit tests which focus on the technial details and business logic of your models, feature specs describe flows on and in between your pages. Tools like <a href="http://jnicklas.github.io/capybara/">Capybara</a> help you to avoid doing this manually—meaning that you rarely have to open your browser to test stuff manually. With these kinds of tests we like to automate these tasks as much as possible and test drive the interaction through the browser while writing assertions against pages. Btw, you don’t use <strong>get</strong>, <strong>put</strong>, <strong>post</strong> or <strong>delete</strong> like with request specs.</p>

<p>Feature specs are very similar to acceptance tests—sometimes I feel the differences are too blurry to really care about the terminology. You write tests that exercise your whole application which often involves a multi-step flow of user actions. These interaction tests show if your components work in harmony when they are brought together. In Ruby land, they are the main protagonist when we’re dealing with Page Objects. Feature specs themselves are already very expressive but they can be optimized and cleaned up by extracting their data, behaviour and markup into (a) separate classe(s). I felt clearing up this blurry terminology will help you see that having Page Objects is a bit like doing acceptance level testing while writing feature specs.</p>

<h3>Capybara</h3>

<p>Maybe we should go over this really quickly as well. This library describes itself as an “Acceptance test framework for web applications”. You can simulate user interactions with your pages via a very powerful and convenient domain-specific language. In my personal opinion, RSpec paired with Capybara offers atm the best way to write your feature specs. It lets you visit pages, fill in forms, click on links and buttons, look for markup on your pages and you are able to easily combine all kinds of these commands to interact with your pages through your tests.</p>

<p>You basically can avoid opening the browser yourself to test this stuff manually most of the time—which is not only less elegant but also a lot more time consuming and error-prone. Without this tool, the process of “Outside-in-testing”–you drive your code from high-level tests down into your unit-level tests—would be a lot more painful and possibly therefore more neglected. In other words you start writing these feature tests which are based on your user stories and from there you go down the rabbit whole until your unit tests provide the coverage your feature specs needed. After that, when your tests are green of course, the game starts anew and you go back up to continue with a fresh feature test.</p>

<ul>
<li><h3>How?</h3></li>
</ul>


<p>Let’s look at two simple examples of feature specs that lets M create classified missions which can then be completed. In the markup, you have a list of missions and a successful completion creates an addtional class <strong>completed</strong> on the <strong>li</strong> of that particular mission. Straightforward stuff right? As a first approach, I started with small, very common refactorings that extract common behaviour into methods.</p>

<p><strong>spec/features/m_creates_a_mission_spec.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">feature</span> <span class="s1">&#39;M creates mission&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;successfully&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sign_in_as</span> <span class="s1">&#39;M@mi6.com&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">create_classified_mission_named</span> <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>      
</span><span class='line'>    <span class="n">agent_sees_mission</span>              <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_classified_mission_named</span><span class="p">(</span><span class="n">mission_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">missions_path</span>
</span><span class='line'>    <span class="n">click_on</span>     <span class="s1">&#39;Create Mission&#39;</span>
</span><span class='line'>    <span class="n">fill_in</span>      <span class="s1">&#39;Mission Name&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">mission_name</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s1">&#39;Submit&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">agent_sees_mission</span><span class="p">(</span><span class="n">mission_mame</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_css</span> <span class="s1">&#39;li.mission-name&#39;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="n">mission_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sign_in_as</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">root_path</span>
</span><span class='line'>    <span class="n">fill_in</span>      <span class="s1">&#39;Email&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">email</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s1">&#39;Submit&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>spec/features/agent_completes_a_mission_spec.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">feature</span> <span class="s1">&#39;M marks mission as complete&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;successfully&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sign_in_as</span> <span class="s1">&#39;M@mi6.com&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">create_classified_mission_named</span> <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>    <span class="n">mark_mission_as_complete</span>        <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent_sees_completed_mission</span>    <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_classified_mission_named</span><span class="p">(</span><span class="n">mission_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">missions_path</span>
</span><span class='line'>    <span class="n">click_on</span>     <span class="s1">&#39;Create Mission&#39;</span>
</span><span class='line'>    <span class="n">fill_in</span>      <span class="s1">&#39;Mission Name&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">mission_name</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s1">&#39;Submit&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mark_mission_as_complete</span><span class="p">(</span><span class="n">mission_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">within</span> <span class="s2">&quot;li:contains(&#39;</span><span class="si">#{</span><span class="n">mission_name</span><span class="si">}</span><span class="s2">&#39;)&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">click_on</span> <span class="s1">&#39;Mission completed&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">agent_sees_completed_mission</span><span class="p">(</span><span class="n">mission_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_css</span> <span class="s1">&#39;ul.missions li.mission-name.completed&#39;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="n">mission_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sign_in_as</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">root_path</span>
</span><span class='line'>    <span class="n">fill_in</span>      <span class="s1">&#39;Email&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">email</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s1">&#39;Submit&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although there are other ways of course to deal with stuff like <strong>sign_in_as</strong>, <strong>create_classified_mission_named</strong> and so on, its easy to see how fast these things can start to suck and to pile up. UI related specs often don’t get the OO treatment they need / deserve I think. They have the reputation of providing too little bang for the buck and of course developers are not most fond of times when they have to touch markup stuff much. In my mind, that makes it even more important to DRY these specs up and make it fun to deal with them by throwing in a couple of Ruby classes.</p>

<p>Let’s do a little magic trick where I hide the Page Object’s implementation for now and only show you the end result applied to the feature specs above:</p>

<p><strong>spec/features/m_creates_a_mission_spec.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">feature</span> <span class="s1">&#39;M creates mission&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;successfully&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sign_in_as</span> <span class="s1">&#39;M@mi6.com&#39;</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">missions_path</span>
</span><span class='line'>    <span class="n">mission_page</span> <span class="o">=</span> <span class="no">Pages</span><span class="o">::</span><span class="no">Missions</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      
</span><span class='line'>    <span class="n">mission_page</span><span class="o">.</span><span class="n">create_classified_mission_named</span> <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">mission_page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_mission_named</span>   <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>spec/features/agent_completes_a_mission_spec.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">feature</span> <span class="s1">&#39;M marks mission as complete&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;successfully&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sign_in_as</span> <span class="s1">&#39;M@mi6.com&#39;</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">missions_path</span>
</span><span class='line'>    <span class="n">mission_page</span> <span class="o">=</span> <span class="no">Pages</span><span class="o">::</span><span class="no">Missions</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mission_page</span><span class="o">.</span><span class="n">create_classified_mission_named</span>         <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>    <span class="n">mission_page</span><span class="o">.</span><span class="n">mark_mission_as_complete</span>                <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">mission_page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_completed_mission_named</span> <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Doesn’t read too bad huh? You basically create expressive wrapper methods on your Page Objects that let you deal with high-level concepts—instead of fiddling everywhere with the intestines of your markup all the time. Your extracted methods do this kind of dirty work now and that way <a href="https://en.wikipedia.org/wiki/Shotgun_surgery"><strong>Shotgun surgery</strong></a> is not your problem anymore. Put differently, you encapsulate most of the noisy, down in the weeds DOM interacting code. Gotta say though, sometimes intelligently extracted methods in your feature specs are sufficient and read a bit better since you can avoid dealing with Page Object instances. Anyway, let’s take a look at the implementation:</p>

<p><strong>specs/support/features/pages/missions.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Pages</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Missions</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">Capybara</span><span class="o">::</span><span class="no">DSL</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_classified_mission_named</span><span class="p">(</span><span class="n">mission_name</span><span class="p">)</span>
</span><span class='line'>      <span class="n">click_on</span>     <span class="s1">&#39;Create Mission&#39;</span>
</span><span class='line'>      <span class="n">fill_in</span>      <span class="s1">&#39;Mission name&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">mission_name</span>
</span><span class='line'>      <span class="n">click_button</span> <span class="s1">&#39;Submit&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">mark_mission_as_complete</span><span class="p">(</span><span class="n">mission_name</span><span class="p">)</span>
</span><span class='line'>      <span class="n">within</span> <span class="s2">&quot;li:contains(&#39;</span><span class="si">#{</span><span class="n">mission_name</span><span class="si">}</span><span class="s2">&#39;)&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">click_on</span> <span class="s1">&#39;Mission completed&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">has_mission_named?</span><span class="p">(</span><span class="n">mission_name</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mission_list</span><span class="o">.</span><span class="n">has_css?</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="n">mission_name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">has_completed_mission_named?</span><span class="p">(</span><span class="n">mission_name</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mission_list</span><span class="o">.</span><span class="n">has_css?</span> <span class="s1">&#39;li.mission-name.completed&#39;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="n">mission_name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">mission_list</span>
</span><span class='line'>      <span class="n">find</span><span class="p">(</span><span class="s1">&#39;ul.missions&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What you see is a plain old Ruby object—Page Objects are in essence very simple classes really. Normally you don’t instantiate Page Objects with data (when the need occurs you can of course) and you create mostly a language via the API that a user or a non-technical stakeholder on a team might use. When you think about naming your methods, I think its good advice to ask yourself the question: How would a user describe the flow or the action taken?</p>

<p>I should maybe add that without including Capybara the music stops pretty fast.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">include</span> <span class="no">Capybara</span><span class="o">::</span><span class="no">DSL</span>
</span></code></pre></td></tr></table></div></figure>


<p>You probably wonder how these custom matchers work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_mission_named</span>           <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_completed_mission_named</span> <span class="s1">&#39;Project Moonraker&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">has_mission_named?</span><span class="p">(</span><span class="n">mission_name</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">has_completed_mission_named?</span><span class="p">(</span><span class="n">mission_name</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>RSpec generates these custom matchers based on predicate methods on your Page Objects. RSpec converts them by removing the <strong>?</strong> and changes <strong>has</strong> to <strong>have</strong>. Boom, matchers from scratch without much fuzz! A bit magic, I’ll give you that, but the good kind of wizardry I’d say.</p>

<p>Since we parked our Page Object at <strong>specs/support/features/pages/missions.rb</strong> you also need to make sure that the following is not commented out in <strong>spec/rails_helper.rb</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;spec/support/**/*.rb&#39;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>If you run into a <strong>NameError</strong> with an <strong>uninitialized constant Pages</strong> you’ll know what to do.</p>

<p>If you’re curious what happened to the <strong>sign_in_as</strong> method, I extracted it into a module at <strong>spec/support/sign_in_helper.rb</strong> and told RSpec to include that module. This has nothing to do with Page Objects directly—it just makes more sense to store test functionality like <strong>sign in</strong> more globally accessible than via a Page Object.</p>

<p><strong>spec/support/sign_in_helper.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">SignInHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sign_in_as</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">root_path</span>
</span><span class='line'>    <span class="n">fill_in</span>      <span class="s1">&#39;Email&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">email</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s1">&#39;Submit&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you need to let RSpec know that you want access to this helper module:</p>

<p><strong>spec/spec_helper.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;support/sign_in_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="no">SignInHelper</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Overall, its easy to see that we succeeded in hiding away the Capybara specifics—like finding elements, clicking links etc. We can now focus on the functionality and less on the actual structure of the markup which is now encapsulated in a Page Object—the DOM structure should be the least of your concerns when you test something as high-level as feature specs.</p>

<h3>Attention!</h3>

<p>Setup stuff like factory data belongs in the specs and not in Page Objects. Also assertions are probably better placed outside of your Page Objects to achieve a separation of concerns. There are two differnt perspectives on the topic:</p>

<p>Advocates for putting assertions into Page Objects say it helps with avoiding duplication of assertions. You can provide better error messages and achieve a better “Tell, Don’t Ask” style. On the other hand, advocates for assertion-free Page Objects argue that its better to not mix responsibilities. Providing access to page data and assertion logic are two separate concerns and lead to bloated Page Objects when mixed. Page Object’s responsibility is access to the state of pages and assertion logic belongs to specs.</p>

<ul>
<li><h3>Page Objects Types</h3></li>
</ul>


<p><strong>Components</strong> represent the smallest units and are more focused—like a form object for example.</p>

<p><strong>Pages</strong> combine more of these components and are abstractions of a full page.</p>

<p><strong>Experiences</strong>, as you guessed by now, span the whole flow across potentially many different pages. They are more high-level. They focus on the flow the user experiences while they interact with various pages. A checkout flow which has a couple of steps is a good example to think about this.</p>

<ul>
<li><h3>When &amp; Why?</h3></li>
</ul>


<p>Its a good idea to apply this design pattern a little bit later in a project’s life cycle—when you have amassed a little bit of complexity in your feature specs and when you can identify repeating patterns like DOM structures, extracted methods or other commonalities that are consistent on your pages. So you probably shouldn’t start writing Page Objects right away. You approach these refactorings gradually when the complexity and size of your application / tests grow. Duplications and refactorings that need a better home through Page Objects will be easier to spot over time. My recommendation is to start with extracting methods in your feature specs locally first. Once they’ll hit critical mass, they’ll look like obvious candidates for further extraction and most of them will probably fit the profile for Page Objects. Start small, premature optimization leaves nasty bite marks!</p>

<ul>
<li><h3>Final Thoughts</h3></li>
</ul>


<p>Page Objects provide you the opportunity to write clearer specs that read better and are overall a lot more expressive because they are more high-level. Besides that, they offer a nice abstraction for everybody who likes to write OO code. They hide the specifics of the DOM and also enable you to have private methods that do the dirty work while being unexposed to the public API. Extracted methods in your feature specs don’t offer quite the same luxury. The API of Page Objects don’t need to share the nitty-gritty Capybare details</p>

<p>For all the scenarios when design implementations change, your descriptions of how your app should work doesn’t need to change when you use Page Objects—your feature specs are more focused with user level interactions and don’t care so much about the specifics of the DOM implementations. Since change is inevitable, Page Objects become critical when applications grow and also aid the understanding when the sheer size of the application means drastically increased complexity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factory Girl 201]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/10/20/Factory-Girl-Guide-02/"/>
    <updated>2015-10-20T05:29:10+02:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/10/20/Factory-Girl-Guide-02</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/Factory-Girl-Guide/Factory_Guide_Association_cropped.png"></p>

<p>My second article about this popular and useful Ruby gem deals with a couple more nuanced topics that beginners don’t necessarily need to concern themselves right away when they get started. Again, I did my best to keep it newbie-accessible and explain every bit of lingo people new to TDD might stumble over.</p>

<h3>Topics</h3>

<ul>
<li>Traits</li>
<li>Aliases</li>
<li>Callbacks</li>
<li>Associations</li>
<li>Lazy attributes</li>
<li>Modifying factories</li>
<li>Transient attributes</li>
<li><p>Dependent attributes</p></li>
<li><h3>Dependent Attributes</h3></li>
</ul>


<p>If you need to use attribute values for composing other factory attributes on the fly Factory Girl has you covered. You just need to wrap the attribute value in a block and interpolate the attributes you need. These blocks have access to an <em>evaluator</em>—which is yielded to them—and which in turn has access to other attributes, even transient ones.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:supervillain</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span>       <span class="s1">&#39;Karl Stromberg&#39;</span>
</span><span class='line'>    <span class="n">passion</span>    <span class="s1">&#39;marine biology&#39;</span>
</span><span class='line'>    <span class="n">ambition</span>   <span class="s1">&#39;human extinction&#39;</span>
</span><span class='line'>    <span class="n">motivation</span> <span class="s1">&#39;save the oceans&#39;</span>
</span><span class='line'>    <span class="n">profile</span>    <span class="p">{</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> has a passion for </span><span class="si">#{</span><span class="n">passion</span><span class="si">}</span><span class="s2"> and aims to </span><span class="si">#{</span><span class="n">motivation</span><span class="si">}</span><span class="s2"> through </span><span class="si">#{</span><span class="n">ambition</span><span class="si">}</span><span class="s2">.&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">villain</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:supervillain</span><span class="p">)</span>
</span><span class='line'><span class="n">villain</span><span class="o">.</span><span class="n">profile</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Karl Stromberg has a passion for marine biology and aims to save the oceans through human extinction.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>Transient Attributes</h3></li>
</ul>


<p>I think its fair to call them fake attributes. These virtual attributes also allow you to pass addtional options when you construct your factory intances—via a hash of course. The instance itself won’t be affected by them since these attributes won’t be set on your factory object. On the other hand, Factory Girl treats transient attributes just like real ones. If you use <strong>attributes_for</strong>, they won’t show up though. <strong>Dependent attributes</strong> and <strong>Callbacks</strong> are able to access these fake attributes inside your factory. Overall, they are another strategy to keep your factories DRY.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:supervillain</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">transient</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">megalomaniac</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">cat_owner</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">name</span>       <span class="s1">&#39;Karl Stromberg&#39;</span>
</span><span class='line'>    <span class="n">passion</span>    <span class="s1">&#39;marine biology&#39;</span>
</span><span class='line'>    <span class="n">ambition</span>   <span class="s1">&#39;human extinction&#39;</span>
</span><span class='line'>    <span class="n">motivation</span> <span class="p">{</span> <span class="s2">&quot;Building an underwater civilization</span><span class="si">#{</span><span class="s2">&quot; and saving the world&quot;</span> <span class="k">if</span> <span class="n">megalomaniac</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">profile</span>    <span class="p">{</span> <span class="s2">&quot;Insane business tycoon</span><span class="si">#{</span><span class="s2">&quot; – friends with Blofeld&quot;</span> <span class="k">if</span> <span class="n">cat_owner</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">villain</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:supervillain</span><span class="p">)</span>
</span><span class='line'><span class="n">villain</span><span class="o">.</span><span class="n">profile</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Insane business tycoon&quot;</span>
</span><span class='line'><span class="n">villain</span><span class="o">.</span><span class="n">motivation</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Building an underwater civilization&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cat_friendly_villain</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:supervillain</span><span class="p">,</span> <span class="ss">cat_owner</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="n">cat_friendly_villain</span><span class="o">.</span><span class="n">profile</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Insane business tycoon – friends with Blofeld&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">narcissistic_villain</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:supervillain</span><span class="p">,</span> <span class="ss">megalomaniac</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="n">narcissistic_villain</span><span class="o">.</span><span class="n">motivation</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Building an underwater civilization and saving the world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The example above turns out to be a bit more DRY since there was no need to create separate factories for supervillains that want to save the world or are friends with Blofeld repectively. Transient attributes give you the flexibility to make all kinds of adjustments and avoid creating a host of ever so similar factories.</p>

<ul>
<li><h3>Lazy attributes</h3></li>
</ul>


<p>“Normal” attributes in Factory Girl are evaluated when the factory is defined. You usually provide static values as parameters to methods with the same name of your attributes. If you want to delay the evaluation until the last possible moment—when the instance gets instantiated—you will need to feed attributes their values via a code block. Associations and dynamically created values from objects like <strong>DateTime</strong> objects will be your most frequent customers for that lazy treatment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:exploding_device</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">transient</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">countdown_seconds</span> <span class="mi">10</span><span class="o">*</span><span class="mi">60</span>
</span><span class='line'>      <span class="n">time_of_explosion</span> <span class="p">{</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">+</span> <span class="n">countdown_seconds</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">time_of_explosion</span> <span class="p">{</span> <span class="s2">&quot;Exploding in </span><span class="si">#{</span><span class="n">countdown_seconds</span><span class="si">}</span><span class="s2"> seconds </span><span class="si">#{</span><span class="n">time_of_explosion</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;at %I:%M %p&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">ticking_device</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:exploding_device</span><span class="p">)</span>
</span><span class='line'><span class="n">ticking_device</span><span class="o">.</span><span class="n">time_of_explosion</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Exploding in 600 seconds at 11:53 PM&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>Modifying Factories</h3></li>
</ul>


<p>Probably not a use case you’ll run into everyday but sometimes you inherit factories from other developers and you want to change them—in case you are using a TDD’d gem for example. If you feel the need to tweak these legacy factories to better fit your specific test scenarios you can modify them without creating new ones or using inheritance.</p>

<p>You do this via <strong>FactoryGirl.modify</strong> and it needs to be outside of that particular <strong>FactoryGirl.define</strong> block that you want to change. What you can’t do is modify <strong>sequence</strong> or <strong>trait</strong>—you can override attributes defined via <strong>trait</strong> though. Callbacks on the “original” factory also won’t be overridden. The callback in your <strong>Factory.modify</strong> block will just be run as next in line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:spy</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span>              <span class="s1">&#39;Marty McSpy&#39;</span>
</span><span class='line'>    <span class="n">skills</span>            <span class="s1">&#39;Espionage and infiltration&#39;</span>
</span><span class='line'>    <span class="n">deployment_status</span> <span class="s1">&#39;Preparing mission&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">modify</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">sequence</span> <span class="ss">:mission_deployment</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
</span><span class='line'>    <span class="s2">&quot;Mission </span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2"> at </span><span class="si">#{</span><span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_formatted_s</span><span class="p">(</span><span class="ss">:short</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:spy</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span>            <span class="s1">&#39;James Bond&#39;</span>
</span><span class='line'>    <span class="n">skills</span>          <span class="s1">&#39;CQC and poker&#39;</span>
</span><span class='line'>    <span class="n">favorite_weapon</span> <span class="s1">&#39;Walther PPK&#39;</span>
</span><span class='line'>    <span class="n">body_count</span>      <span class="s1">&#39;Classified&#39;</span>
</span><span class='line'>    <span class="n">favorite_car</span>    <span class="s1">&#39;Aston Martin DB9&#39;</span>
</span><span class='line'>    <span class="n">deployment</span>      <span class="p">{</span> <span class="n">generate</span><span class="p">(</span><span class="ss">:mission_deployment</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the example above we needed our spies to be a bit more “sophisticated” and use a better mechanism to handle deployment. I have seen examples where gem authors had to deal with time differently and where it was handy to modify factory objects by simply overriding stuff you need to tweak.</p>

<ul>
<li><h3>Callbacks</h3></li>
</ul>


<p>Callbacks allow you to inject some code at various moments in the life cycle of an object—like <strong>save</strong>, <strong>after_save</strong>, <strong>before_validation</strong> and so on. Rails for example offers a whole bunch of them and makes it pretty easy for novices to abuse this power. Keep in mind that callbacks that are not related to the persistance of objects are a known anti-pattern and its good advice to not cross that line. For example, it may seem convenient to use a callback after instantiating something like user to send emails or process some order but these kinds of things invite bugs and create ties that are unnecessarily harder to refactor. Maybe that was one of the reasons why Factory Girl “only” offers you five callback options to play with:</p>

<ul>
<li><p><strong>before(:create)</strong> executes a code block before your factory instance is saved. Activated when you use <strong>create(:some_object)</strong>.</p></li>
<li><p><strong>after(:create)</strong> executes a code block after your factory instance is saved. Activated when you use <strong>create(:some_object)</strong>.</p></li>
<li><p><strong>after(:build)</strong> executes a code block after your factory object has been built in memory. Activated when you use both <strong>build(:some_object)</strong> and <strong>create(:some_object)</strong>.</p></li>
<li><p><strong>after(:stub)</strong> executes a code block after your factory has created a stubbed object. Activated when you use <strong>build_stubbed(:some_object)</strong>.</p></li>
<li><p><strong>custom(:your_custom_callback)</strong> executes a custom callback without the need to prepend <strong>before</strong> or <strong>after</strong>.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:mission</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">objective</span>        <span class="s1">&#39;Stopping the bad dude&#39;</span>
</span><span class='line'>    <span class="n">provided_gadgets</span> <span class="s1">&#39;Mini submarine and shark gun&#39;</span>
</span><span class='line'>    <span class="n">after</span><span class="p">(</span><span class="ss">:build</span><span class="p">)</span>    <span class="p">{</span> <span class="n">assign_support_analyst</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Attention!</h4>

<p>Note that for all callback options, inside the callback blocks, you’ll have access to an instance of the factory via a block parameter. This will come in handy every once in a while, especially with assocations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:double_agent</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">after</span><span class="p">(</span><span class="ss">:stub</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">double_agent</span><span class="o">|</span> <span class="n">assign_new_identity</span><span class="p">(</span><span class="n">double_agent</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below a <strong>Ninja</strong> has a bunch of nasty throwing stars (shuriken) at his disposal. Since you have a <strong>ninja</strong> object in the callback you can easily assign the throwing star to belong to the Ninja. Take a peek at the section about <em>associations</em> if that example leaves you with a couple of question marks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:ninja</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;Ra’s al Ghul&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:ninja_with_shuriken</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">transient</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">number_of_shuriken</span> <span class="mi">10</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">after</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ninja</span><span class="p">,</span> <span class="n">evaluator</span><span class="o">|</span>
</span><span class='line'>        <span class="n">create_list</span><span class="p">(</span><span class="ss">:shuriken</span><span class="p">,</span> <span class="n">evaluator</span><span class="o">.</span><span class="n">number_of_shuriken</span><span class="p">,</span> <span class="ss">ninja</span><span class="p">:</span> <span class="n">ninja</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:shuriken</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span>             <span class="s1">&#39;Hira-shuriken&#39;</span>
</span><span class='line'>    <span class="n">number_of_spikes</span> <span class="s1">&#39;Four&#39;</span>
</span><span class='line'>    <span class="n">ninja</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">ninja</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:ninja</span><span class="p">)</span>
</span><span class='line'><span class="n">ninja</span><span class="o">.</span><span class="n">shurikens</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 0</span>
</span><span class='line'>
</span><span class='line'><span class="n">ninja</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:ninja_with_shuriken</span><span class="p">)</span>
</span><span class='line'><span class="n">ninja</span><span class="o">.</span><span class="n">shurikens</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 10</span>
</span><span class='line'>
</span><span class='line'><span class="n">ninja</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:ninja_with_shuriken</span><span class="p">,</span> <span class="ss">number_of_shuriken</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="n">ninja</span><span class="o">.</span><span class="n">shurikens</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 20</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, through the evaluator object you have access to transient attributes too. That gives you the option to pass in addtional information when you “create” factory objects and need to tweak them on the fly. That gives you all the flexibility needed to play with associations and write expressive test data.</p>

<p>If you find the need to have multiple callbacks on your factory Factory Girl is not standing in your way—even multiple type ones. Naturally, order of execution is top to bottom.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:henchman</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Mr. Hinx&#39;</span>
</span><span class='line'>    <span class="n">after</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">henchman</span><span class="o">|</span> <span class="n">henchman</span><span class="o">.</span><span class="n">send_on_kill_mission</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">after</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="p">{</span> <span class="n">send_cleaner</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:bond_girl</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Lucia Sciarra&#39;</span>
</span><span class='line'>    <span class="n">after</span><span class="p">(</span><span class="ss">:build</span><span class="p">)</span>  <span class="p">{</span> <span class="o">|</span><span class="n">bond_girl</span><span class="o">|</span> <span class="n">bond_girl</span><span class="o">.</span><span class="n">hide_secret_documents</span>  <span class="p">}</span>
</span><span class='line'>    <span class="n">after</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="p">{</span> <span class="n">close_hidden_safe_compartment</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The devil is in the details of course. If you use <strong>create(:some_object)</strong>, both <strong>after(:build)</strong> and <strong>after(:create)</strong> callbacks will be exectuted.</p>

<p>Multiple build strategies can be bundled to execute the same callback as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:spy</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Marty McFly&#39;</span>
</span><span class='line'>    <span class="n">after</span><span class="p">(</span><span class="ss">:stub</span><span class="p">,</span> <span class="ss">:build</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">spy</span><span class="o">|</span> <span class="n">spy</span><span class="o">.</span><span class="n">assign_new_mission</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last but not least, you can even setup something like “global” callbacks that override callbacks for all factories—at least in that particular file if you have separated them into multiple factory files.</p>

<p><strong>factories/gun.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:stub</span><span class="p">,</span> <span class="ss">:build</span><span class="p">,</span> <span class="ss">:create</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">object</span><span class="o">|</span> <span class="n">object</span><span class="o">.</span><span class="n">assign_serial_number</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:spy_gun</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Walther PPK&#39;</span>
</span><span class='line'>    <span class="n">ammunition</span> <span class="s1">&#39;7.65mm Browning&#39;</span>
</span><span class='line'>    <span class="n">association</span> <span class="ss">:owner</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:golden_gun</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">name</span> <span class="s1">&#39;Custom Lazar&#39;</span>
</span><span class='line'>      <span class="n">ammunition</span> <span class="s1">&#39;24-carat gold bullet&#39;</span>
</span><span class='line'>      <span class="n">after</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">golden_gun</span><span class="o">|</span> <span class="n">golden_gun</span><span class="o">.</span><span class="n">erase_serial_number</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Attention!</h3>

<p>If you use inheritance to compose child factories the callbacks on the parent will be inherited as well.</p>

<h3>The Last Mile</h3>

<p>Let’s bring it all together in the following sections about <em>associations</em> and <em>traits</em>—yes I also sneaked in <strong>alias</strong> because it was the best place without jumping all over the place. If you have paid attention and remember stuff from the first article everything should fall quite neatly into place now .</p>

<ul>
<li><h3>Associations</h3></li>
</ul>


<p>Associations are essential to every self respecting web app that has a little bit of complexity. A post that belongs to a user, a listing that has many ratings and so forth are the bread and butter developers have for breakfast any day of the week. Seen from that perspective it, becomes obvious that for more complex scenarios factories need to be bullet proof and easy to handle—at least in order to not mess with your TDD mojo. Emulating model associations via FactoryGirl is relatively straightforward I’d say. That in itself is quite amazing in my mind. Achieving a high level of ease and convenience for building complex data sets makes the practice of TDD a no-brainer and so much more effective.</p>

<p>The new Q has hacker skills and needs to own a decent computer right? In this case you have a <strong>Computer</strong> class and its instances belong to instances of the <strong>Quartermaster</strong> class. Easy right?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:quartermaster</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span>   <span class="s1">&#39;Q&#39;</span>
</span><span class='line'>    <span class="n">skills</span> <span class="s1">&#39;Inventing stuff&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:computer</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">model</span> <span class="s1">&#39;Custom Lenovo ThinkPad W Series&#39;</span>
</span><span class='line'>    <span class="n">quartermaster</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What about something a bit more involved? Let’s say our spies use a <strong>gun</strong> that has_many <strong>cartridges</strong> (bullets).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Cartridge</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:gun</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Gun</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:cartridges</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:cartridge</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">caliber</span> <span class="s1">&#39;7.65&#39;</span>
</span><span class='line'>    <span class="n">gun</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:gun</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Walther PPK&#39;</span>
</span><span class='line'>    <span class="n">ammunition</span> <span class="s1">&#39;7.65mm Browning&#39;</span>
</span><span class='line'>    <span class="n">caliber</span>    <span class="s1">&#39;7.65&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:gun_with_ammo</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">transient</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">magazine_size</span> <span class="mi">10</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">after</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">gun</span><span class="p">,</span> <span class="n">evaluator</span><span class="o">|</span>
</span><span class='line'>        <span class="n">create_list</span><span class="p">(</span><span class="ss">:cartridge</span><span class="p">,</span> <span class="n">evaluator</span><span class="o">.</span><span class="n">magazine_size</span><span class="p">,</span> <span class="ss">gun</span><span class="p">:</span> <span class="n">gun</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Callbacks come in pretty handy with associtations huh? Now you can build a gun with or without ammunition. Via the hash <strong>gun: gun</strong> you provided the <strong>cartridge</strong> factory with the necessary information to create the association via the <strong>foreign_key</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">spy_gun</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:gun</span><span class="p">)</span>
</span><span class='line'><span class="n">spy_gun</span><span class="o">.</span><span class="n">cartridges</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 0</span>
</span><span class='line'>
</span><span class='line'><span class="n">spy_gun_with_ammo</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:gun_with_ammo</span><span class="p">)</span>
</span><span class='line'><span class="n">spy_gun_with_ammo</span><span class="o">.</span><span class="n">cartridges</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need another magazine size you can pass it in via your <strong>transient attribute</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">big_magazine_gun</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:gun_with_ammo</span><span class="p">,</span> <span class="ss">magazine_size</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="n">big_magazine_gun</span><span class="o">.</span><span class="n">cartridges</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 20</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what about the different build strategies? Wasn’t there something fishy? Well, here’s what you need to remember: If you use <strong>create</strong> for associated objects both of them will be saved. So <strong>create(:quartermaster)</strong> will build and save both Q and his Thinkpad. I better use <strong>build</strong> then if I want to avoid hitting the database right? Good idea but <strong>build</strong> would only apply to <strong>quartermaster</strong> in our example—the associated <strong>computer</strong> would still get saved. A bit tricky I know. Here’s what you can do if you need to avoid saving the associated object—you specify the build strategy you need for your association.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:quartermaster</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span>   <span class="s1">&#39;Q&#39;</span>
</span><span class='line'>    <span class="n">skills</span> <span class="s1">&#39;Inventing stuff&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:computer</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">model</span> <span class="s1">&#39;Custom Lenovo ThinkPad W Series&#39;</span>
</span><span class='line'>    <span class="n">association</span> <span class="ss">:quartermaster</span><span class="p">,</span> <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You name the associated factory object and pass in a hash with your build strategy. You need to use the explicit <strong>association</strong> call for this to work. The example below won’t work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="ss">:computer</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">model</span> <span class="s1">&#39;Custom Lenovo ThinkPad W Series&#39;</span>
</span><span class='line'>  <span class="n">quartermaster</span><span class="p">,</span> <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now both objects use <strong>build</strong> and nothing gets saved to the database. We can check that assumption by using <strong>new_record?</strong> which returns <strong>true</strong> if the instance hasn’t been persisted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">thinkpad</span> <span class="o">=</span> <span class="n">build</span><span class="p">(</span><span class="ss">:computer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">thinkpad</span><span class="o">.</span><span class="n">new_record?</span>               <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">thinkpad</span><span class="o">.</span><span class="n">quartermaster</span><span class="o">.</span><span class="n">new_record?</span> <span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>While we’re at it, via the explicit <strong>association</strong> call you can also refer to different factory names and change attributes on the fly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:quartermaster</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Q&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:computer</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">model</span> <span class="s1">&#39;Custom Lenovo ThinkPad W Series&#39;</span>
</span><span class='line'>    <span class="n">association</span> <span class="ss">:hacker</span><span class="p">,</span> <span class="ss">factory</span><span class="p">:</span> <span class="ss">:quartermaster</span><span class="p">,</span> <span class="ss">skills</span><span class="p">:</span> <span class="s1">&#39;Hacking&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s close this chapter with an example that is <strong>polymorphic</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Spy</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:spyable</span><span class="p">,</span> <span class="ss">polymorpic</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MIFive</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:spies</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:spyable</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MISix</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:spies</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:spyable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:mifive</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span>               <span class="s1">&#39;Military Intelligence, Section 5&#39;</span>
</span><span class='line'>    <span class="n">principal_activity</span> <span class="s1">&#39;Domestic counter-intelligence&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:misix</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span>               <span class="s1">&#39;Military Intelligence, Section 6&#39;</span>
</span><span class='line'>    <span class="n">principal_activity</span> <span class="s1">&#39;Foreign counter-intelligence&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:mifive_spy</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="no">Spy</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;005&#39;</span>
</span><span class='line'>    <span class="n">association</span> <span class="ss">:spyable</span><span class="p">,</span> <span class="ss">factory</span><span class="p">:</span> <span class="ss">:mifive</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:misix_spy</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="no">Spy</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;006&#39;</span>
</span><span class='line'>    <span class="n">association</span> <span class="ss">:spyable</span><span class="p">,</span> <span class="ss">factory</span><span class="p">:</span> <span class="ss">:misix</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># MI5 agents</span>
</span><span class='line'><span class="n">mifive</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:mifive</span><span class="p">)</span>
</span><span class='line'><span class="n">mifive_spy</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:mifive_spy</span><span class="p">)</span>
</span><span class='line'><span class="n">mifive</span><span class="o">.</span><span class="n">spies</span> <span class="o">&lt;&lt;</span> <span class="n">mifive_spy</span>
</span><span class='line'>
</span><span class='line'><span class="n">mifive</span><span class="o">.</span><span class="n">name</span>             <span class="c1"># =&gt; &quot;Military Intelligence, Section 5&quot;</span>
</span><span class='line'><span class="n">mifive_spy</span><span class="o">.</span><span class="n">name</span>         <span class="c1"># =&gt; &#39;005&#39;</span>
</span><span class='line'><span class="n">mifive</span><span class="o">.</span><span class="n">spies</span><span class="o">.</span><span class="n">length</span>     <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="n">mifive</span><span class="o">.</span><span class="n">spies</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &#39;005&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># MI6 agents</span>
</span><span class='line'><span class="n">misix</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:misix</span><span class="p">)</span>
</span><span class='line'><span class="n">misix_spy_01</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:misix_spy</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;007&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">misix_spy_02</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:misix_spy</span><span class="p">)</span>
</span><span class='line'><span class="n">misix</span><span class="o">.</span><span class="n">spies</span> <span class="o">&lt;&lt;</span> <span class="n">misix_spy_01</span>
</span><span class='line'><span class="n">misix</span><span class="o">.</span><span class="n">spies</span> <span class="o">&lt;&lt;</span> <span class="n">misix_spy_02</span>
</span><span class='line'>
</span><span class='line'><span class="n">misix</span><span class="o">.</span><span class="n">name</span>              <span class="c1"># =&gt; &quot;Military Intelligence, Section 6&quot;</span>
</span><span class='line'><span class="n">misix</span><span class="o">.</span><span class="n">spies</span><span class="o">.</span><span class="n">length</span>      <span class="c1"># =&gt; 2</span>
</span><span class='line'><span class="n">misix_spy_01</span><span class="o">.</span><span class="n">name</span>       <span class="c1"># =&gt; &#39;007&#39;</span>
</span><span class='line'><span class="n">misix_spy_02</span><span class="o">.</span><span class="n">name</span>       <span class="c1"># =&gt; &#39;006&#39;</span>
</span><span class='line'><span class="n">misix</span><span class="o">.</span><span class="n">spies</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">name</span>  <span class="c1"># =&gt; &#39;007&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don’t feel bad if this one needs a bit more time to sink in. I recommend catching up on <a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations"><strong>Polymorphic Associations</strong></a> if you’re unsure what’s going on here.</p>

<ul>
<li><h3>Aliases</h3></li>
</ul>


<p>Aliases for your factories allow you to be more expressive about the context that you are using your factory objects in. You only need to provide a hash of alternative names that better describe the relationship between associated objects.</p>

<p> Let’s say you have an <strong>:agent</strong> factory and a <strong>:law_enforcement_vehicle</strong> factory. Wouldn’t it be nice to refer to the agent as <strong>:owner</strong> in the context of these cars? In the example below I contrasted it with an example without an alias.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:agent</span><span class="p">,</span> <span class="ss">aliases</span><span class="p">:</span> <span class="o">[</span><span class="ss">:owner</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span>   <span class="s1">&#39;Fox Mulder&#39;</span>
</span><span class='line'>    <span class="n">job</span>    <span class="s1">&#39;Chasing bad dudes&#39;</span>
</span><span class='line'>    <span class="n">special_skills</span> <span class="s1">&#39;Investigation and intelligence&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:double_O_seven</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">name</span> <span class="s1">&#39;James Bond&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:law_enforcement_vehicle</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Oldsmobile Achieva&#39;</span>
</span><span class='line'>    <span class="n">kind</span> <span class="s1">&#39;Compact car&#39;</span>
</span><span class='line'>    <span class="ss">:owner</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:spy_car</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Aston Martin DB9&#39;</span>
</span><span class='line'>    <span class="n">kind</span> <span class="s1">&#39;Sports car&#39;</span>
</span><span class='line'>    <span class="n">double_O_seven</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Attention!</h4>

<p>Don’t forget to add a colon in front of the aliased factory (<strong>:owner</strong>) when you use them for associations in your factories. The documentation and many blog posts use them without colons in these cases. All you get is probably a <strong>NoMethodError</strong> because you are missing a setter method for that alias now. (I’ll better open a pull request) The first time I ran into this baffled me and took me a a bit get passed it. Remember to sometimes selectively distrust documentations and blogs posts. Yours truly as well of course.</p>

<p> I think you’ll agree that using aliases it not only reads better but it also gives you or the person who comes after you a bit more context about the objects in question. Yeah, you need to use plural <strong>:aliases</strong> also if you have only a single alias.</p>

<p>You could write this a bit different as well—a lot more verbose.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="ss">:agent</span><span class="p">,</span> <span class="ss">aliases</span><span class="p">:</span> <span class="o">[</span><span class="ss">:mulder</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span>   <span class="s1">&#39;Fox Mulder&#39;</span>
</span><span class='line'>  <span class="n">job</span>    <span class="s1">&#39;Chasing bad dudes&#39;</span>
</span><span class='line'>  <span class="n">special_skills</span> <span class="s1">&#39;Investigation and intelligence&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">factory</span> <span class="ss">:law_enforcement_vehicle</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s1">&#39;Oldsmobile Achieva&#39;</span>
</span><span class='line'>  <span class="n">kind</span> <span class="s1">&#39;Compact car&#39;</span>
</span><span class='line'>  <span class="n">association</span> <span class="ss">:owner</span><span class="p">,</span> <span class="ss">factory</span><span class="p">:</span> <span class="ss">:agent</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, not that neat isn’t it?</p>

<p>Of course you can use these aliases also to “build” factory objects right away.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fbi_agent</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:mulder</span><span class="p">)</span>
</span><span class='line'><span class="n">fbi_agent</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &#39;Fox Mulder&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the context of comments, a <strong>:user</strong> could be referred to as <strong>:commenter</strong>, in the case of a <strong>:crime</strong> a <strong>:user</strong> could be aliased as a <strong>:suspect</strong> and so on. Its no rocket science really—more like convenient syntactic sugar that decreases your temptation for duplication.</p>

<ul>
<li><h3>Traits</h3></li>
</ul>


<p>This is one of my favorite things about Factory Girl. In a nutshell, traits are lego-like blocks to build your factories and mix in behaviour. They are comma separated lists of symbol traits / attributes that you wanna add-on to a particular factory and they are also defined in your factories file(s). In my mind, <strong>trait</strong> is the most powerful and convenient function to keep your factory data DRY while being expressive at the same time. It allows you to bundle groups of attributes together, give them separate names and reuse them wherever you please. Remember when I urged you to define barebones factory objects? Traits will help you achieve exactly that without sacrificing any conveniences.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:spy_car</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">model</span>         <span class="s1">&#39;Aston Martin DB9&#39;</span>
</span><span class='line'>    <span class="n">top_speed</span>     <span class="s1">&#39;295 km/h&#39;</span>
</span><span class='line'>    <span class="n">build_date</span>    <span class="s1">&#39;2015&#39;</span>
</span><span class='line'>    <span class="n">ejection_seat</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:submarine</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">ejection_seat</span>              <span class="kp">false</span>
</span><span class='line'>      <span class="n">water_resistant</span>            <span class="s1">&#39;100 m&#39;</span>
</span><span class='line'>      <span class="n">submarine_capabilities</span>     <span class="kp">true</span>
</span><span class='line'>      <span class="n">air_independent_propulsion</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:weaponized</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">rockets</span>           <span class="kp">true</span>
</span><span class='line'>      <span class="n">number_of_rockets</span> <span class="s1">&#39;12&#39;</span>
</span><span class='line'>      <span class="n">machine_gun</span>       <span class="kp">true</span>
</span><span class='line'>      <span class="n">rate_of_fire</span>      <span class="s1">&#39;1,500 RPM&#39;</span>
</span><span class='line'>      <span class="n">tank_armour</span>       <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:cloaked</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">active_camouflage</span> <span class="kp">true</span>
</span><span class='line'>      <span class="n">radar_signature</span>   <span class="s1">&#39;reduced&#39;</span>
</span><span class='line'>      <span class="n">engine</span>            <span class="s1">&#39;silenced&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:night_vision</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">infrared_sensors</span> <span class="kp">true</span>
</span><span class='line'>      <span class="n">heads_up_display</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, if you want to change some attributes that are spread over multiple objects, you can do that now in one central place. No shotgun surgery necessary. Managing state via traits couldn’t be more convenient. With that setup you can build pretty elaborate spy cars by mixing the various attribute bundles however you like—without duplicating anything via creating all sorts of new factories that account for all the various options you need.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">invisible_spy_car</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:spy_car</span><span class="p">,</span> <span class="ss">:cloaked</span><span class="p">,</span> <span class="ss">:night_vision</span><span class="p">)</span>
</span><span class='line'><span class="n">diving_spy_car</span>    <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:spy_car</span><span class="p">,</span> <span class="ss">:submarine</span><span class="p">,</span> <span class="ss">:cloaked</span><span class="p">)</span>
</span><span class='line'><span class="n">tank_spy_car</span>      <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:spy_car</span><span class="p">,</span> <span class="ss">:weaponized</span><span class="p">,</span> <span class="ss">:night_vision</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use traits with <strong>create</strong>, <strong>build</strong>, <strong>build_stubbed</strong> and <strong>attributes_for</strong>. If Q gets clever, you can also ovverride individual attributes simultaneously by passing in a hash.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">build</span><span class="p">(</span><span class="ss">:spy_car</span><span class="p">,</span> <span class="ss">:submarine</span><span class="p">,</span> <span class="ss">ejection_seat</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>For trait combinations that occur very frequently on a particular factory you can also create child factories with names that best represent the various data set combos. That way you bundle their traits only once as opposed to all the time when you create test data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGir</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:spy_car</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">model</span>         <span class="s1">&#39;Aston Martin DB9&#39;</span>
</span><span class='line'>    <span class="n">top_speed</span>     <span class="s1">&#39;295 km/h&#39;</span>
</span><span class='line'>    <span class="n">build_date</span>    <span class="s1">&#39;2015&#39;</span>
</span><span class='line'>    <span class="n">ejection_seat</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:submarine</span> <span class="k">do</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:weaponized</span> <span class="k">do</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:cloaked</span> <span class="k">do</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:night_vision</span> <span class="k">do</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:invisible_spy_car</span><span class="p">,</span> <span class="ss">traits</span><span class="p">:</span> <span class="o">[</span><span class="ss">:cloaked</span><span class="p">,</span> <span class="ss">:night_vision</span><span class="o">]</span>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:diving_spy_car</span><span class="p">,</span>    <span class="ss">traits</span><span class="p">:</span> <span class="o">[</span><span class="ss">:submarine</span><span class="p">,</span> <span class="ss">:cloaked</span><span class="o">]</span>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:tank_spy_car</span><span class="p">,</span>      <span class="ss">traits</span><span class="p">:</span> <span class="o">[</span><span class="ss">:weaponized</span><span class="p">,</span> <span class="ss">:night_vision</span><span class="o">]</span>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:ultimate_spy_car</span><span class="p">,</span>  <span class="ss">traits</span><span class="p">:</span> <span class="o">[</span><span class="ss">:cloaked</span><span class="p">,</span> <span class="ss">:night_vision</span><span class="p">,</span> <span class="ss">:submarine</span><span class="p">,</span> <span class="ss">:weaponized</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This let’s you create these objects more much concise—more readable too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:invisible_spy_car</span><span class="p">)</span>
</span><span class='line'><span class="n">create</span><span class="p">(</span><span class="ss">:ultimate_spy_car</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:spy_car</span><span class="p">,</span> <span class="ss">:cloaked</span><span class="p">,</span> <span class="ss">:night_vision</span><span class="p">)</span>
</span><span class='line'><span class="n">create</span><span class="p">(</span><span class="ss">:spy_car</span><span class="p">,</span> <span class="ss">:cloaked</span><span class="p">,</span> <span class="ss">:night_vision</span><span class="p">,</span> <span class="ss">:submarine</span><span class="p">,</span> <span class="ss">:weaponized</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reads much better no? Especially when no variable names are involved.</p>

<p>You can even reuse traits as attributes on other traits and factories. If you define the same attributes for multiple traits, the last one defined gets precedence of course.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:spy_car</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">model</span>         <span class="s1">&#39;Aston Martin DB9&#39;</span>
</span><span class='line'>    <span class="n">top_speed</span>     <span class="s1">&#39;295 km/h&#39;</span>
</span><span class='line'>    <span class="n">build_date</span>    <span class="s1">&#39;2015&#39;</span>
</span><span class='line'>    <span class="n">ejection_seat</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:submarine</span> <span class="k">do</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:weaponized</span> <span class="k">do</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:cloaked</span> <span class="k">do</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:night_vision</span> <span class="k">do</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:mobile_surveillance</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">cloaked</span>
</span><span class='line'>      <span class="n">night_vision</span>
</span><span class='line'>      <span class="n">signal_detector</span>      <span class="kp">true</span>
</span><span class='line'>      <span class="n">signal_analyzer</span>      <span class="kp">true</span>
</span><span class='line'>      <span class="n">wifi_war_driver</span>      <span class="kp">true</span>
</span><span class='line'>      <span class="n">license_plate_reader</span> <span class="kp">true</span>
</span><span class='line'>      <span class="n">mini_drone</span>           <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:ultimate_spy_car</span><span class="p">,</span> <span class="ss">parent</span><span class="p">:</span> <span class="ss">:spy_car</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">car_plane</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">submarine</span>
</span><span class='line'>    <span class="n">weaponized</span>
</span><span class='line'>    <span class="n">mobile_surveillance</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pay attention to the <strong>mobile_surveillance</strong> trait which reuses the <strong>cloaked</strong> and <strong>night_vision</strong> traits—basically as an attribute. Also the <strong>ultimate_spy_car</strong> factory, which I separated out of the <strong>spy_car</strong> factory definition for fun this time, reuses all traits plus an additional attribute that makes it fly too. Pure movie magic—or maybe I should say FactoryGirl magic.</p>

<p><strong>create_list</strong> and <strong>build_list</strong> can also make use of traits. The second parameter needs to be the number of factory instances you want.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create_list</span><span class="p">(</span><span class="ss">:spy_car</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">:night_vision</span><span class="p">)</span>
</span><span class='line'><span class="n">build_list</span><span class="p">(</span><span class="ss">:spy_car</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="ss">:submarine</span><span class="p">,</span> <span class="ss">:cloaked</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wouldn’t it be cool to use associations with traits? Of course you can pack callbacks and associations neatly into traits. Duh!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:cartridge</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">kind</span>       <span class="s1">&#39;Small calliber pistol ammunition&#39;</span>
</span><span class='line'>    <span class="n">caliber</span>    <span class="s1">&#39;7.65&#39;</span>
</span><span class='line'>    <span class="n">projectile</span> <span class="s1">&#39;Lead&#39;</span>
</span><span class='line'>    <span class="n">gun</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:golden_cartridge</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">projectile</span> <span class="s1">&#39;Gold&#39;</span>
</span><span class='line'>      <span class="n">association</span> <span class="ss">:gun</span><span class="p">,</span> <span class="ss">:golden</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:gun</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Walther PPK&#39;</span>
</span><span class='line'>    <span class="n">ammunition</span> <span class="s1">&#39;7.65mm Browning&#39;</span>
</span><span class='line'>    <span class="n">caliber</span>    <span class="s1">&#39;7.65&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">transient</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">magazine_size</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:golden</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">name</span> <span class="s1">&#39;Custom Lazar&#39;</span>
</span><span class='line'>      <span class="n">ammunition</span> <span class="s1">&#39;23-carat gold bullet&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:with_ammo</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">after</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">gun</span><span class="p">,</span> <span class="n">evaluator</span><span class="o">|</span>
</span><span class='line'>        <span class="n">create_list</span><span class="p">(</span><span class="ss">:cartridge</span><span class="p">,</span> <span class="n">evaluator</span><span class="o">.</span><span class="n">magazine_size</span><span class="p">,</span> <span class="ss">gun</span><span class="p">:</span> <span class="n">gun</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trait</span> <span class="ss">:with_golden_ammo</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">after</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">golden_gun</span><span class="p">,</span> <span class="n">evaluator</span><span class="o">|</span>
</span><span class='line'>        <span class="n">create_list</span><span class="p">(</span><span class="ss">:golden_cartridge</span><span class="p">,</span> <span class="n">evaluator</span><span class="o">.</span><span class="n">magazine_size</span><span class="p">,</span> <span class="ss">gun</span><span class="p">:</span> <span class="n">golden_gun</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>How to use them should be boring by now.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cartridge</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:cartridge</span><span class="p">)</span>
</span><span class='line'><span class="n">cartridge</span><span class="o">.</span><span class="n">projectile</span>     <span class="c1"># =&gt; &#39;Lead&#39;</span>
</span><span class='line'><span class="n">cartridge</span><span class="o">.</span><span class="n">gun</span><span class="o">.</span><span class="n">name</span>       <span class="c1"># =&gt; &#39;Walther PPK&#39;</span>
</span><span class='line'><span class="n">cartridge</span><span class="o">.</span><span class="n">gun</span><span class="o">.</span><span class="n">ammunition</span> <span class="c1"># =&gt; &#39;7.65mm Browning&#39;</span>
</span><span class='line'><span class="n">cartridge</span><span class="o">.</span><span class="n">gun</span><span class="o">.</span><span class="n">caliber</span>    <span class="c1"># =&gt; &#39;7.65&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">golden_cartridge</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:golden_cartridge</span><span class="p">)</span>
</span><span class='line'><span class="n">golden_cartridge</span><span class="o">.</span><span class="n">projectile</span>     <span class="c1"># =&gt; &#39;Gold&#39;</span>
</span><span class='line'><span class="n">golden_cartridge</span><span class="o">.</span><span class="n">gun</span><span class="o">.</span><span class="n">name</span>       <span class="c1"># =&gt; &#39;Custom Lazar&#39;</span>
</span><span class='line'><span class="n">golden_cartridge</span><span class="o">.</span><span class="n">gun</span><span class="o">.</span><span class="n">ammunition</span> <span class="c1"># =&gt; &#39;23-carat gold bullet&#39;</span>
</span><span class='line'><span class="n">golden_cartridge</span><span class="o">.</span><span class="n">gun</span><span class="o">.</span><span class="n">caliber</span>    <span class="c1"># =&gt; &#39;7.65&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gun_with_ammo</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:gun</span><span class="p">,</span> <span class="ss">:with_ammo</span><span class="p">)</span>
</span><span class='line'><span class="n">gun_with_ammo</span><span class="o">.</span><span class="n">name</span>                        <span class="c1"># =&gt; &#39;Walther PPK&#39;</span>
</span><span class='line'><span class="n">gun_with_ammo</span><span class="o">.</span><span class="n">ammunition</span>                  <span class="c1"># =&gt; &#39;7.65mm Browning&#39; </span>
</span><span class='line'><span class="n">gun_with_ammo</span><span class="o">.</span><span class="n">cartridges</span><span class="o">.</span><span class="n">length</span>           <span class="c1"># =&gt; 10</span>
</span><span class='line'><span class="n">gun_with_ammo</span><span class="o">.</span><span class="n">cartridges</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">projectile</span> <span class="c1"># =&gt; &#39;Lead&#39;</span>
</span><span class='line'><span class="n">gun_with_ammo</span><span class="o">.</span><span class="n">cartridges</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">caliber</span>    <span class="c1"># =&gt; &#39;7.65&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">golden_gun_with_golden_ammo</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:gun</span><span class="p">,</span> <span class="ss">:golden</span><span class="p">,</span> <span class="ss">:with_golden_ammo</span><span class="p">)</span>
</span><span class='line'><span class="n">golden_gun_with_golden_ammo</span><span class="o">.</span><span class="n">name</span>                        <span class="c1"># =&gt; &#39;Custom Lazar&#39;</span>
</span><span class='line'><span class="n">golden_gun_with_golden_ammo</span><span class="o">.</span><span class="n">ammunition</span>                  <span class="c1"># =&gt; &#39;24-carat gold bullet&#39; </span>
</span><span class='line'><span class="n">golden_gun_with_golden_ammo</span><span class="o">.</span><span class="n">cartridges</span><span class="o">.</span><span class="n">length</span>           <span class="c1"># =&gt; 10</span>
</span><span class='line'><span class="n">golden_gun_with_golden_ammo</span><span class="o">.</span><span class="n">cartridges</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">projectile</span> <span class="c1"># =&gt; &#39;Gold&#39;</span>
</span><span class='line'><span class="n">golden_gun_with_golden_ammo</span><span class="o">.</span><span class="n">cartridges</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">caliber</span>    <span class="c1"># =&gt; &#39;7.65&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>Final Thoughts</h3></li>
</ul>


<p>Last words of wisdom: Change is your constant companion—needing to change attributes or data types happens all the time. Design decisions like these evolve. Traits will ease the pain with that and helps you manage your data sets. Imagine if you’d have used an options hash for instantiation and that requirement totally changed. How many potential places in your tests might break and will now need attention? Straight up, <strong>trait</strong> is a very effective tool for eliminating duplication in your test suite. But with all that convenience, don’t be lazy and forget your unit tests on the columns that are represented by your traits! That way you give them the same amount of care as the barebones attributes needed for valid objects.</p>

<p>There is a bit more to discover in FactoryGirl and I’m confident you are now more than well equipped to put the pieces together when you need them. Have fun playing with this gem. I hope your TDD habits will benefit from it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factory Girl 101]]></title>
    <link href="http://vis-kid.github.io/octo-draft/blog/2015/10/12/Factory-Girl-Guide-01/"/>
    <updated>2015-10-12T05:29:10+02:00</updated>
    <id>http://vis-kid.github.io/octo-draft/blog/2015/10/12/Factory-Girl-Guide-01</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octo-draft/images/Factory-Girl-Guide/hine-lewis-national-child-labor-committee-collection.jpg"></p>

<p><a href="https://github.com/thoughtbot/factory_girl"><img src="http://vis-kid.github.io/octo-draft/images/Factory-Girl-Guide/Factory-Girl-Icon.png" width="150"></a></p>

<p>This two-part mini-series was written for people who quickly wanna jump into working with Factory Girl and cut to the chase without digging through the documentation for themselves too much. For folks who started to play with tests rather recently I did my best to keep it newbie-friendly. Obviously having been in the same shoes at some point made me believe that it doesn’t take much to make new people feel more comfortable with testing. Taking a bit more time to explain the context and demystifying the lingo goes a long way in cutting down frustration rates for beginners imho.</p>

<h3>Contents</h3>

<ul>
<li>Intro &amp; Context</li>
<li>Fixtures</li>
<li>Configuration</li>
<li>Defining factories</li>
<li>Using factories</li>
<li>Inheritance</li>
<li>Multiple records</li>
<li><p>Sequences</p></li>
<li><h3>Intro &amp; Context</h3></li>
</ul>


<p>Let’s start with a little bit of history and talk about the fine folks at <a href="https://thoughtbot.com/">thoughtbot</a> who are responsible for this popular Ruby gem. Back in 2007/2008 <a href="https://github.com/jferris">Joe Ferries</a>, CTO at thoughtbot, had had it with fixtures and started to cook up his own solution. Going through various files to test a single method was a common pain point while dealing with fixtures. Put differently and ignoring all kinds of inflexiblities, that practice also lead to writing tests that don’t tell you much about their context being tested right away.</p>

<p>Not being sold on that current practice made him check out various solutions for factories but none of them supported everything he wanted. So he came up with Factory Girl which made testing with test data more readable, DRY and also more explicit by giving you the context for every test. A couple of years later, <a href="https://twitter.com/joshuaclayton">Josh Clayton</a>, Development Director at @thoughtbot in Boston, took over as the maintainer of the project. Over time this gem has grown steadily and became a “fixture” in the Ruby community.</p>

<p>Let’s talk more about the main pain points Factory Girl solves. When you build your test suite you’re dealing with a lot of associated records and with information that’s changing frequently. You want to be able to build data sets for your integration tests that are not brittle, easy to manage and explicit. Your data factories should be dynamic and able to refer to other factories—something that is in part beyond YAML fixtures from the old days. Another convenience you want to have is the ability to overwrite attributes for objects on the fly. Factory Girl allows you to do all of that effortlessly—given the fact that it is written in Ruby and a lot of Metaprogramming witchraft is going on behind the scenes—and you are provided with a great domain-specific language that is easy on the eyes too.</p>

<p>Building up your fixture data with this gem can be described as easy, effective and overall more convenient than fiddling with fixtures. That way you can deal more with concepts than with the actual columns in the database. But enough of talking the talk, let’s get our hands a bit dirty.</p>

<ul>
<li><h3>Fixtures?</h3></li>
</ul>


<p>Folks who have experience with testing applications and who don’t need to learn about the concept of fixtures, please feel free to jump right ahead to the next section. This one is for newbies who just need an update about testing data.</p>

<p>Fixtures are sample data—that’s it really! For a good chunk of your test suite you want to be able to populate your test database with data that is tailored to your specific test cases. For quite a while, many devs used <a href="https://en.wikipedia.org/wiki/YAML">YAML</a> for this data—which made it database independent. In hindsight, being independent that way may have been the best thing about it. It was more or less one file per model. That alone might give you an idea about all kinds of headaches people were complaining about. Complexity is a fast growing enemy that YAML is hardly equiped to take on effectively. Below you’ll see what such a <strong>.yml</strong> file with test data looks like.</p>

<p>YAML file: <strong>secret_service.yml</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">Quartermaster</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Q</span>
</span><span class='line'>  <span class="l-Scalar-Plain">favorite_gadget</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Broom radio</span>
</span><span class='line'>  <span class="l-Scalar-Plain">skills</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Inventing gizmos and hacking</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">00 Agent</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">James Bond</span>
</span><span class='line'>  <span class="l-Scalar-Plain">favorite_gadget</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Submarine Lotus Esprit</span>
</span><span class='line'>  <span class="l-Scalar-Plain">skills</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Getting Bond Girls killed and covert infiltration</span>
</span></code></pre></td></tr></table></div></figure>


<p>It looks like a hash, doesn’t it? Its a colon-separeted list of key / value pairs that are separated by a blank space. You can reference other nodes within each other if you want to simulate associations from your models. But I think its fair to say that that’s where the music stops and many say their pain begins. For data sets that are a bit more involved, YAML fixtures are difficult to maintain and hard to change without affecting other tests. I mean you can make them work of course—after all developers used them plenty in the past—but many people agreed that the price to pay for managing fixtures is just a bit stingy.</p>

<p>To avoid breaking your test data when the inevitable changes occur, developers where happy to adopt newer strategies that offered more flexibility and dynamic behaviour. That’s where Factory Girl came in and left the YAML days behind. Another issue is the heavy dependency between the test and the <strong>.yml</strong> fixture file. <a href="https://robots.thoughtbot.com/mystery-guest">Mystery guests</a> are also a major pain with these kinds of fixtures. Factory Girl let’s you avoid that by creating objects relevant to the tests inline.</p>

<p>Sure, YAML fixtures are fast and I’ve heard people argue that a slow test suite with Factory Girl data made them go back YAML land. In my mind, if you are using Factory Girl so much that it really slows down your tests, you might be overusing factories unnecessarily and you might ignore strategies that are not hitting the database. You’ll see what I mean when we get to the relevant section(s). Of course, use whatever you need / see fit but consider yourself warned if you get burned by YAML.</p>

<p>I think it would be fair to add that in the early days of Rails and Ruby TDD, YAML fixtures were the de facto standard for setting up test data in your application. They played an important role and helped move the industry forward. Nowadays they have a reasonably bad rep though. Times change so let’s move on to factories which are meant to replace fixtures.</p>

<ul>
<li><h3>Configuration</h3></li>
</ul>


<p>I assume you already have Ruby and <a href="http://rspec.info/">RSpec</a> for testing installed on your system. If not, come back after consulting Google and you should be good to go. Its quite straightforward I’d say. You can install the gem manually in your terminal via</p>

<p><strong>Shell:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install factory_girl
</span></code></pre></td></tr></table></div></figure>


<p>or add it to your <strong>Gemfile:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;factory_girl&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 4.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and run <code>bundle install</code>.</p>

<p>Now you only need to <strong>require</strong> Factory Girl to complete your setup. Here I’m using RSpec so add the following at the top in <strong>/spec/spec_helper.rb</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;factory_girl&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ruby on Rails</h3>

<p>You are covered of course if you want to use Factory Girl with Rails. The <em>factory_girl_rails</em> gem provides a handy Rails integration for <em>factory_girl</em>.</p>

<p><strong>Shell:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install factory_girl_rails
</span></code></pre></td></tr></table></div></figure>


<p><strong>Gemfile:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;factory_girl_rails&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 4.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and <strong>require</strong> it of course in <strong>spec/spec_helper.rb</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Convenient Syntax Setup</h3>

<p>If you prefer typing something like (of course you do)</p>

<p><strong>Ruby:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>instead of</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>everytime you use one of your factories you just need to include the <code>FactoryGirl::Syntax::Methods</code> module in your test configuration file. If you forget that step, you have to preface all Factory Girl methods with the same verbose preface. This works with any Ruby app, not just with Rails ones of course.</p>

<p>For <strong>RSpec</strong> find the <strong>spec/spec_helper.rb</strong> file and add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="no">FactoryGirl</span><span class="o">::</span><span class="no">Syntax</span><span class="o">::</span><span class="no">Methods</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Attention!</h3>

<p>For the newbies among you, beware that the <strong>RSpec.configure</strong> block will already be there—buried under some amount of comments. You can also do the same setup in a separate file of your own—like <strong>spec/support/factory_girl.rb</strong>. In that case you will have to add the whole config block yourself of course.</p>

<p>The same configuration works if you are using other libraries for testing:</p>

<ul>
<li>Test::Unit</li>
<li>Cucumber</li>
<li>Spinach</li>
<li>MiniTest</li>
<li>MiniTest::Spec</li>
<li>minitest-rails</li>
</ul>


<p>You can go more fancy with your configuration by throwing in <strong>DatabaseCleaner</strong> for example but the documentation implies that this setup is sufficient to get going so I’ll move on from here.</p>

<ul>
<li><h3>Defining Factories</h3></li>
</ul>


<p>You can define your factories anywhere but they will be loaded automatically if they are placed in the following locations:</p>

<p><strong>RSpec:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>spec/factories.rb
</span><span class='line'>spec/factories/*.rb
</span></code></pre></td></tr></table></div></figure>


<p><strong>Test::Unit:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">test</span>/factories.rb
</span><span class='line'><span class="nb">test</span>/factories/*.rb
</span></code></pre></td></tr></table></div></figure>


<p>As you can see you have the option to split them into separate files that adhere to whatever logic or bundle your factories together into one big <strong>factories.rb</strong> file. The complexity of your project will be the best guideline for when to logically separate factories into their own separate files.</p>

<h3>Barebones Factories</h3>

<p>Factory Girl provides a well-developed ruby DSL syntax for defining factories like <em>user</em>, <em>post</em> or any other object—not only <em>Active Record</em> objects. “Plain” Ruby classes are perfectly fine. You start by setting up a define block in your <strong>factories.rb</strong> file.</p>

<p><strong>Ruby:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1">#define factories here</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All factories are defined inside this block. Factories just need a <strong>:symbol</strong> name and a set of attributes to get started. This name needs to be the <em>snake_cased</em> version of the Model you want to emulate—like SecretServiceAgent in the following example. The factory below is named <strong>secret_service_agent</strong> and has attributes called <strong>name</strong>, <strong>favorite_gadget</strong> and <strong>skills</strong>.</p>

<p><strong>Ruby:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:secret_service_agent</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;Q&quot;</span>
</span><span class='line'>    <span class="n">favorite_gadget</span> <span class="s2">&quot;Submarine Lotus Esprit&quot;</span>
</span><span class='line'>    <span class="n">skills</span> <span class="s2">&quot;Inventing gizmos and hacking&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Attention!</h3>

<p>If you take one thing away from this article then it should be the following: Only define the most barebones factory possible in order to be valid by default—valid in the sense of Active Record validations for example. When Factory Girl calls <strong>save!</strong> on instances your validations will get excercised. If any of them fail, <strong>ActiveRecord::RecordInvalid</strong> gets raised. Defining only the bare minimum gives you more flexibility if your data changes and will reduce the chances of breaking tests and duplication—since coupling is reduced to the core. Don’t be lazy when you compose your factories—it will pay off big time!</p>

<p>If you think this sounds hard to manage, you’ll most likely be glad to hear that there are handy solutions in place to segregate objects and their attributes. <strong>Inheritance</strong> and <strong>Traits</strong> will become great allies since they are handy strategies to complement your barebones factories and keep them DRY at the same time. Learn more about <em>Inheritance</em> below and my second article will focus quite a bit on <em>Trails</em>.</p>

<ul>
<li><h3>Using Factories</h3></li>
</ul>


<p>If you have included the <strong>FactoryGirl::Syntax::Methods</strong> in the configuration step you are able to use the shorthand syntax to create factories in your tests. You have four options which people call <em>build strategies</em>:</p>

<ul>
<li><strong>create</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create</span><span class="p">(</span><span class="ss">:some_object</span><span class="p">)</span>
</span><span class='line'><span class="c1"># FactoryGirl.create(:some_object)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This one returns an instance of the class the factory emulates. It is recommended to use <strong>create</strong> only when you really need to hit the database. This strategy slows down your test suite if overused unnecessarily. Use it if you want to run your validations since it will run <strong>save!</strong> in the background. I think this option is mostly appropriate when you do integration tests where you want to involve a database for your test scenarios.</p>

<ul>
<li><strong>build</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">build</span><span class="p">(</span><span class="ss">:some_object</span><span class="p">)</span>
</span><span class='line'><span class="c1"># FactoryGirl.build(:some_object)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It instantiates and assigns attributes but you’ll get an instance returned that is not saved to the database—<strong>build</strong> keeps the object only in memory. If you want to check if an object has certain attributes this will do the job since you don’t need database access for that kinda thing. Behind the scenes it does not use <strong>save!</strong> which means your validations are not run.</p>

<h3>Heads up!</h3>

<p>When you use associations with it you might run into a small gotcha. There is a little exception in regards to not saving the object via <strong>build</strong>—it <em>builds</em> the object but it <em>creates</em> the associations—which I will cover in the section about Factory Girl associations. There is a solution for that in case that’s not what you were shopping for.</p>

<ul>
<li><strong>build_stubbed</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:some_object</span><span class="p">)</span>
</span><span class='line'><span class="c1"># FactoryGirl.build_stubbed(:some_object)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This option was created for speeding up your tests and for test cases where none of the code needs to hit the database. It also instantiates and assigns attributes like <strong>build</strong> does but it only makes objects look like they have been persisted. The object returned has all the defined attributes from your factory stubbed out—plus a fake <strong>id</strong> and <strong>nil</strong> timestamps. Their associations are stubbed out as well—unlike <strong>build</strong> associations which are using <strong>create</strong> on associated objects. Since this strategy is dealing with stubs and has no dependency on the database these tests will be as fast as they get.</p>

<ul>
<li><strong>attributes_for</strong></li>
</ul>


<p>This method will return a hash of only the attributes defined in the relevant factory—without associations, timestamps and id of course. Its sort of convenient if you want to build an instance of an object without fiddling around with attribute hashes manually. I have seen it mostly used in Controller specs similar to this:</p>

<p><strong>Ruby:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s1">&#39;redirects to some location&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">spy</span><span class="p">:</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:spy</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">some_location</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Object comparison</h3>

<p>To close this section, let me give you one simple example to see the different objects returned from these four build strategies. Below you can compare the four different objects that you’ll get from <strong>attributes_for</strong>, <strong>create</strong>, <strong>build</strong> and <strong>build_stubbed</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:spy</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;Marty McSpy&quot;</span>
</span><span class='line'>    <span class="n">favorite_gadget</span> <span class="s2">&quot;Hoverboard&quot;</span>
</span><span class='line'>    <span class="n">skills</span> <span class="s2">&quot;Infiltration and espionage&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">attributes_for</span><span class="p">(</span><span class="ss">:spy</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#returned object</span>
</span><span class='line'><span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">&quot;Marty McSpy&quot;</span><span class="p">,</span> <span class="ss">:favorite_gadget</span><span class="o">=&gt;</span><span class="s2">&quot;Hoverboard&quot;</span><span class="p">,</span> <span class="ss">:skills</span><span class="o">=&gt;</span><span class="s2">&quot;Infiltration and espionage&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create</span><span class="p">(</span><span class="ss">:spy</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#returned object</span>
</span><span class='line'><span class="o">&lt;</span><span class="no">Spy</span> <span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Marty McSpy&quot;</span><span class="p">,</span> <span class="ss">favorite_gadget</span><span class="p">:</span> <span class="s2">&quot;Hoverboard&quot;</span><span class="p">,</span> <span class="ss">skills</span><span class="p">:</span> <span class="s2">&quot;Infiltration and espionage&quot;</span><span class="p">,</span> <span class="ss">created_at</span><span class="p">:</span> <span class="s2">&quot;2015-10-17 16:40:09&quot;</span><span class="p">,</span> <span class="ss">updated_at</span><span class="p">:</span> <span class="s2">&quot;2015-10-17 16:40:09&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">build</span><span class="p">(</span><span class="ss">:spy</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#returned object</span>
</span><span class='line'><span class="o">&lt;</span><span class="no">Spy</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Marty McSpy&quot;</span><span class="p">,</span> <span class="ss">favorite_gadget</span><span class="p">:</span> <span class="s2">&quot;Hoverboard&quot;</span><span class="p">,</span> <span class="ss">skills</span><span class="p">:</span> <span class="s2">&quot;Infiltration and espionage&quot;</span><span class="p">,</span> <span class="ss">created_at</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">updated_at</span><span class="p">:</span> <span class="kp">nil</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">build_stubbed</span><span class="p">(</span><span class="ss">:spy</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#returned object</span>
</span><span class='line'><span class="o">&lt;</span><span class="no">Spy</span> <span class="nb">id</span><span class="p">:</span> <span class="mi">1001</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Marty McSpy&quot;</span><span class="p">,</span> <span class="ss">favorite_gadget</span><span class="p">:</span> <span class="s2">&quot;Hoverboard&quot;</span><span class="p">,</span> <span class="ss">skills</span><span class="p">:</span> <span class="s2">&quot;Infiltration and espionage&quot;</span><span class="p">,</span> <span class="ss">created_at</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">updated_at</span><span class="p">:</span> <span class="kp">nil</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope this was helpful if there was still some confusion left how they work and when to use what option.</p>

<ul>
<li><h3>Inheritance</h3></li>
</ul>


<p>You’re gonna love this one! With inheritance you can define factories only with the necessary attributes that each class needs for creation. This parent factory can spawn as many “child” factories as you see fit to cover all kinds of test scenarios with varying data sets. Keeping your test data DRY is very important and inheritance makes this a lot more easy for you.</p>

<p>Say you wanna define a couple of core attributes on a factory and within that same factory have different factories for the same <strong>Class</strong> with different attributes. In the example below you can see how you can avoid repeating attributes by just nesting your factories. Let’s emulate a <strong>Spy</strong> class that needs to adapt to three different test scenarios.</p>

<p><strong>factories.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:spy</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Marty McSpy&#39;</span>
</span><span class='line'>    <span class="n">licence_to_kill</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">skills</span> <span class="s1">&#39;Espionage and intelligence&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:quartermaster</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">name</span> <span class="s1">&#39;Q&#39;</span>
</span><span class='line'>      <span class="n">skills</span> <span class="s1">&#39;Inventing gizmos and hacking&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:bond</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">name</span> <span class="s1">&#39;James Bond&#39;</span>
</span><span class='line'>      <span class="n">licence_to_kill</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>some_spec.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bond</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:bond</span><span class="p">)</span>
</span><span class='line'><span class="n">quartermaster</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:quartermaster</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">quartermaster</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &#39;Q&#39;</span>
</span><span class='line'><span class="n">quartermaster</span><span class="o">.</span><span class="n">skills</span> <span class="c1"># =&gt; &#39;Inventing gizmos and hacking&#39;</span>
</span><span class='line'><span class="n">quartermaster</span><span class="o">.</span><span class="n">licence_to_kill</span> <span class="c1"># =&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="n">bond</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &#39;James Bond&#39;</span>
</span><span class='line'><span class="n">bond</span><span class="o">.</span><span class="n">skills</span> <span class="c1"># =&gt; &#39;Espionage and intelligence&#39;</span>
</span><span class='line'><span class="n">bond</span><span class="o">.</span><span class="n">licence_to_kill</span> <span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can observe, the <strong>:bond</strong> and <strong>:quartermaster</strong> factories inherit attributes from their parent <strong>:spy</strong>. At the same time you can easily overwrite attributes as needed and be very expressive about it via their factory names. Imagine all the lines of code saved because you don’t have to repeat the same basic setup if you want to test different states or related objects. That feature alone is worth using Factory Girl and makes it hard to go back to YAML fixtures.</p>

<p>If you want to avoid nesting factory definitions you can also link factories to their parent explicitly by providing a <strong>parent</strong> hash:</p>

<p><strong>factories.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="ss">:spy</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s1">&#39;Marty McSpy&#39;</span>
</span><span class='line'>  <span class="n">licence_to_kill</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">skills</span> <span class="s1">&#39;Espionage and intelligence&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">factory</span> <span class="ss">:bond</span><span class="p">,</span> <span class="ss">parent</span><span class="p">:</span> <span class="ss">:spy</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s1">&#39;James Bond&#39;</span>
</span><span class='line'>  <span class="n">licence_to_kill</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Same functionality and almost as DRY.</p>

<ul>
<li><h3>Multiple Records</h3></li>
</ul>


<p>Here is a small but nevertheless welcome addtion to Factory Girl that makes dealing with lists easy as pie:</p>

<ul>
<li><strong>build_list</strong></li>
<li><strong>create_list</strong></li>
</ul>


<p>Every once in a while in situations where you want to have multiple instances of some factory without much fuzz, these will come in handy. Both methods will return an array with the amount of factory items specified. Pretty neat right?</p>

<p><strong>Ruby:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">spy_clones</span> <span class="o">=</span> <span class="n">create_list</span><span class="p">(</span><span class="ss">:spy</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">fake_spies</span> <span class="o">=</span> <span class="n">build_list</span><span class="p">(</span><span class="ss">:spy</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">spy_clones</span> <span class="c1"># =&gt; [#&lt;Spy id: 1, name: \&quot;Marty McSpy\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Infiltration and espionage\&quot;, created_at: \&quot;2015-10-18 18:52:02\&quot;, updated_at: \&quot;2015-10-18 18:52:02\&quot;&gt;, #&lt;Spy id: 2, name: \&quot;Marty McSpy\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Infiltration and espionage\&quot;, created_at: \&quot;2015-10-18 18:52:02\&quot;, updated_at: \&quot;2015-10-18 18:52:02\&quot;&gt;, #&lt;Spy id: 3, name: \&quot;Marty McSpy\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Infiltration and espionage\&quot;, created_at: \&quot;2015-10-18 18:52:02\&quot;, updated_at: \&quot;2015-10-18 18:52:02\&quot;&gt;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">fake_spies</span> <span class="c1"># =&gt; [#&lt;Spy id: nil, name: \&quot;Marty McSpy\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Infiltration and espionage\&quot;, created_at: nil, updated_at: nil&gt;, #&lt;Spy id: nil, name: \&quot;Marty McSpy\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Infiltration and espionage\&quot;, created_at: nil, updated_at: nil&gt;, #&lt;Spy id: nil, name: \&quot;Marty McSpy\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Infiltration and espionage\&quot;, created_at: nil, updated_at: nil&gt;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Subtle differences between the two options, but I’m sure you understand them by now. I should also mention that you can provide both methods with a hash of attributes if you want to overwrite factory attributes on the fly for some reason. Timewise, the overwrites will eat a bit of your testing speed if you create lots of test data with that have overwrites. Probably having a separate factory with these attributes changed will be a better option for creating lists.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">smug_spies</span> <span class="o">=</span> <span class="n">create_list</span><span class="p">(</span><span class="ss">:spy</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">skills</span><span class="p">:</span> <span class="s1">&#39;Smug jokes&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">double_agents</span> <span class="o">=</span> <span class="n">build_list</span><span class="p">(</span><span class="ss">:spy</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Vesper Lynd&#39;</span><span class="p">,</span> <span class="ss">skills</span><span class="p">:</span> <span class="s1">&#39;Seduction and bookkeeping&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">smug_spies</span> <span class="c1"># =&gt; [#&lt;Spy id: 1, name: \&quot;Marty McSpy\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Smug jokes\&quot;, created_at: \&quot;2015-10-18 19:08:07\&quot;, updated_at: \&quot;2015-10-18 19:08:07\&quot;&gt;, #&lt;Spy id: 2, name: \&quot;Marty McSpy\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Smug jokes\&quot;, created_at: \&quot;2015-10-18 19:08:07\&quot;, updated_at: \&quot;2015-10-18 19:08:07\&quot;&gt;, #&lt;Spy id: 3, name: \&quot;Marty McSpy\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Smug jokes\&quot;, created_at: \&quot;2015-10-18 19:08:07\&quot;, updated_at: \&quot;2015-10-18 19:08:07\&quot;&gt;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">double_agents</span> <span class="c1"># =&gt; [#&lt;Spy id: nil, name: \&quot;Vesper Lynd\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Seduction and bookkeeping\&quot;, created_at: nil, updated_at: nil&gt;, #&lt;Spy id: nil, name: \&quot;Vesper Lynd\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Seduction and bookkeeping\&quot;, created_at: nil, updated_at: nil&gt;, #&lt;Spy id: nil, name: \&quot;Vesper Lynd\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Seduction and bookkeeping\&quot;, created_at: nil, updated_at: nil&gt;] </span>
</span></code></pre></td></tr></table></div></figure>


<p>You’ll frequently need a pair of objects and therefore Factory Girl provides you another two options:</p>

<ul>
<li><strong>build_pair</strong></li>
<li><strong>create_pair</strong></li>
</ul>


<p>Same idea as above but the returned array holds only two records at a time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create_pair</span><span class="p">(</span><span class="ss">:spy</span><span class="p">)</span>
</span><span class='line'> <span class="c1"># =&gt; [#&lt;Spy id: 1, name: \&quot;Marty McSpy\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Infiltration and espionage\&quot;, created_at: \&quot;2015-10-18 19:31:41\&quot;, updated_at: \&quot;2015-10-18 19:31:41\&quot;&gt;, #&lt;Spy id: 2, name: \&quot;Marty McSpy\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Infiltration and espionage\&quot;, created_at: \&quot;2015-10-18 19:31:41\&quot;, updated_at: \&quot;2015-10-18 19:31:41\&quot;&gt;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">build_pair</span><span class="p">(</span><span class="ss">:spy</span><span class="p">)</span>
</span><span class='line'> <span class="c1"># =&gt; [#&lt;Spy id: nil, name: \&quot;Marty McSpy\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Infiltration and espionage\&quot;, created_at: nil, updated_at: nil&gt;, #&lt;Spy id: nil, name: \&quot;Marty McSpy\&quot;, function: \&quot;Covert agent\&quot;, skills: \&quot;Infiltration and espionage\&quot;, created_at: nil, updated_at: nil&gt;]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>Sequences</h3></li>
</ul>


<p>If you thought naming spies could be less static you are absolutly right. In this final section we’ll look at creating sequential unique values as test data for your factory attributes. When might this be useful? What about unique email addresses for testing authentication or unique usernames for example? That’s where sequences shine. Let’s look at a couple of different ways you can make use of <strong>sequence</strong>:</p>

<ul>
<li><strong>“global” sequence</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sequence</span> <span class="ss">:spy_email</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>    <span class="s2">&quot;00</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">@mi6.com&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:spy</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Marty McSpy&#39;</span>
</span><span class='line'>    <span class="n">email</span> <span class="s1">&#39;marty@thepinheads.com&#39;</span>
</span><span class='line'>    <span class="n">skills</span> <span class="s1">&#39;Espionage and infiltration&#39;</span>
</span><span class='line'>    <span class="n">license_to_kill</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:elite_spy</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">name</span> <span class="s1">&#39;Edward Donne&#39;</span>
</span><span class='line'>      <span class="n">license_to_kill</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">top_spy</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:elite_spy</span><span class="p">)</span>
</span><span class='line'><span class="n">top_spy</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">generate</span><span class="p">(</span><span class="ss">:spy_email</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">top_spy</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'><span class="c1"># =&gt; &quot;001@mi6.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since this sequence is defined “globally” for all your factories—it does not belong to one specifice factory—you can use this sequence generator for all your factories wherever you need a <strong>:spy_email</strong>. <strong>generate</strong> and the name of your sequence is all you need.</p>

<ul>
<li><strong>attributes</strong></li>
</ul>


<p>As a small variation that is super convenient I’m gonna show you how to directly assign sequences as attributes to your factories. Same condition as above where your sequence is defined “globally”. In the case of a factory definition you can leave off the <strong>generate</strong> method call and Factory Girl will assign the returned value from the sequence directly to the attribute of the same name. Neat!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sequence</span> <span class="ss">:email</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>    <span class="s2">&quot;00</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">@mi6.com&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:secret_service_agent</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Edwad Donne&#39;</span>
</span><span class='line'>    <span class="n">email</span>
</span><span class='line'>    <span class="n">skills</span> <span class="s1">&#39;Espionage and infiltration&#39;</span>
</span><span class='line'>    <span class="n">license_to_kill</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>lazy attributes</strong></li>
</ul>


<p>You can also use a <strong>sequence</strong> on <em>lazy attributes</em>. I will cover this topic in my second article but for completeness sake I wanted to mention it here as well. In case you need a unique value assigned at the time the instance gets created—therefore its called <em>lazy</em> because this attribute waits with value assignment until object instantiation—sequences just need a block to work as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sequence</span> <span class="ss">:mission_deployment</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
</span><span class='line'>    <span class="s2">&quot;Mission </span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2"> at </span><span class="si">#{</span><span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_formatted_s</span><span class="p">(</span><span class="ss">:short</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:spy</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;Marty McSpy&#39;</span>
</span><span class='line'>    <span class="n">deployment</span> <span class="p">{</span> <span class="n">generate</span><span class="p">(</span><span class="ss">:mission_deployment</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">some_spy</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:spy</span><span class="p">)</span>
</span><span class='line'><span class="n">some_spy</span><span class="o">.</span><span class="n">deployment</span> <span class="c1"># =&gt; &quot;Mission #1 at 19 Oct 21:13&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The block for the factory attribute gets evaluated when the object gets instantiated. In our case, you’ll get a string composed of a unique mission number and a new <strong>DateTime</strong> object as values for every <strong>:spy</strong> that gets deployed.</p>

<ul>
<li><strong>in-line sequence</strong></li>
</ul>


<p>This option is best when a sequence of unique values is only needed on an attribute for a single factory. It would make no sense to define it outside that factory and possibly have to look for it elsewhere if you need to tweak it. In the example below we are looking to generate unique ids for every spy car.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:aston_martin</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sequence</span><span class="p">(</span><span class="ss">:vehicle_id_number</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="s2">&quot;A_M_</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">spycar_01</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:aston_martin</span><span class="p">)</span>
</span><span class='line'><span class="n">spycar_01</span><span class="o">.</span><span class="n">vehicle_id_number</span>
</span><span class='line'><span class="c1"># =&gt; &quot;A_M_1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">spycar_02</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:aston_martin</span><span class="p">)</span>
</span><span class='line'><span class="n">spycar_02</span><span class="o">.</span><span class="n">vehicle_id_number</span>
</span><span class='line'><span class="c1"># =&gt; &quot;A_M_2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, maybe we should provide the <strong>vehicle_id_number</strong> attribute another starting value than <strong>1</strong>? Let’s say we wanna account for a couple of prototypes before the car was ready for production. You can provide a second argument as the starting value for your sequence. Let’s go with <strong>9</strong> this time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:aston_martin</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sequence</span><span class="p">(</span><span class="ss">:vehicle_id_number</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="s2">&quot;A_M_</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">spycar_01</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:aston_martin</span><span class="p">)</span>
</span><span class='line'><span class="n">spycar_01</span><span class="o">.</span><span class="n">vehicle_id_number</span>
</span><span class='line'><span class="c1"># =&gt; &quot;A_M_9&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">spycar_02</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:aston_martin</span><span class="p">)</span>
</span><span class='line'><span class="n">spycar_02</span><span class="o">.</span><span class="n">vehicle_id_number</span>
</span><span class='line'><span class="c1"># =&gt; &quot;A_M_10&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>Closing Thoughts</h3></li>
</ul>


<p>As you have seen by now, Factory Girl offers a well balanced Ruby DSL  that builds objects instead of Database Records for your test data. It helps to keep your tests focused, DRY and readable when you deal with dummy data. That’s a pretty solid accomplishment in my book. Remember that barebones factory definitions are key to your future sanity. The more factory data you put in your global test space the more likely you’ll experience some sort of maintainance pain. For your unit tests, Factory Girl will be unnecessary and only slows down your test suite. Josh Clayton would be the first to attest to this and who would recommend its best practice to use Factory Girl selectively and as little as possible.</p>
]]></content>
  </entry>
  
</feed>
